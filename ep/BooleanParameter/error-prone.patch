--- src/com/oltpbenchmark/benchmarks/sibench/SIBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/sibench/SIBenchmark.java
@@ -36,5 +36,5 @@
 
     public SIBenchmark(WorkloadConfiguration workConf) {
-        super("si", workConf, true);
+        super("si", workConf, /* withCatalog= */true);
     }
 
--- src/com/oltpbenchmark/api/TransactionType.java
+++ src/com/oltpbenchmark/api/TransactionType.java
@@ -35,5 +35,5 @@
 	
 	protected TransactionType(Class<? extends Procedure> procClass, int id) {
-	    this(procClass, id, false);
+	    this(procClass, id, /* supplemental= */false);
 	}
 
--- src/com/oltpbenchmark/util/json/JSONObject.java
+++ src/com/oltpbenchmark/util/json/JSONObject.java
@@ -293,5 +293,5 @@
     public JSONObject(Object bean) {
         this();
-        populateInternalMap(bean, false);
+        populateInternalMap(bean, /* includeSuperClass= */false);
     }
 
@@ -781,5 +781,5 @@
      */
     public boolean optBoolean(String key) {
-        return optBoolean(key, false);
+        return optBoolean(key, /* defaultValue= */false);
     }
 
--- src/com/oltpbenchmark/util/json/JSONArray.java
+++ src/com/oltpbenchmark/util/json/JSONArray.java
@@ -438,5 +438,5 @@
      */
     public boolean optBoolean(int index)  {
-        return optBoolean(index, false);
+        return optBoolean(index, /* defaultValue= */false);
     }
 
--- src/com/oltpbenchmark/benchmarks/jpab/JPABBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/jpab/JPABBenchmark.java
@@ -40,5 +40,5 @@
 
     public JPABBenchmark(WorkloadConfiguration workConf) {
-        super("jpab", workConf, false);
+        super("jpab", workConf, /* withCatalog= */false);
         this.jpabConf = new JPABConfiguration(workConf);
     }
--- src/com/oltpbenchmark/benchmarks/seats/SEATSBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/seats/SEATSBenchmark.java
@@ -39,5 +39,5 @@
 
     public SEATSBenchmark(WorkloadConfiguration workConf) {
-        super("seats", workConf, true);
+        super("seats", workConf, /* withCatalog= */true);
         this.registerSupplementalProcedure(LoadConfig.class);
     }
--- src/com/oltpbenchmark/benchmarks/tpcds/TPCDSBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/tpcds/TPCDSBenchmark.java
@@ -19,5 +19,5 @@
 
     public TPCDSBenchmark(WorkloadConfiguration workConf) {
-        super("tpcds", workConf, true);
+        super("tpcds", workConf, /* withCatalog= */true);
     }
 
--- src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaBenchmark.java
@@ -43,5 +43,5 @@
     @SuppressWarnings("unchecked")
     public WikipediaBenchmark(WorkloadConfiguration workConf) {
-        super("wikipedia", workConf, true);
+        super("wikipedia", workConf, /* withCatalog= */true);
 
         this.commentLength = new FlatHistogram<Integer>(this.rng(), RevisionHistograms.COMMENT_LENGTH);
--- src/com/oltpbenchmark/benchmarks/resourcestresser/ResourceStresserBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/resourcestresser/ResourceStresserBenchmark.java
@@ -37,5 +37,5 @@
 
 	public ResourceStresserBenchmark(WorkloadConfiguration workConf) {
-		super("resourcestresser", workConf, true);
+		super("resourcestresser", workConf, /* withCatalog= */true);
 	}
 	
--- src/com/oltpbenchmark/benchmarks/twitter/TwitterBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/twitter/TwitterBenchmark.java
@@ -40,5 +40,5 @@
 
 	public TwitterBenchmark(WorkloadConfiguration workConf) {
-		super("twitter", workConf, true);
+		super("twitter", workConf, /* withCatalog= */true);
 		this.twitterConf = new TwitterConfiguration(workConf);
 	}
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkWorker.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkWorker.java
@@ -440,5 +440,5 @@
         assert (i_id.getSellerId().equals(sellerId));
          
-        ItemStatus qtype = profile.addItemToProperQueue(itemInfo, false);
+        ItemStatus qtype = profile.addItemToProperQueue(itemInfo, /* is_loader= */false);
     
         return (i_id);
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkBenchmark.java
@@ -43,5 +43,5 @@
     
 	public AuctionMarkBenchmark(WorkloadConfiguration workConf) {
-		super("auctionmark", workConf, true);
+		super("auctionmark", workConf, /* withCatalog= */true);
 		
 		this.registerSupplementalProcedure(LoadConfig.class);
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkProfile.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkProfile.java
@@ -455,5 +455,5 @@
             // it is added to the right queue
             ItemInfo itemInfo = new ItemInfo(i_id, i_current_price, i_end_date, i_num_bids);
-            profile.addItemToProperQueue(itemInfo, false);
+            profile.addItemToProperQueue(itemInfo, /* is_loader= */false);
             ctr++;
         } // WHILE
@@ -897,8 +897,8 @@
      **********************************************************************************************/
     public ItemInfo getRandomAvailableItemId() {
-        return this.getRandomItem(this.items_available, false, false);
+        return this.getRandomItem(this.items_available, /* needCurrentPrice= */false, /* needFutureEndDate= */false);
     }
     public ItemInfo getRandomAvailableItem(boolean hasCurrentPrice) {
-        return this.getRandomItem(this.items_available, hasCurrentPrice, false);
+        return this.getRandomItem(this.items_available, hasCurrentPrice, /* needFutureEndDate= */false);
     }
     public int getAvailableItemsCount() {
@@ -910,8 +910,8 @@
      **********************************************************************************************/
     public ItemInfo getRandomEndingSoonItem() {
-        return this.getRandomItem(this.items_endingSoon, false, true);
+        return this.getRandomItem(this.items_endingSoon, /* needCurrentPrice= */false, /* needFutureEndDate= */true);
     }
     public ItemInfo getRandomEndingSoonItem(boolean hasCurrentPrice) {
-        return this.getRandomItem(this.items_endingSoon, hasCurrentPrice, true);
+        return this.getRandomItem(this.items_endingSoon, hasCurrentPrice, /* needFutureEndDate= */true);
     }
     public int getEndingSoonItemsCount() {
@@ -923,5 +923,5 @@
      **********************************************************************************************/
     public ItemInfo getRandomWaitForPurchaseItem() {
-        return this.getRandomItem(this.items_waitingForPurchase, false, false);
+        return this.getRandomItem(this.items_waitingForPurchase, /* needCurrentPrice= */false, /* needFutureEndDate= */false);
     }
     public int getWaitForPurchaseItemsCount() {
@@ -933,5 +933,5 @@
      **********************************************************************************************/
     public ItemInfo getRandomCompleteItem() {
-        return this.getRandomItem(this.items_completed, false, false);
+        return this.getRandomItem(this.items_completed, /* needCurrentPrice= */false, /* needFutureEndDate= */false);
     }
     public int getCompleteItemsCount() {
@@ -954,5 +954,5 @@
             idx = rng.nextInt(allItemSets.length);
         } // WHILE
-        return (this.getRandomItem(allItemSets[idx], false, false));
+        return (this.getRandomItem(allItemSets[idx], /* needCurrentPrice= */false, /* needFutureEndDate= */false));
     }
 
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/ItemInfo.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/ItemInfo.java
@@ -109,5 +109,5 @@
     @Override
     public void fromJSON(JSONObject json_object) throws JSONException {
-        JSONUtil.fieldsFromJSON(json_object, this, ItemInfo.class, true, JSONUtil.getSerializableFields(ItemInfo.class));
+        JSONUtil.fieldsFromJSON(json_object, this, ItemInfo.class, /* ignore_missing= */true, JSONUtil.getSerializableFields(ItemInfo.class));
     }
 }
--- src/com/oltpbenchmark/util/ThreadUtil.java
+++ src/com/oltpbenchmark/util/ThreadUtil.java
@@ -138,5 +138,5 @@
      */
     public static <T> void fork(String command[], EventObservable<T> stop_observable) {
-        ThreadUtil.fork(command, stop_observable, null, false);
+        ThreadUtil.fork(command, stop_observable, null, /* print_output= */false);
     }
 
@@ -246,5 +246,5 @@
             }
         } // SYNCHRONIZED
-        ThreadUtil.run(runnables, ThreadUtil.pool, false);
+        ThreadUtil.run(runnables, ThreadUtil.pool, /* stop_pool= */false);
     }
     
@@ -264,5 +264,5 @@
     public static <R extends Runnable> void runNewPool(final Collection<R> threads) {
         ExecutorService pool = Executors.newCachedThreadPool(factory);
-        ThreadUtil.run(threads, pool, true);
+        ThreadUtil.run(threads, pool, /* stop_pool= */true);
     }
 
@@ -273,5 +273,5 @@
     public static <R extends Runnable> void runNewPool(final Collection<R> threads, int max_concurrent) {
         ExecutorService pool = Executors.newFixedThreadPool(max_concurrent, factory);
-        ThreadUtil.run(threads, pool, true);
+        ThreadUtil.run(threads, pool, /* stop_pool= */true);
     }
 
--- src/com/oltpbenchmark/util/Pair.java
+++ src/com/oltpbenchmark/util/Pair.java
@@ -52,5 +52,5 @@
 
     public Pair(T first, U second) {
-        this(first, second, true);
+        this(first, second, /* precomputeHash= */true);
     }
 
--- src/com/oltpbenchmark/benchmarks/noop/NoOpBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/noop/NoOpBenchmark.java
@@ -38,5 +38,5 @@
 
     public NoOpBenchmark(WorkloadConfiguration workConf) {
-        super("noop", workConf, true);
+        super("noop", workConf, /* withCatalog= */true);
     }
 
--- src/com/oltpbenchmark/benchmarks/chbenchmark/CHBenCHmark.java
+++ src/com/oltpbenchmark/benchmarks/chbenchmark/CHBenCHmark.java
@@ -37,5 +37,5 @@
 	
 	public CHBenCHmark(WorkloadConfiguration workConf) {
-		super("chbenchmark", workConf, true);
+		super("chbenchmark", workConf, /* withCatalog= */true);
 	}
 	
--- src/com/oltpbenchmark/benchmarks/tpcc/TPCCBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/TPCCBenchmark.java
@@ -39,5 +39,5 @@
 
 	public TPCCBenchmark(WorkloadConfiguration workConf) {
-		super("tpcc", workConf, true);
+		super("tpcc", workConf, /* withCatalog= */true);
 	}
 
--- src/com/oltpbenchmark/benchmarks/epinions/EpinionsBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/epinions/EpinionsBenchmark.java
@@ -41,5 +41,5 @@
 
     public EpinionsBenchmark(WorkloadConfiguration workConf) {
-        super("epinions", workConf, true);
+        super("epinions", workConf, /* withCatalog= */true);
     }
 
--- src/com/oltpbenchmark/benchmarks/smallbank/SmallBankBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/smallbank/SmallBankBenchmark.java
@@ -21,5 +21,5 @@
     
     public SmallBankBenchmark(WorkloadConfiguration workConf) {
-        super("smallbank", workConf, true);
+        super("smallbank", workConf, /* withCatalog= */true);
         this.numAccounts = (int)Math.round(SmallBankConstants.NUM_ACCOUNTS * workConf.getScaleFactor());
     }
--- src/com/oltpbenchmark/benchmarks/linkbench/utils/InvertibleShuffler.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/utils/InvertibleShuffler.java
@@ -67,9 +67,9 @@
 
   public long permute(long i) {
-    return permute(i, false);
+    return permute(i, /* inverse= */false);
   }
 
   public long invertPermute(long i) {
-    return permute(i, true);
+    return permute(i, /* inverse= */true);
   }
 
--- src/com/oltpbenchmark/benchmarks/hyadapt/HYADAPTBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/HYADAPTBenchmark.java
@@ -39,5 +39,5 @@
 
     public HYADAPTBenchmark(WorkloadConfiguration workConf) {
-        super("hyadapt", workConf, true);
+        super("hyadapt", workConf, /* withCatalog= */true);
     }
 
--- src/com/oltpbenchmark/benchmarks/tpch/TPCHBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/tpch/TPCHBenchmark.java
@@ -46,5 +46,5 @@
 
 	public TPCHBenchmark(WorkloadConfiguration workConf) {
-		super("tpch", workConf, true);
+		super("tpch", workConf, /* withCatalog= */true);
 	}
 
--- src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchBenchmark.java
@@ -47,5 +47,5 @@
 
     public LinkBenchBenchmark(WorkloadConfiguration workConf) throws Exception {
-        super("linkbench", workConf, true);
+        super("linkbench", workConf, /* withCatalog= */true);
         this.linkBenchConf = new LinkBenchConfiguration(workConf);
         props = new Properties();
--- src/com/oltpbenchmark/util/JSONUtil.java
+++ src/com/oltpbenchmark/util/JSONUtil.java
@@ -477,5 +477,5 @@
      */
     public static <E extends Enum<?>, T> void fieldsFromJSON(JSONObject json_object, T object, Class<? extends T> base_class, E...members) throws JSONException {
-        JSONUtil.fieldsFromJSON(json_object, object, base_class, false, members);
+        JSONUtil.fieldsFromJSON(json_object, object, base_class, /* ignore_missing= */false, members);
     }
     
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkLoader.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkLoader.java
@@ -1059,5 +1059,5 @@
         		itemInfo.lastBidderId = profile.getRandomBuyerId(itemInfo.sellerId);
             }
-            profile.addItemToProperQueue(itemInfo, true);
+            profile.addItemToProperQueue(itemInfo, /* is_loader= */true);
 
             // I_ID
--- src/com/oltpbenchmark/benchmarks/voter/VoterBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/voter/VoterBenchmark.java
@@ -34,5 +34,5 @@
     
     public VoterBenchmark(WorkloadConfiguration workConf) {
-        super("voter", workConf, true);
+        super("voter", workConf, /* withCatalog= */true);
         numContestants = VoterUtil.getScaledNumContestants(workConf.getScaleFactor());
     }
--- src/com/oltpbenchmark/benchmarks/tatp/TATPBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/tatp/TATPBenchmark.java
@@ -33,5 +33,5 @@
 
 	public TATPBenchmark(WorkloadConfiguration workConf) {
-		super("tatp", workConf, true);
+		super("tatp", workConf, /* withCatalog= */true);
 	}
 	
--- src/com/oltpbenchmark/util/StringUtil.java
+++ src/com/oltpbenchmark/util/StringUtil.java
@@ -163,5 +163,5 @@
      */
     public static String formatMaps(Map<?, ?>...maps) {
-        return (formatMaps(":", false, false, false, false, true, true, maps));
+        return (formatMaps(":", /* upper= */false, /* box= */false, /* border_top= */false, /* border_bottom= */false, /* recursive= */true, /* first_element_title= */true, maps));
     }
     
@@ -174,5 +174,5 @@
      */
     public static String formatMaps(String delimiter, Map<?, ?>...maps) {
-        return (formatMaps(delimiter, false, false, false, false, true, true, maps));
+        return (formatMaps(delimiter, /* upper= */false, /* box= */false, /* border_top= */false, /* border_bottom= */false, /* recursive= */true, /* first_element_title= */true, maps));
     }
 
@@ -319,5 +319,5 @@
      */
     public static String formatMapsBoxed(Map<?, ?>...maps) {
-        return (formatMaps(":", false, true, false, false, true, true, maps));
+        return (formatMaps(":", /* upper= */false, /* box= */true, /* border_top= */false, /* border_bottom= */false, /* recursive= */true, /* first_element_title= */true, maps));
     }
 
@@ -418,5 +418,5 @@
      */
     public static String abbrv(String str, int max) {
-        return (abbrv(str, max, true));
+        return (abbrv(str, max, /* dots= */true));
     }
 
@@ -445,5 +445,5 @@
      */
     public static String title(String string) {
-        return (StringUtil.title(string, false));
+        return (StringUtil.title(string, /* keep_upper= */false));
     }
     
--- src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchWorker.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchWorker.java
@@ -283,5 +283,5 @@
                                       new byte[(int)linkDataSize.choose(rng)]);
         // no inverses for now
-        boolean alreadyExists = proc.run(conn, link, true);
+        boolean alreadyExists = proc.run(conn, link, /* noinverse= */true);
         boolean added = !alreadyExists;
     }
@@ -294,6 +294,6 @@
         long id2 = id2chooser.chooseForOp(rng, id1, link_type,
                                           ID2Chooser.P_DELETE_EXIST);
-        proc.run(conn, id1, link_type, id2, true, // no inverse
-            false);
+        proc.run(conn, id1, link_type, id2, /* noinverse= */true, // no inverse
+            /* expunge= */false);
     }
     private void updateLink() throws SQLException{
@@ -313,5 +313,5 @@
                             new byte[(int)linkDataSize.choose(rng)]);
         // no inverses for now
-        boolean found1 = proc.run(conn, link, true);
+        boolean found1 = proc.run(conn, link, /* noinverse= */true);
         boolean found = found1;
     }
--- src/com/oltpbenchmark/benchmarks/ycsb/YCSBBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/ycsb/YCSBBenchmark.java
@@ -36,5 +36,5 @@
 
     public YCSBBenchmark(WorkloadConfiguration workConf) {
-        super("ycsb", workConf, true);
+        super("ycsb", workConf, /* withCatalog= */true);
     }
 
--- src/com/oltpbenchmark/benchmarks/seats/SEATSLoader.java
+++ src/com/oltpbenchmark/benchmarks/seats/SEATSLoader.java
@@ -397,5 +397,5 @@
                     // loaded directly
                 } else {
-                    hist = SEATSHistogramUtil.loadHistogram(histogramName, this.profile.airline_data_dir, true);
+                    hist = SEATSHistogramUtil.loadHistogram(histogramName, this.profile.airline_data_dir, /* has_header= */true);
                 }
             } catch (Exception ex) {
@@ -636,5 +636,5 @@
 
         public FixedDataIterable(Table catalog_tbl, File filename) throws Exception {
-            super(catalog_tbl, filename, true, true);
+            super(catalog_tbl, filename, /* has_header= */true, /* auto_generate_first_column= */true);
 
             // Figure out which columns are random integers and strings
--- src/com/oltpbenchmark/util/FileUtil.java
+++ src/com/oltpbenchmark/util/FileUtil.java
@@ -148,5 +148,5 @@
 
     public static File getTempFile(String ext) {
-        return (FileUtil.getTempFile(null, ext, false));
+        return (FileUtil.getTempFile(null, ext, /* deleteOnExit= */false));
     }
 
@@ -204,5 +204,5 @@
      */
     public static File writeStringToTempFile(String content) {
-        return (writeStringToTempFile(content, "tmp", false));
+        return (writeStringToTempFile(content, "tmp", /* deleteOnExit= */false));
     }
 
@@ -216,5 +216,5 @@
      */
     public static File writeStringToTempFile(String content, String ext) {
-        return (writeStringToTempFile(content, ext, false));
+        return (writeStringToTempFile(content, ext, /* deleteOnExit= */false));
     }
 
@@ -328,5 +328,5 @@
      */
     public static File findDirectory(String dirName) throws IOException {
-        return (FileUtil.find(dirName, new File(".").getCanonicalFile(), true).getCanonicalFile());
+        return (FileUtil.find(dirName, new File(".").getCanonicalFile(), /* isdir= */true).getCanonicalFile());
     }
 
@@ -340,5 +340,5 @@
      */
     public static File findFile(String fileName) throws IOException {
-        return (FileUtil.find(fileName, new File(".").getCanonicalFile(), false).getCanonicalFile());
+        return (FileUtil.find(fileName, new File(".").getCanonicalFile(), /* isdir= */false).getCanonicalFile());
     }
 
--- src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaWorker.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaWorker.java
@@ -100,10 +100,10 @@
             // GetPageAnonymous
             else if (procClass.equals(GetPageAnonymous.class)) {
-                this.getPageAnonymous(true, this.generateUserIP(), nameSpace, pageTitle);
+                this.getPageAnonymous(/* forSelect= */true, this.generateUserIP(), nameSpace, pageTitle);
             }
             // GetPageAuthenticated
             else if (procClass.equals(GetPageAuthenticated.class)) {
                 assert (userId > 0);
-                this.getPageAuthenticated(true, this.generateUserIP(), userId, nameSpace, pageTitle);
+                this.getPageAuthenticated(/* forSelect= */true, this.generateUserIP(), userId, nameSpace, pageTitle);
             }
             this.conn.commit();
@@ -156,5 +156,5 @@
 
     public void updatePage(String userIp, int userId, int nameSpace, String pageTitle) throws SQLException {
-        Article a = this.getPageAnonymous(false, userIp, nameSpace, pageTitle);
+        Article a = this.getPageAnonymous(/* forSelect= */false, userIp, nameSpace, pageTitle);
         this.conn.commit();
 
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/CategoryParser.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/CategoryParser.java
@@ -71,5 +71,5 @@
 		}
 		
-		addNewCategory(categoryName, itemCount, true);
+		addNewCategory(categoryName, itemCount, /* isLeaf= */true);
 	}
 	
@@ -94,5 +94,5 @@
 			parentCategory = _categoryMap.get(parentCategoryName);
 		} else if(!parentCategoryName.isEmpty()){
-			parentCategory = addNewCategory(parentCategoryName, 0, false);
+			parentCategory = addNewCategory(parentCategoryName, 0, /* isLeaf= */false);
 		}
 		
