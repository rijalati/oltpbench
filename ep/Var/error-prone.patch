--- src/com/oltpbenchmark/benchmarks/sibench/SIBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/sibench/SIBenchmark.java
@@ -17,4 +17,12 @@
 package com.oltpbenchmark.benchmarks.sibench;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.sibench.procedures.UpdateRecord;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
 import java.io.IOException;
 import java.sql.Connection;
@@ -25,12 +33,4 @@
 import java.util.List;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.sibench.procedures.UpdateRecord;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-
 public class SIBenchmark extends BenchmarkModule {
 
@@ -53,5 +53,5 @@
             Statement stmt = metaConn.createStatement();
             ResultSet res = stmt.executeQuery(recordCount);
-            int init_record_count = 0;
+            @Var int init_record_count = 0;
             while (res.next()) {
                 init_record_count = res.getInt(1);
--- src/com/oltpbenchmark/api/Loader.java
+++ src/com/oltpbenchmark/api/Loader.java
@@ -18,12 +18,5 @@
 package com.oltpbenchmark.api;
 
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.List;
-import java.util.Random;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.WorkloadConfiguration;
 import com.oltpbenchmark.catalog.Catalog;
@@ -33,4 +26,10 @@
 import com.oltpbenchmark.util.Histogram;
 import com.oltpbenchmark.util.SQLUtil;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.List;
+import java.util.Random;
+import org.apache.log4j.Logger;
 
 /**
@@ -193,5 +192,5 @@
 
     protected void updateAutoIncrement(Column catalog_col, int value) throws SQLException {
-        String sql = null;
+        @Var String sql = null;
         switch (getDatabaseType()) {
             case POSTGRES:
--- src/com/oltpbenchmark/api/BenchmarkModule.java
+++ src/com/oltpbenchmark/api/BenchmarkModule.java
@@ -18,4 +18,13 @@
 package com.oltpbenchmark.api;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.Loader.LoaderThread;
+import com.oltpbenchmark.catalog.Catalog;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.types.DatabaseType;
+import com.oltpbenchmark.util.ClassUtil;
+import com.oltpbenchmark.util.ScriptRunner;
+import com.oltpbenchmark.util.ThreadUtil;
 import java.io.File;
 import java.io.IOException;
@@ -31,16 +40,6 @@
 import java.util.Random;
 import java.util.Set;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.Loader.LoaderThread;
-import com.oltpbenchmark.catalog.Catalog;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.types.DatabaseType;
-import com.oltpbenchmark.util.ClassUtil;
-import com.oltpbenchmark.util.ScriptRunner;
-import com.oltpbenchmark.util.ThreadUtil;
-
 /**
  * Base class for all benchmark implementations
@@ -311,5 +310,5 @@
      * @param conn
      */
-    protected final void loadDatabase(final Connection conn) {
+    protected final void loadDatabase(Connection conn) {
         try {
             Loader<? extends BenchmarkModule> loader = this.makeLoaderImpl(conn);
@@ -452,5 +451,5 @@
         if (txns != null) {
             for (Class<? extends Procedure> procClass : this.supplementalProcedures) {
-                TransactionType txn = txns.getType(procClass);
+                @Var TransactionType txn = txns.getType(procClass);
                 if (txn == null) {
                     txn = new TransactionType(procClass, procClass.hashCode(), true);
--- src/com/oltpbenchmark/WorkloadConfiguration.java
+++ src/com/oltpbenchmark/WorkloadConfiguration.java
@@ -18,4 +18,9 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.TransactionTypes;
+import com.oltpbenchmark.types.DatabaseType;
+import com.oltpbenchmark.util.StringUtil;
+import com.oltpbenchmark.util.ThreadUtil;
 import java.lang.reflect.Field;
 import java.sql.Connection;
@@ -23,13 +28,7 @@
 import java.util.List;
 import java.util.Map;
-
 import org.apache.commons.collections15.map.ListOrderedMap;
 import org.apache.commons.configuration.XMLConfiguration;
 
-import com.oltpbenchmark.api.TransactionTypes;
-import com.oltpbenchmark.types.DatabaseType;
-import com.oltpbenchmark.util.StringUtil;
-import com.oltpbenchmark.util.ThreadUtil;
-
 public class WorkloadConfiguration {
     
@@ -297,5 +296,5 @@
         Map<String, Object> m = new ListOrderedMap<String, Object>();
         for (Field f : confClass.getDeclaredFields()) {
-            Object obj = null;
+            @Var Object obj = null;
             try {
                 obj = f.get(this);
--- src/com/oltpbenchmark/api/Procedure.java
+++ src/com/oltpbenchmark/api/Procedure.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.api;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.jdbc.AutoIncrementPreparedStatement;
+import com.oltpbenchmark.types.DatabaseType;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -27,10 +30,6 @@
 import java.util.Map;
 import java.util.Map.Entry;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.jdbc.AutoIncrementPreparedStatement;
-import com.oltpbenchmark.types.DatabaseType;
-
 public abstract class Procedure {
     private static final Logger LOG = Logger.getLogger(Procedure.class);
@@ -122,5 +121,5 @@
     public final PreparedStatement getPreparedStatementReturnKeys(Connection conn, SQLStmt stmt, int[] is) throws SQLException {
         assert(this.name_stmt_xref != null) : "The Procedure " + this + " has not been initialized yet!";
-        PreparedStatement pStmt = this.prepardStatements.get(stmt);
+        @Var PreparedStatement pStmt = this.prepardStatements.get(stmt);
         if (pStmt == null) {
             assert(this.stmt_name_xref.containsKey(stmt)) :
--- src/com/oltpbenchmark/api/Worker.java
+++ src/com/oltpbenchmark/api/Worker.java
@@ -17,16 +17,5 @@
 package com.oltpbenchmark.api;
 
-import java.sql.Connection;
-import java.sql.Statement;
-import java.sql.SQLException;
-import java.sql.Savepoint;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Random;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.LatencyRecord;
 import com.oltpbenchmark.Phase;
@@ -41,4 +30,14 @@
 import com.oltpbenchmark.util.Histogram;
 import com.oltpbenchmark.util.StringUtil;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.sql.Savepoint;
+import java.sql.Statement;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Random;
+import java.util.concurrent.atomic.AtomicInteger;
+import org.apache.log4j.Logger;
 
 public abstract class Worker<T extends BenchmarkModule> implements Runnable {
@@ -212,5 +211,5 @@
     public final void run() {
         Thread t = Thread.currentThread();
-        SubmittedProcedure pieceOfWork;
+        @Var SubmittedProcedure pieceOfWork;
         t.setName(this.toString());
 
@@ -227,6 +226,6 @@
         // wait for start
         wrkldState.blockForStart();
-        State preState, postState;
-        Phase phase;
+        @Var State preState, postState;
+        @Var Phase phase;
 
         TransactionType invalidTT = TransactionType.INVALID;
@@ -292,5 +291,5 @@
             long start = pieceOfWork.getStartTime();
 
-            TransactionType type = invalidTT;
+            @Var TransactionType type = invalidTT;
             try {
                 type = doWork(preState == State.MEASURE, pieceOfWork);
@@ -361,9 +360,9 @@
      */
     protected final TransactionType doWork(boolean measure, SubmittedProcedure pieceOfWork) {
-        TransactionType next = null;
-        TransactionStatus status = TransactionStatus.RETRY;
+        @Var TransactionType next = null;
+        @Var TransactionStatus status = TransactionStatus.RETRY;
         Savepoint savepoint = null;
-        final DatabaseType dbType = wrkld.getDBType();
-        final boolean recordAbortMessages = wrkld.getRecordAbortMessages();
+        DatabaseType dbType = wrkld.getDBType();
+        boolean recordAbortMessages = wrkld.getRecordAbortMessages();
 
         try {
@@ -394,5 +393,5 @@
                     /* PAVLO */
                     if (recordAbortMessages) {
-                        Histogram<String> error_h = this.txnAbortMessages.get(next);
+                        @Var Histogram<String> error_h = this.txnAbortMessages.get(next);
                         if (error_h == null) {
                             error_h = new Histogram<String>();
@@ -527,5 +526,5 @@
             } // WHILE
         } catch (SQLException ex) {
-            String msg = String.format("Unexpected fatal, error in '%s' when executing '%s' [%s]",
+            @Var String msg = String.format("Unexpected fatal, error in '%s' when executing '%s' [%s]",
                                        this, next, dbType);
             // FIXME: PAVLO 2016-12-29
--- src/com/oltpbenchmark/LatencyRecord.java
+++ src/com/oltpbenchmark/LatencyRecord.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -79,5 +80,5 @@
 	public int size() {
 		// Samples stored in full chunks
-		int samples = (values.size() - 1) * ALLOC_SIZE;
+		@Var int samples = (values.size() - 1) * ALLOC_SIZE;
 
 		// Samples stored in the last not full chunk
--- src/com/oltpbenchmark/util/Histogram.java
+++ src/com/oltpbenchmark/util/Histogram.java
@@ -18,13 +18,12 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.util.json.*;
 import java.io.IOException;
 import java.lang.reflect.Field;
 import java.util.*;
 import java.util.Map.Entry;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.util.json.*;
-
 /**
  * A very nice and simple generic Histogram
@@ -140,5 +139,5 @@
             synchronized (this) {
                 Iterator<X> it = this.histogram.keySet().iterator();
-                int ctr = 0;
+                @Var int ctr = 0;
                 while (it.hasNext()) {
                     X key = it.next();
@@ -167,5 +166,5 @@
      * @param count
      */
-    private void _put(X value, int count) {
+    private void _put(X value, @Var int count) {
         if (value == null) return;
         this.num_samples += count;
@@ -315,7 +314,7 @@
     public SortedSet<X> sortedValues() {
         SortedSet<X> sorted = new TreeSet<X>(new Comparator<X>() {
-            public int compare(final X item0, final X item1) {
-                final Integer v0 = Histogram.this.get(item0);
-                final Integer v1 = Histogram.this.get(item1);
+            public int compare(X item0, X item1) {
+                Integer v0 = Histogram.this.get(item0);
+                Integer v1 = Histogram.this.get(item1);
                 if (v0.equals(v1)) return (-1);
                 return (v1.compareTo(v0));
@@ -400,5 +399,5 @@
      * 
      */
-    public synchronized void set(X value, int i) {
+    public synchronized void set(X value, @Var int i) {
         Integer orig = this.get(value);
         if (orig != null && orig != i) {
@@ -573,5 +572,5 @@
      * @return
      */
-    public synchronized String toString(Integer max_chars, Integer max_length) {
+    public synchronized String toString(Integer max_chars, @Var Integer max_length) {
         StringBuilder s = new StringBuilder();
         if (max_length == null) max_length = MAX_VALUE_LENGTH;
@@ -580,5 +579,5 @@
         
         // Figure out the max size of the counts
-        int max_ctr_length = 4;
+        @Var int max_ctr_length = 4;
         for (Integer ctr : this.histogram.values()) {
             max_ctr_length = Math.max(max_ctr_length, ctr.toString().length());
@@ -587,9 +586,9 @@
         // Don't let anything go longer than MAX_VALUE_LENGTH chars
         String f = "%-" + max_length + "s [%" + max_ctr_length + "d] ";
-        boolean first = true;
+        @Var boolean first = true;
         boolean has_labels = this.hasDebugLabels();
         for (Object value : this.histogram.keySet()) {
             if (!first) s.append("\n");
-            String str = null;
+            @Var String str = null;
             if (has_labels) str = this.debug_names.get(value);
             if (str == null) str = (value != null ? value.toString() : "null");
@@ -628,5 +627,5 @@
     @Override
     public void toJSON(JSONStringer stringer) throws JSONException {
-        Class<?> value_type = null;
+        @Var Class<?> value_type = null;
         for (Members element : Histogram.Members.values()) {
             if (element == Histogram.Members.VALUE_TYPE) continue;
@@ -660,5 +659,5 @@
             this.setKeepZeroEntries(object.getBoolean(Members.KEEP_ZERO_ENTRIES.name()));
         }
-        Class<?> value_type = null;
+        @Var Class<?> value_type = null;
         if (object.has(Members.VALUE_TYPE.name())) {
             String className = object.getString(Members.VALUE_TYPE.name());
--- src/com/oltpbenchmark/catalog/Catalog.java
+++ src/com/oltpbenchmark/catalog/Catalog.java
@@ -18,4 +18,11 @@
 package com.oltpbenchmark.catalog;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.types.DatabaseType;
+import com.oltpbenchmark.types.SortDirectionType;
+import com.oltpbenchmark.util.Pair;
+import com.oltpbenchmark.util.SQLUtil;
+import com.oltpbenchmark.util.StringUtil;
 import java.io.IOException;
 import java.net.URL;
@@ -34,15 +41,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
-import org.apache.log4j.Logger;
 import org.apache.commons.io.IOUtils;
+import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.types.DatabaseType;
-import com.oltpbenchmark.types.SortDirectionType;
-import com.oltpbenchmark.util.Pair;
-import com.oltpbenchmark.util.SQLUtil;
-import com.oltpbenchmark.util.StringUtil;
-
 /**
  * 
@@ -193,5 +192,5 @@
                 assert(catalog_tbl.getColumnByName(col_name) != null) :
                     String.format("Unexpected primary key column %s.%s", table_name, col_name);
-                int col_idx = pkey_rs.getShort(5);
+                @Var int col_idx = pkey_rs.getShort(5);
                 // HACK: SQLite doesn't return the KEY_SEQ, so if we get back
                 //       a zero for this value, then we'll just length of the pkey_cols map
@@ -223,5 +222,5 @@
                     idx_direction = null;
 
-                Index catalog_idx = catalog_tbl.getIndex(idx_name);
+                @Var Index catalog_idx = catalog_tbl.getIndex(idx_name);
                 if (catalog_idx == null) {
                     catalog_idx = new Index(catalog_tbl, idx_name, idx_type, idx_unique);
--- src/com/oltpbenchmark/util/json/JSONObject.java
+++ src/com/oltpbenchmark/util/json/JSONObject.java
@@ -41,4 +41,5 @@
 */
 
+import com.google.errorprone.annotations.Var;
 import java.io.IOException;
 import java.io.Writer;
@@ -49,6 +50,6 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.TreeSet;
 import java.util.Map.Entry;
+import java.util.TreeSet;
 
 /**
@@ -190,6 +191,6 @@
     public JSONObject(JSONTokener x) throws JSONException {
         this();
-        char c;
-        String key;
+        @Var char c;
+        @Var String key;
 
         if (x.nextClean() != '{') {
@@ -312,5 +313,5 @@
     }
 
-    private void populateInternalMap(Object bean, boolean includeSuperClass){
+    private void populateInternalMap(Object bean, @Var boolean includeSuperClass){
         Class<?> klass = bean.getClass();
 
@@ -327,5 +328,5 @@
                 Method method = methods[i];
                 String name = method.getName();
-                String key = "";
+                @Var String key = "";
                 if (name.startsWith("get")) {
                     key = name.substring(3);
@@ -490,5 +491,5 @@
 // Shave off trailing zeros and decimal point, if possible.
 
-        String s = Double.toString(d);
+        @Var String s = Double.toString(d);
         if (s.indexOf('.') > 0 && s.indexOf('e') < 0 && s.indexOf('E') < 0) {
             while (s.endsWith("0")) {
@@ -644,5 +645,5 @@
         Iterator<String> i = jo.keys();
         String[] names = new String[length];
-        int j = 0;
+        @Var int j = 0;
         while (i.hasNext()) {
             names[j] = (String)i.next();
@@ -1119,10 +1120,10 @@
         }
 
-        char         b;
-        char         c = 0;
-        int          i;
+        @Var char         b;
+        @Var char         c = 0;
+        @Var int          i;
         int          len = string.length();
         StringBuffer sb = new StringBuffer(len + 4);
-        String       t;
+        @Var String       t;
 
         sb.append('"');
@@ -1362,5 +1363,5 @@
      */
     String toString(int indentFactor, int indent) throws JSONException {
-        int j;
+        @Var int j;
         int n = length();
         if (n == 0) {
@@ -1370,5 +1371,5 @@
         StringBuffer sb = new StringBuffer("{");
         int          newindent = indent + indentFactor;
-        Object       o;
+        @Var Object       o;
         if (n == 1) {
             o = keys.next();
@@ -1527,5 +1528,5 @@
      public Writer write(Writer writer) throws JSONException {
         try {
-            boolean  b = false;
+            @Var boolean  b = false;
             Iterator<String> keys = keys();
             writer.write('{');
--- src/com/oltpbenchmark/util/json/JSONTokener.java
+++ src/com/oltpbenchmark/util/json/JSONTokener.java
@@ -17,4 +17,5 @@
 package com.oltpbenchmark.util.json;
 
+import com.google.errorprone.annotations.Var;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -196,5 +197,5 @@
 
          char[] buffer = new char[n];
-         int pos = 0;
+         @Var int pos = 0;
 
          if (this.useLastChar) {
@@ -205,5 +206,5 @@
 
          try {
-             int len;
+             @Var int len;
              while ((pos < n) && ((len = reader.read(buffer, pos, n - pos)) != -1)) {
                  pos += len;
@@ -250,5 +251,5 @@
      */
     public String nextString(char quote) throws JSONException {
-        char c;
+        @Var char c;
         StringBuffer sb = new StringBuffer();
         for (;;) {
@@ -325,5 +326,5 @@
      */
     public String nextTo(String delimiters) throws JSONException {
-        char c;
+        @Var char c;
         StringBuffer sb = new StringBuffer();
         for (;;) {
@@ -349,5 +350,5 @@
      */
     public Object nextValue() throws JSONException {
-        char c = nextClean();
+        @Var char c = nextClean();
         String s;
 
@@ -397,5 +398,5 @@
      */
     public char skipTo(char to) throws JSONException {
-        char c;
+        @Var char c;
         try {
             int startIndex = this.index;
--- src/com/oltpbenchmark/util/json/JSONArray.java
+++ src/com/oltpbenchmark/util/json/JSONArray.java
@@ -41,4 +41,5 @@
 */
 
+import com.google.errorprone.annotations.Var;
 import java.io.IOException;
 import java.io.Writer;
@@ -122,5 +123,5 @@
     public JSONArray(JSONTokener x) throws JSONException {
         this();
-        char c = x.nextClean();
+        @Var char c = x.nextClean();
         char q;
         if (c == '[') {
@@ -884,5 +885,5 @@
             return "[]";
         }
-        int i;
+        @Var int i;
         StringBuffer sb = new StringBuffer("[");
         if (len == 1) {
@@ -893,5 +894,5 @@
             //sb.append('\n');
             
-            boolean intType = false;
+            @Var boolean intType = false;
             for (i = 0; i < len; i += 1) {
                 if (this.myArrayList.get(i).getClass() != Integer.class) {
@@ -937,5 +938,5 @@
     public Writer write(Writer writer) throws JSONException {
         try {
-            boolean b = false;
+            @Var boolean b = false;
             int     len = length();
 
--- src/com/oltpbenchmark/Phase.java
+++ src/com/oltpbenchmark/Phase.java
@@ -17,4 +17,6 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.util.StringUtil;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -22,6 +24,4 @@
 import java.util.Random;
 
-import com.oltpbenchmark.util.StringUtil;
-
 public class Phase {
     public enum Arrival {
@@ -114,5 +114,5 @@
      */
     public double totalWeight() {
-        double total = 0.0;
+        @Var double total = 0.0;
         for (Double d : weights)
             total += d;
@@ -134,5 +134,5 @@
 
         if (isSerial()) {
-            int ret;
+            @Var int ret;
             synchronized(this) {
                 ret = this.nextSerial;
@@ -162,5 +162,5 @@
         else {
             int randomPercentage = gen.nextInt((int)totalWeight()) + 1;
-        double weight = 0.0;
+        @Var double weight = 0.0;
         for (int i = 0; i < this.num_weights; i++) {
             weight += weights.get(i).doubleValue();
--- src/com/oltpbenchmark/TraceReader.java
+++ src/com/oltpbenchmark/TraceReader.java
@@ -17,11 +17,11 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
 import java.io.BufferedReader;
 import java.io.FileReader;
 import java.util.Iterator;
-import java.util.ListIterator;
-import java.util.List;
 import java.util.LinkedList;
-
+import java.util.List;
+import java.util.ListIterator;
 import org.apache.log4j.Logger;
 
@@ -66,5 +66,5 @@
         try {
             BufferedReader br = new BufferedReader(new FileReader(filename));
-            String line = br.readLine();
+            @Var String line = br.readLine();
 
             if (line == null) {
@@ -77,6 +77,6 @@
             // the ordering changes or extra columns are added.
             String[] splitHeader = line.split(",");
-            int txnIdCol = -1, phaseIdCol = -1, startTimeCol = -1;
-            int index = 0;
+            @Var int txnIdCol = -1, phaseIdCol = -1, startTimeCol = -1;
+            @Var int index = 0;
             for (String field : splitHeader) {
                 if(field.matches(".*transaction.*"))
@@ -101,6 +101,6 @@
             // line-by-line to create a list of procedures to run.
             try {
-                int currPhaseId = -1;
-                long phaseBaseTime = 0;
+                @Var int currPhaseId = -1;
+                @Var long phaseBaseTime = 0;
                 while ((line = br.readLine()) != null) {
                     String[] splitLine = line.split(",");
@@ -152,5 +152,5 @@
 
         ListIterator<TraceElement> iter = tracedProcedures.listIterator();
-        TraceElement curr = tracedProcedures.peek();
+        @Var TraceElement curr = tracedProcedures.peek();
 
         // Shouldn't have a procedure from a previous phase, or else we
--- src/com/oltpbenchmark/api/SQLStmt.java
+++ src/com/oltpbenchmark/api/SQLStmt.java
@@ -18,7 +18,7 @@
 package com.oltpbenchmark.api;
 
+import com.google.errorprone.annotations.Var;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
 import org.apache.log4j.Logger;
 
@@ -58,5 +58,5 @@
      * @param substitutions
      */
-    public final void setSQL(String sql) {
+    public final void setSQL(@Var String sql) {
         this.orig_sql = sql;
         for (int ctr : this.substitutions) {
--- src/com/oltpbenchmark/api/StatementDialects.java
+++ src/com/oltpbenchmark/api/StatementDialects.java
@@ -17,4 +17,11 @@
 package com.oltpbenchmark.api;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.dialects.DialectType;
+import com.oltpbenchmark.api.dialects.DialectsType;
+import com.oltpbenchmark.api.dialects.ObjectFactory;
+import com.oltpbenchmark.api.dialects.ProcedureType;
+import com.oltpbenchmark.api.dialects.StatementType;
+import com.oltpbenchmark.types.DatabaseType;
 import java.io.File;
 import java.io.StringWriter;
@@ -28,5 +35,4 @@
 import java.util.Map;
 import java.util.Map.Entry;
-
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBElement;
@@ -36,15 +42,7 @@
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
-
 import org.apache.log4j.Logger;
 import org.xml.sax.SAXException;
 
-import com.oltpbenchmark.api.dialects.DialectType;
-import com.oltpbenchmark.api.dialects.DialectsType;
-import com.oltpbenchmark.api.dialects.ObjectFactory;
-import com.oltpbenchmark.api.dialects.ProcedureType;
-import com.oltpbenchmark.api.dialects.StatementType;
-import com.oltpbenchmark.types.DatabaseType;
-
 /**
  * 
@@ -103,5 +101,5 @@
         
         // COPIED FROM VoltDB's VoltCompiler.java
-        DialectsType dialects = null;
+        @Var DialectsType dialects = null;
         try {
             JAXBContext jc = JAXBContext.newInstance(this.xmlContext);
@@ -143,5 +141,5 @@
 
                 // Loop through all of the Statements listed for this Procedure
-                Map<String, String> procDialects = this.dialectsMap.get(procName);
+                @Var Map<String, String> procDialects = this.dialectsMap.get(procName);
                 for (StatementType statement : procedure.getStatement()) {
                     String stmtName = statement.getName();
@@ -179,6 +177,6 @@
     public String export(DatabaseType dbType, Collection<Procedure> procedures) {
         assert(procedures.isEmpty() == false) : "No procedures passed";
-        Marshaller marshaller = null;
-        JAXBContext jc = null;
+        @Var Marshaller marshaller = null;
+        @Var JAXBContext jc = null;
                 
         try {
--- src/com/oltpbenchmark/benchmarks/wikipedia/procedures/GetPageAuthenticated.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/procedures/GetPageAuthenticated.java
@@ -18,4 +18,9 @@
 package com.oltpbenchmark.benchmarks.wikipedia.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.wikipedia.WikipediaConstants;
+import com.oltpbenchmark.benchmarks.wikipedia.util.Article;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,9 +28,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.wikipedia.WikipediaConstants;
-import com.oltpbenchmark.benchmarks.wikipedia.util.Article;
-
 public class GetPageAuthenticated extends Procedure {
 	
@@ -79,9 +79,9 @@
 
         // FIXME TOO FREQUENTLY SELECTING BY USER_ID
-        String userText = userIp;
-        PreparedStatement st = this.getPreparedStatement(conn, selectUser);
+        @Var String userText = userIp;
+        @Var PreparedStatement st = this.getPreparedStatement(conn, selectUser);
         if (userId > 0) {
             st.setInt(1, userId);
-            ResultSet rs = st.executeQuery();
+            @Var ResultSet rs = st.executeQuery();
             if (rs.next()) {
                 userText = rs.getString("user_name");
@@ -106,5 +106,5 @@
         st.setInt(1, nameSpace);
         st.setString(2, pageTitle);
-        ResultSet rs = st.executeQuery();
+        @Var ResultSet rs = st.executeQuery();
 
         if (!rs.next()) {
@@ -162,5 +162,5 @@
             throw new UserAbortException("no such text: " + textId + " for page_id:" + pageId + " page_namespace: " + nameSpace + " page_title:" + pageTitle);
         }
-        Article a = null;
+        @Var Article a = null;
         if (!forSelect)
             a = new Article(userText, pageId, rs.getString("old_text"), textId, revisionId);
--- src/com/oltpbenchmark/distributions/ScrambledZipfianGenerator.java
+++ src/com/oltpbenchmark/distributions/ScrambledZipfianGenerator.java
@@ -16,4 +16,6 @@
 
 package com.oltpbenchmark.distributions;
+import com.google.errorprone.annotations.Var;
+
 /**                                                                                                                                                                                
  * Copyright (c) 2010 Yahoo! Inc. All rights reserved.                                                                                                                             
@@ -121,5 +123,5 @@
 	public long nextLong()
 	{
-		long ret=gen.nextLong();
+		@Var long ret=gen.nextLong();
 		ret=_min+Utils.FNVhash64(ret)%_itemcount;
 		setLastInt((int)ret);
--- src/com/oltpbenchmark/distributions/ZipfianGenerator.java
+++ src/com/oltpbenchmark/distributions/ZipfianGenerator.java
@@ -33,4 +33,5 @@
  */
 
+import com.google.errorprone.annotations.Var;
 import java.util.Random;
 
@@ -219,5 +220,5 @@
 	static double zetastatic(long st, long n, double theta, double initialsum)
 	{
-		double sum=initialsum;
+		@Var double sum=initialsum;
 		for (long i=st; i<n; i++)
 		{
--- src/com/oltpbenchmark/benchmarks/jpab/JPABBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/jpab/JPABBenchmark.java
@@ -17,4 +17,11 @@
 package com.oltpbenchmark.benchmarks.jpab;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.jpab.procedures.Persist;
+import com.oltpbenchmark.benchmarks.jpab.tests.Test;
 import java.io.IOException;
 import java.sql.Connection;
@@ -22,15 +29,7 @@
 import java.util.ArrayList;
 import java.util.List;
-
 import javax.persistence.EntityManagerFactory;
 import javax.persistence.Persistence;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.jpab.procedures.Persist;
-import com.oltpbenchmark.benchmarks.jpab.tests.Test;
-
 public class JPABBenchmark extends BenchmarkModule {
 
@@ -48,5 +47,5 @@
         List<Worker<? extends BenchmarkModule>> workers = new ArrayList<Worker<? extends BenchmarkModule>>();
         emf = Persistence.createEntityManagerFactory(jpabConf.getPersistanceUnit());
-        Test test = null;
+        @Var Test test = null;
         try {
             test = (Test)Class.forName("com.oltpbenchmark.benchmarks.jpab.tests."+this.jpabConf.getTestName()).newInstance();
--- src/com/oltpbenchmark/benchmarks/tatp/TATPUtil.java
+++ src/com/oltpbenchmark/benchmarks/tatp/TATPUtil.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.benchmarks.tatp;
 
+import com.google.errorprone.annotations.Var;
 import java.util.Random;
 
@@ -82,5 +83,5 @@
         assert min_len <= max_len && min_len >= 0;
         int sub_len = number(min_len, max_len).intValue();
-        int arr_len = arr.length;
+        @Var int arr_len = arr.length;
 
         assert sub_len <= arr_len;
--- src/com/oltpbenchmark/benchmarks/jpab/tests/Test.java
+++ src/com/oltpbenchmark/benchmarks/jpab/tests/Test.java
@@ -41,16 +41,15 @@
 package com.oltpbenchmark.benchmarks.jpab.tests;
 
-import java.util.*;
-import java.util.concurrent.atomic.*;
-
-import javax.persistence.EntityManager;
-import javax.persistence.OptimisticLockException;
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.LoaderUtil;
+import com.oltpbenchmark.benchmarks.jpab.objects.TestEntity;
+import java.util.*;
+import java.util.concurrent.atomic.*;
+import javax.persistence.EntityManager;
+import javax.persistence.OptimisticLockException;
 import javax.persistence.Query;
 
-import com.oltpbenchmark.api.LoaderUtil;
-import com.oltpbenchmark.benchmarks.jpab.objects.TestEntity;
 
 
-
 /**
  * Super abstract class of the concrete benchmark test classes.
@@ -198,5 +197,5 @@
 	 * @param entityCount size of the inventory (in objects) 
 	 */
-	public void buildInventory(int entityCount) {
+	public void buildInventory(@Var int entityCount) {
 		entityCount /= getGraphSize();
 		entityInventory.ensureCapacity(entityCount);
@@ -333,5 +332,5 @@
     public void query(EntityManager em) {
     	// Prepare a target last name prefix:
-    	int prefixLength = 1; // depends on batch size
+    	@Var int prefixLength = 1; // depends on batch size
     	for (int count = entityCount; (count /= 26) > batchSize; ) {
     		prefixLength++;
@@ -425,5 +424,5 @@
 			return true;
 		}
-		String msg = e.getMessage();
+		@Var String msg = e.getMessage();
 		if (msg != null) {
 			msg = msg.toLowerCase();
--- src/com/oltpbenchmark/benchmarks/tpch/procedures/Q15.java
+++ src/com/oltpbenchmark/benchmarks/tpch/procedures/Q15.java
@@ -17,7 +17,7 @@
 package com.oltpbenchmark.benchmarks.tpch.procedures;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.SQLStmt;
 import com.oltpbenchmark.util.RandomGenerator;
-
 import java.sql.*;
 
@@ -69,6 +69,6 @@
         // query, then drop it once we're done.
         Statement stmt = conn.createStatement();
-        String sql;
-        ResultSet ret = null;
+        @Var String sql;
+        @Var ResultSet ret = null;
         try {
             // DATE is the first day of a randomly selected month between
--- src/com/oltpbenchmark/benchmarks/tpch/procedures/GenericQuery.java
+++ src/com/oltpbenchmark/benchmarks/tpch/procedures/GenericQuery.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.tpch.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.util.RandomGenerator;
 import java.io.BufferedReader;
 import java.io.FileReader;
@@ -24,12 +29,6 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import com.oltpbenchmark.util.RandomGenerator;
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Worker;
-
 public abstract class GenericQuery extends Procedure {
 
@@ -54,5 +53,5 @@
 
         LOG.debug(this.getClass());
-        ResultSet rs = null;
+        @Var ResultSet rs = null;
         try {
             rs = stmt.executeQuery();
--- src/com/oltpbenchmark/util/RandomGenerator.java
+++ src/com/oltpbenchmark/util/RandomGenerator.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.util.*;
 
@@ -49,5 +50,5 @@
         assert minimum <= maximum : String.format("%d <= %d", minimum, maximum);
         int range_size = maximum - minimum + 1;
-        int value = this.nextInt(range_size);
+        @Var int value = this.nextInt(range_size);
         value += minimum;
         assert minimum <= value && value <= maximum;
@@ -66,5 +67,5 @@
         
         // error checking and 2^x checking removed for simplicity.
-        long bits, val;
+        @Var long bits, val;
         do {
             bits = (this.nextLong() << 1) >>> 1;
@@ -89,5 +90,5 @@
 
         // Generate 1 less number than the range
-        int num = number(minimum, maximum-1);
+        @Var int num = number(minimum, maximum-1);
 
         // Adjust the numbers to remove excluding
@@ -119,5 +120,5 @@
         int mean = range_size / 2;
         double stddev = range_size - ((range_size / 1.1) * skewFactor);
-        int value = -1;
+        @Var int value = -1;
         while (value < 0 || value >= range_size) {
             value = (int) Math.round(this.nextGaussian() * stddev) + mean;
@@ -139,5 +140,5 @@
         assert minimum < maximum : String.format("%f < %f", minimum, maximum);
 
-        int multiplier = 1;
+        @Var int multiplier = 1;
         for (int i = 0; i < decimal_places; ++i) {
             multiplier *= 10;
--- src/com/oltpbenchmark/benchmarks/chbenchmark/queries/GenericQuery.java
+++ src/com/oltpbenchmark/benchmarks/chbenchmark/queries/GenericQuery.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.chbenchmark.queries;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.DBWorkload;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.api.Worker;
 import java.io.BufferedReader;
 import java.io.FileReader;
@@ -24,12 +29,6 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.DBWorkload;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Worker;
-
 public abstract class GenericQuery extends Procedure {
     
@@ -50,5 +49,5 @@
 			FileReader input = new FileReader("src/com/oltpbenchmark/benchmarks/chbenchmark/queries/" + queryFile);
 			BufferedReader reader = new BufferedReader(input);
-			String line = reader.readLine();
+			@Var String line = reader.readLine();
 			while (line != null) {
 				query.append(line);
@@ -73,5 +72,5 @@
 
     	LOG.debug(this.getClass());
-        ResultSet rs = null;
+        @Var ResultSet rs = null;
         try {
             rs = stmt.executeQuery();
--- src/com/oltpbenchmark/benchmarks/linkbench/distributions/Harmonic.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/distributions/Harmonic.java
@@ -22,4 +22,5 @@
  *  @author tarmstrong
  */
+import com.google.errorprone.annotations.Var;
 import org.apache.commons.math3.util.FastMath;
 
@@ -34,6 +35,6 @@
    * @return the n<sup>th</sup> generalized harmonic number.
    */
-  public static double generalizedHarmonic(final long n, final double m) {
-      double value = 0;
+  public static double generalizedHarmonic(long n, double m) {
+      @Var double value = 0;
       for (long k = n; k > 0; --k) {
           value += 1.0 / FastMath.pow(k, m);
--- src/com/oltpbenchmark/util/CollectionUtil.java
+++ src/com/oltpbenchmark/util/CollectionUtil.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.util.AbstractList;
 import java.util.ArrayList;
@@ -31,5 +32,4 @@
 import java.util.Set;
 import java.util.SortedMap;
-
 import org.apache.commons.collections15.set.ListOrderedSet;
 import org.apache.commons.lang.NotImplementedException;
@@ -74,5 +74,5 @@
     public static int[] toIntArray(Collection<Integer> items) {
         int ret[] = new int[items.size()];
-        int idx = 0;
+        @Var int idx = 0;
         for (Integer i : items) {
             assert(i != null);
@@ -275,6 +275,6 @@
      */
     public static <T, U extends Comparable<U>> T getGreatest(Map<T, U> map) {
-        T max_key = null;
-        U max_value = null;
+        @Var T max_key = null;
+        @Var U max_value = null;
         for (Entry<T, U> e:map.entrySet()) {
             T key = e.getKey();
@@ -331,5 +331,5 @@
             return ((ListOrderedSet<T>)items).get(idx);
         }
-        int ctr = 0;
+        @Var int ctr = 0;
         for (T t : items) {
             if (ctr++ == idx) return (t);
@@ -345,5 +345,5 @@
      */
     public static <T> T last(Iterable<T> items) {
-        T last = null;
+        @Var T last = null;
         if (items instanceof AbstractList<?>) {
             AbstractList<T> list = (AbstractList<T>)items;
@@ -391,5 +391,5 @@
      * @return
      */
-    public static <T> Iterable<T> iterable(final Iterator<T> it) {
+    public static <T> Iterable<T> iterable(Iterator<T> it) {
         return (new Iterable<T>() {
             @Override
@@ -400,5 +400,5 @@
     }
     
-    public static <T> Iterable<T> iterable(final T values[]) {
+    public static <T> Iterable<T> iterable(T values[]) {
         return (new Iterable<T>() {
             @Override
@@ -431,5 +431,5 @@
      * @return
      */
-    public static <T> Iterable<T> iterable(final Enumeration<T> e) {
+    public static <T> Iterable<T> iterable(Enumeration<T> e) {
         return (new Iterable<T>() {
             @Override
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord1.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord1.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord1 extends Procedure{
     
@@ -35,5 +35,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/seats/procedures/UpdateReservation.java
+++ src/com/oltpbenchmark/benchmarks/seats/procedures/UpdateReservation.java
@@ -40,16 +40,15 @@
 package com.oltpbenchmark.benchmarks.seats.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
+import com.oltpbenchmark.benchmarks.seats.util.ErrorType;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Procedure;
 
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-import com.oltpbenchmark.benchmarks.seats.util.ErrorType;
-
 public class UpdateReservation extends Procedure {
     private static final Logger LOG = Logger.getLogger(UpdateReservation.class);
@@ -83,11 +82,11 @@
     
     public void run(Connection conn, long r_id, long f_id, long c_id, long seatnum, long attr_idx, long attr_val) throws SQLException {
-        final boolean debug = LOG.isDebugEnabled();
+        boolean debug = LOG.isDebugEnabled();
         assert(attr_idx >= 0);
         assert(attr_idx < ReserveSeats.length);
-        boolean found;
+        @Var boolean found;
         
-        PreparedStatement stmt = null;
-        ResultSet results = null;
+        @Var PreparedStatement stmt = null;
+        @Var ResultSet results = null;
         
         // Check if Seat is Available
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewBid.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewBid.java
@@ -18,12 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Timestamp;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure;
 import com.oltpbenchmark.api.SQLStmt;
@@ -33,4 +26,10 @@
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
 import com.oltpbenchmark.benchmarks.auctionmark.util.UserId;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+import org.apache.log4j.Logger;
 
 /**
@@ -138,11 +137,11 @@
     public Object[] run(Connection conn, Timestamp benchmarkTimes[],
                         long item_id, long seller_id, long buyer_id, double newBid, Timestamp estimatedEndDate) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
-        final boolean debug = LOG.isDebugEnabled();
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        boolean debug = LOG.isDebugEnabled();
         if (debug) LOG.debug(String.format("Attempting to place new bid on Item %d [buyer=%d, bid=%.2f]",
                                            item_id, buyer_id, newBid));
 
-        PreparedStatement stmt = null;
-        ResultSet results = null;
+        @Var PreparedStatement stmt = null;
+        @Var ResultSet results = null;
         
         // Check to make sure that we can even add a new bid to this item
@@ -154,13 +153,13 @@
             throw new UserAbortException("Invalid item " + item_id);
         }
-        int col = 1;
+        @Var int col = 1;
         double i_initial_price = results.getDouble(col++);
-        double i_current_price = results.getDouble(col++);
+        @Var double i_current_price = results.getDouble(col++);
         long i_num_bids = results.getLong(col++);
         Timestamp i_end_date = results.getTimestamp(col++);
         ItemStatus i_status = ItemStatus.get(results.getLong(col++));
         results.close();
-        long newBidId = 0;
-        long newBidMaxBuyerId = buyer_id;
+        @Var long newBidId = 0;
+        @Var long newBidMaxBuyerId = buyer_id;
         
 //        if (i_end_date.compareTo(currentTime) < 0 || i_status != ItemStatus.OPEN) {
@@ -178,5 +177,5 @@
             stmt = this.getPreparedStatement(conn, getMaxBidId, item_id, seller_id);
             results = stmt.executeQuery();
-            boolean advanceRow = results.next();
+            @Var boolean advanceRow = results.next();
             assert (advanceRow);
             newBidId = results.getLong(1) + 1;
@@ -195,5 +194,5 @@
             results.close();
             
-            boolean updateMaxBid = false;
+            @Var boolean updateMaxBid = false;
             assert((int)currentBidAmount == (int)i_current_price) :
                 String.format("%.2f == %.2f", currentBidAmount, i_current_price);
--- src/com/oltpbenchmark/util/ClassUtil.java
+++ src/com/oltpbenchmark/util/ClassUtil.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
@@ -31,5 +32,4 @@
 import java.util.Map;
 import java.util.Set;
-
 import org.apache.commons.collections15.CollectionUtils;
 import org.apache.commons.lang.ClassUtils;
@@ -55,9 +55,9 @@
      * @return     True of the object is an array.
      */
-    public static boolean isArray(final Object obj) {
+    public static boolean isArray(Object obj) {
         return (obj != null ? obj.getClass().isArray() : false);
     }
     
-    public static boolean[] isArray(final Object objs[]) {
+    public static boolean[] isArray(Object objs[]) {
         boolean is_array[] = new boolean[objs.length];
         for (int i = 0; i < objs.length; i++) {
@@ -121,6 +121,6 @@
      * @return
      */
-    public static List<Class<?>> getSuperClasses(Class<?> element_class) {
-        List<Class<?>> ret = ClassUtil.CACHE_getSuperClasses.get(element_class);
+    public static List<Class<?>> getSuperClasses(@Var Class<?> element_class) {
+        @Var List<Class<?>> ret = ClassUtil.CACHE_getSuperClasses.get(element_class);
         if (ret == null) {
             ret = new ArrayList<Class<?>>();
@@ -142,5 +142,5 @@
     @SuppressWarnings("unchecked")
     public static Collection<Class<?>> getInterfaces(Class<?> element_class) {
-        Set<Class<?>> ret = ClassUtil.CACHE_getInterfaceClasses.get(element_class);
+        @Var Set<Class<?>> ret = ClassUtil.CACHE_getInterfaceClasses.get(element_class);
         if (ret == null) {
 //            ret = new HashSet<Class<?>>();
@@ -176,5 +176,5 @@
         
         Constructor<T> constructor = ClassUtil.getConstructor(target_class, classes);
-        T ret = null;
+        @Var T ret = null;
         try {
             ret = constructor.newInstance(params);
@@ -194,5 +194,5 @@
     @SuppressWarnings("unchecked")
     public static <T> Constructor<T> getConstructor(Class<T> target_class, Class<?>...params) {
-        NoSuchMethodException error = null;
+        @Var NoSuchMethodException error = null;
         try {
             return (target_class.getConstructor(params));
@@ -268,5 +268,5 @@
      */
     public static Class<?> getClass(String class_name) {
-        Class<?> target_class = null;
+        @Var Class<?> target_class = null;
         try {
             ClassLoader loader = ClassLoader.getSystemClassLoader();
@@ -284,5 +284,5 @@
      */
     public static boolean isAssertsEnabled() {
-        boolean ret = false;
+        @Var boolean ret = false;
         try {
             assert(false);
--- src/com/oltpbenchmark/benchmarks/seats/SEATSBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/seats/SEATSBenchmark.java
@@ -17,4 +17,12 @@
 package com.oltpbenchmark.benchmarks.seats;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.seats.procedures.LoadConfig;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.RandomGenerator;
 import java.io.File;
 import java.io.IOException;
@@ -26,12 +34,4 @@
 import java.util.List;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.seats.procedures.LoadConfig;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.RandomGenerator;
-
 public class SEATSBenchmark extends BenchmarkModule {
 
@@ -87,5 +87,5 @@
      */
     public static final File getTableDataFile(File data_dir, Table catalog_tbl) {
-        File f = new File(String.format("%s%stable.%s.csv", data_dir.getAbsolutePath(), File.separator, catalog_tbl.getName().toLowerCase()));
+        @Var File f = new File(String.format("%s%stable.%s.csv", data_dir.getAbsolutePath(), File.separator, catalog_tbl.getName().toLowerCase()));
         if (f.exists() == false) {
             f = new File(f.getAbsolutePath() + ".gz");
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord7.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord7.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord7 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -41,5 +41,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/voter/procedures/Vote.java
+++ src/com/oltpbenchmark/benchmarks/voter/procedures/Vote.java
@@ -46,4 +46,7 @@
 package com.oltpbenchmark.benchmarks.voter.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -51,7 +54,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class Vote extends Procedure {
 	
@@ -84,7 +84,7 @@
     public long run(Connection conn, long voteId, long phoneNumber, int contestantNumber, long maxVotesPerPhoneNumber) throws SQLException {
 		
-        PreparedStatement ps = getPreparedStatement(conn, checkContestantStmt);
+        @Var PreparedStatement ps = getPreparedStatement(conn, checkContestantStmt);
         ps.setInt(1, contestantNumber);
-        ResultSet rs = ps.executeQuery();
+        @Var ResultSet rs = ps.executeQuery();
         try {
             if (!rs.next()) {
@@ -115,5 +115,5 @@
         // but are tracked as legitimate instead of invalid, as old clients would mostly get
         // it wrong and see all their transactions rejected).
-        final String state = rs.next() ? rs.getString(1) : "XX";
+        String state = rs.next() ? rs.getString(1) : "XX";
         rs.close();
 
--- src/com/oltpbenchmark/distributions/Utils.java
+++ src/com/oltpbenchmark/distributions/Utils.java
@@ -33,4 +33,5 @@
  */
 
+import com.google.errorprone.annotations.Var;
 import java.util.Random;
 
@@ -44,5 +45,5 @@
 
   public static Random random() {
-    Random ret = rng.get();
+    @Var Random ret = rng.get();
     if(ret == null) {
       ret = new Random(rand.nextLong());
@@ -87,8 +88,8 @@
        * @return The hash value
        */
-      public static int FNVhash32(int val)
+      public static int FNVhash32(@Var int val)
       {
 	 //from http://en.wikipedia.org/wiki/Fowler_Noll_Vo_hash
-	 int hashval = FNV_offset_basis_32;
+	 @Var int hashval = FNV_offset_basis_32;
 	 
 	 for (int i=0; i<4; i++)
@@ -113,8 +114,8 @@
        * @return The hash value
        */
-      public static long FNVhash64(long val)
+      public static long FNVhash64(@Var long val)
       {
 	 //from http://en.wikipedia.org/wiki/Fowler_Noll_Vo_hash
-	 long hashval = FNV_offset_basis_64;
+	 @Var long hashval = FNV_offset_basis_64;
 	 
 	 for (int i=0; i<8; i++)
--- src/com/oltpbenchmark/benchmarks/twitter/procedures/GetFollowers.java
+++ src/com/oltpbenchmark/benchmarks/twitter/procedures/GetFollowers.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.twitter.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.twitter.TwitterConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,8 +26,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.twitter.TwitterConstants;
-
 public class GetFollowers extends Procedure {
 	
@@ -40,11 +40,11 @@
     
     public void run(Connection conn, long uid) throws SQLException {
-        PreparedStatement stmt = this.getPreparedStatement(conn, getFollowers);
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, getFollowers);
         stmt.setLong(1, uid);
-        ResultSet rs = stmt.executeQuery();
+        @Var ResultSet rs = stmt.executeQuery();
         
         stmt = this.getPreparedStatement(conn, getFollowerNames);
-        int ctr = 0;
-        long last = -1;
+        @Var int ctr = 0;
+        @Var long last = -1;
         while (rs.next() && ctr++ < TwitterConstants.LIMIT_FOLLOWERS) {
             last = rs.getLong(1);
--- src/com/oltpbenchmark/util/RandomDistribution.java
+++ src/com/oltpbenchmark/util/RandomDistribution.java
@@ -33,4 +33,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.util.*;
 
@@ -136,5 +137,5 @@
         
         public double calculateMean(int num_samples) {
-            long total = 0l;
+            @Var long total = 0l;
             for (int i = 0; i < num_samples; i++) {
                 total += this.nextLong();
@@ -173,5 +174,5 @@
         public static long nextLong(Random rng, long n) {
             // error checking and 2^x checking removed for simplicity.
-            long bits, val;
+            @Var long bits, val;
             do {
                bits = (rng.nextLong() << 1) >>> 1;
@@ -210,5 +211,5 @@
         protected long nextLongImpl() {
             // error checking and 2^x checking removed for simplicity.
-            long bits, val;
+            @Var long bits, val;
             do {
                 bits = (random.nextLong() << 1) >>> 1;
@@ -241,5 +242,5 @@
             this.inner = new Flat(random, 0, (int)histogram.getSampleCount());
             
-            long total = 0;
+            @Var long total = 0;
             for (T k : this.histogram.values()) {
                 long v = this.histogram.get(k);
@@ -301,5 +302,5 @@
         @Override
         protected long nextLongImpl() {
-            int value = -1;
+            @Var int value = -1;
             while (value < 0 || value >= this.range_size) {
                 double gaussian = (this.random.nextGaussian() + 2.0) / 4.0;
@@ -361,6 +362,6 @@
             v = new ArrayList<Double>();
 
-            double sum = 0;
-            long last = -1;
+            @Var double sum = 0;
+            @Var long last = -1;
             for (long i = min; i < max; ++i) {
                 sum += Math.exp(-sigma * Math.log(i - min + 1));
@@ -391,5 +392,5 @@
         protected long nextLongImpl() {
             double d = random.nextDouble();
-            int idx = Collections.binarySearch(v, d);
+            @Var int idx = Collections.binarySearch(v, d);
 
             if (idx > 0) {
@@ -428,5 +429,5 @@
     
         private static double select(long n, long k) {
-          double ret = 1.0;
+          @Var double ret = 1.0;
           for (long i = k + 1; i <= n; ++i) {
             ret *= (double) i / (i - k);
@@ -458,5 +459,5 @@
             if (n > 0) {
                 v = new double[(int)n + 1];
-                double sum = 0.0;
+                @Var double sum = 0.0;
                 for (int i = 0; i <= n; ++i) {
                     sum += select(n, i) * power(p, i) * power(1 - p, n - i);
@@ -481,5 +482,5 @@
             }
             double d = random.nextDouble();
-            int idx = Arrays.binarySearch(v, d);
+            @Var int idx = Arrays.binarySearch(v, d);
             if (idx > 0) {
                 ++idx;
--- src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaLoader.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaLoader.java
@@ -17,17 +17,5 @@
 package com.oltpbenchmark.benchmarks.wikipedia;
 
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Random;
-import java.util.Set;
-import java.util.concurrent.CountDownLatch;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Loader;
 import com.oltpbenchmark.benchmarks.wikipedia.data.PageHistograms;
@@ -43,4 +31,15 @@
 import com.oltpbenchmark.util.TextGenerator;
 import com.oltpbenchmark.util.TimeUtil;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+import java.util.concurrent.CountDownLatch;
+import org.apache.log4j.Logger;
 
 /**
@@ -99,17 +98,17 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        final int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
-        final int numItems = this.num_pages + this.num_users;
-        final int itemsPerThread = Math.max(numItems / numLoaders, 1);
-        final int numUserThreads = (int) Math.ceil((double) this.num_users / itemsPerThread);
-        final int numPageThreads = (int) Math.ceil((double) this.num_pages / itemsPerThread);
+        int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
+        int numItems = this.num_pages + this.num_users;
+        int itemsPerThread = Math.max(numItems / numLoaders, 1);
+        int numUserThreads = (int) Math.ceil((double) this.num_users / itemsPerThread);
+        int numPageThreads = (int) Math.ceil((double) this.num_pages / itemsPerThread);
 
-        final CountDownLatch userPageLatch = new CountDownLatch(numUserThreads + numPageThreads);
+        CountDownLatch userPageLatch = new CountDownLatch(numUserThreads + numPageThreads);
 
         // USERS
         for (int i = 0; i < numUserThreads; i++) {
             // load USERS[lo, hi]
-            final int lo = i * itemsPerThread + 1;
-            final int hi = Math.min(this.num_users, (i + 1) * itemsPerThread);
+            int lo = i * itemsPerThread + 1;
+            int hi = Math.min(this.num_users, (i + 1) * itemsPerThread);
 
             threads.add(new LoaderThread() {
@@ -125,6 +124,6 @@
         for (int i = 0; i < numPageThreads; i++) {
             // load PAGES[lo, hi]
-            final int lo = i * itemsPerThread + 1;
-            final int hi = Math.min(this.num_pages, (i + 1) * itemsPerThread);
+            int lo = i * itemsPerThread + 1;
+            int hi = Math.min(this.num_pages, (i + 1) * itemsPerThread);
 
             threads.add(new LoaderThread() {
@@ -189,6 +188,6 @@
 
         int types[] = catalog_tbl.getColumnTypes();
-        int batchSize = 0;
-        int lastPercent = -1;
+        @Var int batchSize = 0;
+        @Var int lastPercent = -1;
         for (int i = lo; i <= hi; i++) {
             // The name will be prefixed with their UserId. This increases
@@ -209,5 +208,5 @@
             String touched = TimeUtil.getCurrentTimeString14();
 
-            int param = 1;
+            @Var int param = 1;
             userInsert.setInt(param++, i); // user_id
             userInsert.setString(param++, name); // user_name
@@ -271,6 +270,6 @@
         FlatHistogram<String> h_restrictions = new FlatHistogram<String>(rand, PageHistograms.RESTRICTIONS);
 
-        int batchSize = 0;
-        int lastPercent = -1;
+        @Var int batchSize = 0;
+        @Var int lastPercent = -1;
 
         for (int i = lo; i <= hi; i++) {
@@ -282,5 +281,5 @@
             String pageTouched = TimeUtil.getCurrentTimeString14();
 
-            int param = 1;
+            @Var int param = 1;
             pageInsert.setInt(param++, i); // page_id
             pageInsert.setInt(param++, namespace); // page_namespace
@@ -345,6 +344,6 @@
         int maxBatchSize = WikipediaConstants.BATCH_SIZE * 5;
 
-        int batchSize = 0;
-        int lastPercent = -1;
+        @Var int batchSize = 0;
+        @Var int lastPercent = -1;
         Set<Integer> userPages = new HashSet<Integer>();
 
@@ -360,5 +359,5 @@
             userPages.clear();
             for (int i = 0; i < num_watches; i++) {
-                int pageId = -1;
+                @Var int pageId = -1;
                 // HACK: Work around for testing with small database sizes
                 if (num_watches == max_watches_per_user) {
@@ -376,5 +375,5 @@
                 String title = WikipediaUtil.generatePageTitle(rand, pageId);
 
-                int param = 1;
+                @Var int param = 1;
                 watchInsert.setInt(param++, user_id); // wl_user
                 watchInsert.setInt(param++, namespace); // wl_namespace
@@ -424,5 +423,5 @@
 
         // REVISION
-        Table revTable = this.benchmark.getTableCatalog(WikipediaConstants.TABLENAME_REVISION);
+        @Var Table revTable = this.benchmark.getTableCatalog(WikipediaConstants.TABLENAME_REVISION);
         String revSQL = SQLUtil.getInsertSQL(revTable, this.getDatabaseType());
         PreparedStatement revisionInsert = conn.prepareStatement(revSQL);
@@ -431,5 +430,5 @@
 
         WikipediaBenchmark b = this.benchmark;
-        int batchSize = 1;
+        @Var int batchSize = 1;
         Zipf h_users = new Zipf(rand, 1, this.num_users, WikipediaConstants.REVISION_USER_SIGMA);
         FlatHistogram<Integer> h_textLength = new FlatHistogram<Integer>(rand, TextHistograms.TEXT_LENGTH);
@@ -439,7 +438,7 @@
         FlatHistogram<Integer> h_numRevisions = new FlatHistogram<Integer>(rand, PageHistograms.REVISIONS_PER_PAGE);
 
-        final int rev_comment_max = revTable.getColumnByName("rev_comment").getSize();
-        int rev_id = 1;
-        int lastPercent = -1;
+        int rev_comment_max = revTable.getColumnByName("rev_comment").getSize();
+        @Var int rev_id = 1;
+        @Var int lastPercent = -1;
         for (int page_id = 1; page_id <= this.num_pages; page_id++) {
             // There must be at least one revision per page
@@ -447,7 +446,7 @@
 
             // Generate what the new revision is going to be
-            int old_text_length = h_textLength.nextValue().intValue();
+            @Var int old_text_length = h_textLength.nextValue().intValue();
             assert (old_text_length > 0);
-            char old_text[] = TextGenerator.randomChars(rand, old_text_length);
+            @Var char old_text[] = TextGenerator.randomChars(rand, old_text_length);
 
             for (int i = 0; i < num_revised; i++) {
@@ -475,5 +474,5 @@
 
                 // Insert the text
-                int col = 1;
+                @Var int col = 1;
                 textInsert.setInt(col++, rev_id); // old_id
                 textInsert.setString(col++, new String(old_text)); // old_text
@@ -538,5 +537,5 @@
         revTable = this.benchmark.getTableCatalog(WikipediaConstants.TABLENAME_USER);
 
-        String revTableName = (this.getDatabaseType().shouldEscapeNames()) ? revTable.getEscapedName() : revTable.getName();
+        @Var String revTableName = (this.getDatabaseType().shouldEscapeNames()) ? revTable.getEscapedName() : revTable.getName();
 
         String updateUserSql = "UPDATE " + revTableName + "   SET user_editcount = ?, " + "       user_touched = ? " + " WHERE user_id = ?";
@@ -544,5 +543,5 @@
         batchSize = 0;
         for (int i = 0; i < this.num_users; i++) {
-            int col = 1;
+            @Var int col = 1;
             userUpdate.setInt(col++, this.user_revision_ctr[i]);
             userUpdate.setString(col++, TimeUtil.getCurrentTimeString14());
@@ -577,5 +576,5 @@
             }
 
-            int col = 1;
+            @Var int col = 1;
             pageUpdate.setInt(col++, this.page_last_rev_id[i]);
             pageUpdate.setString(col++, TimeUtil.getCurrentTimeString14());
--- src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaBenchmark.java
@@ -17,12 +17,5 @@
 package com.oltpbenchmark.benchmarks.wikipedia;
 
-import java.io.IOException;
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.WorkloadConfiguration;
 import com.oltpbenchmark.api.BenchmarkModule;
@@ -33,4 +26,10 @@
 import com.oltpbenchmark.util.RandomDistribution.FlatHistogram;
 import com.oltpbenchmark.util.TextGenerator;
+import java.io.IOException;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.log4j.Logger;
 
 public class WikipediaBenchmark extends BenchmarkModule {
@@ -62,5 +61,5 @@
      * @return
      */
-    protected char[] generateRevisionText(char orig_text[]) {
+    protected char[] generateRevisionText(@Var char orig_text[]) {
         // Figure out how much we are going to change
         // If the delta is greater than the length of the original
@@ -69,5 +68,5 @@
         // There is probably some sort of minimal size that we should adhere to,
         // but it's 12:30am and I simply don't feel like dealing with that now
-        FlatHistogram<Integer> h = null;
+        @Var FlatHistogram<Integer> h = null;
         for (int i = 0; i < this.revisionDeltas.length - 1; i++) {
             if (orig_text.length <= RevisionHistograms.REVISION_DELTA_SIZES[i]) {
@@ -80,5 +79,5 @@
         assert (h != null);
 
-        int delta = h.nextValue().intValue();
+        @Var int delta = h.nextValue().intValue();
         if (orig_text.length + delta <= 0) {
             delta = -1 * (int) Math.round(orig_text.length / 1.5);
--- src/com/oltpbenchmark/benchmarks/linkbench/procedures/AddLink.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/procedures/AddLink.java
@@ -17,17 +17,16 @@
 package com.oltpbenchmark.benchmarks.linkbench.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
+import com.oltpbenchmark.benchmarks.linkbench.pojo.Link;
+import com.oltpbenchmark.util.StringUtil;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.util.Date;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
-import com.oltpbenchmark.benchmarks.linkbench.pojo.Link;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.util.StringUtil;
-
 public class AddLink extends Procedure{
 
@@ -96,6 +95,6 @@
         // or update
         boolean row_found;
-        boolean update_data = false;
-        int update_count = 0;
+        @Var boolean update_data = false;
+        @Var int update_count = 0;
 
         switch (nrows) {
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewItem.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewItem.java
@@ -18,12 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
-import java.sql.Connection;
-import java.sql.Timestamp;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure;
 import com.oltpbenchmark.api.SQLStmt;
@@ -33,4 +26,10 @@
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
 import com.oltpbenchmark.util.SQLUtil;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+import org.apache.log4j.Logger;
 
 /**
@@ -153,8 +152,8 @@
     public Object[] run(Connection conn, Timestamp benchmarkTimes[],
                         long item_id, long seller_id, long category_id,
-                        String name, String description, long duration, double initial_price, String attributes,
+                        String name, @Var String description, long duration, double initial_price, String attributes,
                         long gag_ids[], long gav_ids[], String images[]) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
-        final boolean debug = LOG.isDebugEnabled();
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        boolean debug = LOG.isDebugEnabled();
         
         // Calculate endDate
@@ -173,7 +172,7 @@
         // Get attribute names and category path and append
         // them to the item description
-        PreparedStatement stmt = null;
-        ResultSet results = null;
-        int updated = -1;
+        @Var PreparedStatement stmt = null;
+        @Var ResultSet results = null;
+        @Var int updated = -1;
         
         // ATTRIBUTES
@@ -181,5 +180,5 @@
         stmt = this.getPreparedStatement(conn, getGlobalAttribute);
         for (int i = 0; i < gag_ids.length; i++) {
-            int col = 1;
+            @Var int col = 1;
             stmt.setLong(col++, gav_ids[i]);
             stmt.setLong(col++, gag_ids[i]);
@@ -195,5 +194,5 @@
         stmt = this.getPreparedStatement(conn, getCategory, category_id);
         results = stmt.executeQuery();
-        boolean adv = results.next();
+        @Var boolean adv = results.next();
         assert(adv);
         String category_name = String.format("%s[%d]", results.getString(2), results.getInt(1));
@@ -203,5 +202,5 @@
         stmt = this.getPreparedStatement(conn, getCategoryParent, category_id);
         results = stmt.executeQuery();
-        String category_parent = null;
+        @Var String category_parent = null;
         if (results.next()) {
             category_parent = String.format("%s[%d]", results.getString(2), results.getInt(1)); 
@@ -253,5 +252,5 @@
         stmt = this.getPreparedStatement(conn, insertItemAttribute);
         for (int i = 0; i < gav_ids.length; i++) {
-            int param = 1;
+            @Var int param = 1;
             stmt.setLong(param++, AuctionMarkUtil.getUniqueElementId(item_id, i));
             stmt.setLong(param++, item_id);
@@ -266,5 +265,5 @@
         stmt = this.getPreparedStatement(conn, insertImage); 
         for (int i = 0; i < images.length; i++) {
-            int param = 1;
+            @Var int param = 1;
             stmt.setLong(param++, AuctionMarkUtil.getUniqueElementId(item_id, i));
             stmt.setLong(param++, item_id);
--- src/com/oltpbenchmark/api/LoaderUtil.java
+++ src/com/oltpbenchmark/api/LoaderUtil.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.api;
 
+import com.google.errorprone.annotations.Var;
 import java.util.Random;
 
@@ -36,5 +37,5 @@
 	public static String randomStr(long strLen) {
 
-		char freshChar;		
+		@Var char freshChar;		
 		StringBuilder sb = new StringBuilder();
 		
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/ItemId.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/ItemId.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark.util;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.util.CompositeId;
 
@@ -110,5 +111,5 @@
     public int hashCode() {
         int prime = 11;
-        int result = 1;
+        @Var int result = 1;
         result = prime * result + item_ctr;
         result = prime * result + seller_id.hashCode();
--- src/com/oltpbenchmark/util/CompositeId.java
+++ src/com/oltpbenchmark/util/CompositeId.java
@@ -18,10 +18,10 @@
 package com.oltpbenchmark.util;
 
-import java.io.IOException;
-import java.util.Arrays;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.util.json.JSONException;
 import com.oltpbenchmark.util.json.JSONObject;
 import com.oltpbenchmark.util.json.JSONStringer;
+import java.io.IOException;
+import java.util.Arrays;
 
 /**
@@ -44,6 +44,6 @@
         long values[] = this.toArray();
         assert(values.length == offset_bits.length);
-        long id = 0;
-        int offset = 0;
+        @Var long id = 0;
+        @Var int offset = 0;
         for (int i = 0; i < values.length; i++) {
             long max_value = offset_pows[i];
@@ -65,5 +65,5 @@
     protected final long[] decode(long composite_id, int offset_bits[], long offset_pows[]) {
         long values[] = new long[offset_bits.length];
-        int offset = 0;
+        @Var int offset = 0;
         for (int i = 0; i < values.length; i++) {
             values[i] = (composite_id>>offset & offset_pows[i]);
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/UserId.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/UserId.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark.util;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.util.CompositeId;
 
@@ -110,5 +111,5 @@
     public int hashCode() {        
         int prime = 11;
-        int result = 1;
+        @Var int result = 1;
         result = prime * result + itemCount;
         result = prime * result + offset;
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/LoadConfig.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/LoadConfig.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -24,9 +29,4 @@
 import java.util.List;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
-
 public class LoadConfig extends Procedure {
     
@@ -77,5 +77,5 @@
     
     public ResultSet[] run(Connection conn) throws SQLException {
-        PreparedStatement stmt = null;
+        @Var PreparedStatement stmt = null;
         
         List<ResultSet> results = new ArrayList<ResultSet>();
--- src/com/oltpbenchmark/distributions/ZipFianDistribution.java
+++ src/com/oltpbenchmark/distributions/ZipFianDistribution.java
@@ -18,4 +18,5 @@
 
 
+import com.google.errorprone.annotations.Var;
 import java.util.Random;
 
@@ -38,7 +39,7 @@
     // are follows Zipf distribution.
     public int next() {
-        int rank;
-        double frequency = 0;
-        double dice;
+        @Var int rank;
+        @Var double frequency = 0;
+        @Var double dice;
 
         rank = rnd.nextInt(size);
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewCommentResponse.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewCommentResponse.java
@@ -58,5 +58,5 @@
     public void run(Connection conn, Timestamp benchmarkTimes[],
                     long item_id, long seller_id, long comment_id, String response) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
         this.getPreparedStatement(conn, updateComment, response, currentTime, comment_id, item_id, seller_id).executeUpdate();
         this.getPreparedStatement(conn, updateUser, currentTime, seller_id).executeUpdate();
--- src/com/oltpbenchmark/benchmarks/seats/util/FlightId.java
+++ src/com/oltpbenchmark/benchmarks/seats/util/FlightId.java
@@ -18,8 +18,8 @@
 package com.oltpbenchmark.benchmarks.seats.util;
 
-import java.sql.Timestamp;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
 import com.oltpbenchmark.util.CompositeId;
+import java.sql.Timestamp;
 
 public class FlightId extends CompositeId {
@@ -160,5 +160,5 @@
     public int hashCode() {
         int prime = 17;
-        int result = 1;
+        @Var int result = 1;
         result = prime * result + airline_id;
         result = prime * result + depart_airport_id;
--- src/com/oltpbenchmark/util/StringBoxUtil.java
+++ src/com/oltpbenchmark/util/StringBoxUtil.java
@@ -1,4 +1,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.util.regex.Pattern;
 
@@ -30,5 +31,5 @@
      * @return
      */
-    public static String box(String str, String horzMark, String vertMark, Integer max_len, String corners[]) {
+    public static String box(String str, String horzMark, String vertMark, @Var Integer max_len, @Var String corners[]) {
         String lines[] = LINE_SPLIT.split(str);
         if (lines.length == 0)
@@ -51,7 +52,7 @@
         }
     
-        final String top_line = corners[0] + StringUtil.repeat(horzMark, max_len + 2) + corners[1]; // padding - two corners
-        final String bot_line = corners[2] + StringUtil.repeat(horzMark, max_len + 2) + corners[3]; // padding - two corners
-        final String f = "%s %-" + max_len + "s %s\n";
+        String top_line = corners[0] + StringUtil.repeat(horzMark, max_len + 2) + corners[1]; // padding - two corners
+        String bot_line = corners[2] + StringUtil.repeat(horzMark, max_len + 2) + corners[3]; // padding - two corners
+        String f = "%s %-" + max_len + "s %s\n";
     
         StringBuilder sb = new StringBuilder();
--- src/com/oltpbenchmark/benchmarks/tpch/procedures/Q12.java
+++ src/com/oltpbenchmark/benchmarks/tpch/procedures/Q12.java
@@ -17,9 +17,9 @@
 package com.oltpbenchmark.benchmarks.tpch.procedures;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.SQLStmt;
 import com.oltpbenchmark.benchmarks.tpch.util.TPCHConstants;
 import com.oltpbenchmark.benchmarks.tpch.util.TPCHUtil;
 import com.oltpbenchmark.util.RandomGenerator;
-
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -66,5 +66,5 @@
         // SHIPMODE2 is randomly selected within the list of values defined for Modes in Clause 4.2.2.13 and must be
         // different from the value selected for SHIPMODE1 in item 1
-        String shipMode2 = shipMode1;
+        @Var String shipMode2 = shipMode1;
         while (shipMode1.equals(shipMode2)) {
             shipMode2 = TPCHUtil.choice(TPCHConstants.MODES, rand);
--- src/com/oltpbenchmark/benchmarks/tpch/procedures/Q19.java
+++ src/com/oltpbenchmark/benchmarks/tpch/procedures/Q19.java
@@ -17,7 +17,7 @@
 package com.oltpbenchmark.benchmarks.tpch.procedures;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.SQLStmt;
 import com.oltpbenchmark.util.RandomGenerator;
-
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -77,6 +77,6 @@
         // BRAND1, BRAND2, BRAND3 = 'Brand#MN' where each MN is a two character string representing two numbers
         // randomly and independently selected within [1 .. 5]
-        int M;
-        int N;
+        @Var int M;
+        @Var int N;
         M = rand.number(1, 5);
         N = rand.number(1, 5);
--- src/com/oltpbenchmark/benchmarks/seats/procedures/FindFlights.java
+++ src/com/oltpbenchmark/benchmarks/seats/procedures/FindFlights.java
@@ -18,17 +18,16 @@
 package com.oltpbenchmark.benchmarks.seats.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.*;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
 import java.sql.Connection;
-import java.sql.Timestamp;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
-import com.oltpbenchmark.api.*;
 
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-
 public class FindFlights extends Procedure {
     private static final Logger LOG = Logger.getLogger(FindFlights.class);
@@ -87,11 +86,11 @@
     public List<Object[]> run(Connection conn, long depart_aid, long arrive_aid, Timestamp start_date, Timestamp end_date, long distance) throws SQLException {
         try {
-        final boolean debug = LOG.isDebugEnabled();
+        boolean debug = LOG.isDebugEnabled();
         assert(start_date.equals(end_date) == false);
         
-        final List<Long> arrive_aids = new ArrayList<Long>();
+        List<Long> arrive_aids = new ArrayList<Long>();
         arrive_aids.add(arrive_aid);
         
-        final List<Object[]> finalResults = new ArrayList<Object[]>();
+        List<Object[]> finalResults = new ArrayList<Object[]>();
         
         if (distance > 0) {
@@ -111,5 +110,5 @@
         int num_nearby = arrive_aids.size(); 
         if (num_nearby > 0) {
-            PreparedStatement f_stmt = null;
+            @Var PreparedStatement f_stmt = null;
             if (num_nearby == 1) {
                 f_stmt = this.getPreparedStatement(conn, GetFlights1);
@@ -138,5 +137,5 @@
             
             PreparedStatement ai_stmt = this.getPreparedStatement(conn, GetAirportInfo); 
-            ResultSet ai_results = null;
+            @Var ResultSet ai_results = null;
             while (flightResults.next()) {
                 long f_depart_airport = flightResults.getLong(4);
@@ -144,5 +143,5 @@
                 
                 Object row[] = new Object[13];
-                int r = 0;
+                @Var int r = 0;
                 
                 row[r++] = flightResults.getLong(1);    // [00] F_ID
@@ -153,5 +152,5 @@
                 ai_stmt.setLong(1, f_depart_airport);
                 ai_results = ai_stmt.executeQuery();
-                boolean adv = ai_results.next();
+                @Var boolean adv = ai_results.next();
                 assert(adv);
                 row[r++] = flightResults.getDate(5);    // [03] DEPART_TIME
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkWorker.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkWorker.java
@@ -18,15 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark;
 
-import java.sql.Timestamp;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure;
 import com.oltpbenchmark.api.Procedure.UserAbortException;
@@ -47,11 +37,20 @@
 import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
 import com.oltpbenchmark.benchmarks.auctionmark.util.GlobalAttributeValueId;
+import com.oltpbenchmark.benchmarks.auctionmark.util.ItemCommentResponse;
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemId;
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemInfo;
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
-import com.oltpbenchmark.benchmarks.auctionmark.util.ItemCommentResponse;
 import com.oltpbenchmark.benchmarks.auctionmark.util.UserId;
 import com.oltpbenchmark.types.TransactionStatus;
 import com.oltpbenchmark.util.SQLUtil;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.atomic.AtomicBoolean;
+import org.apache.log4j.Logger;
 
 public class AuctionMarkWorker extends Worker<AuctionMarkBenchmark> {
@@ -323,5 +322,5 @@
     
     @Override
-    protected TransactionStatus executeWork(TransactionType txnType) throws UserAbortException, SQLException {
+    protected TransactionStatus executeWork(@Var TransactionType txnType) throws UserAbortException, SQLException {
         // We need to subtract the different between this and the profile's start time,
         // since that accounts for the time gap between when the loader started and when the client start.
@@ -336,5 +335,5 @@
         profile.updateAndGetCurrentTime();
           
-        Transaction txn = null; 
+        @Var Transaction txn = null; 
         
         // Always check if we need to want to run CLOSE_AUCTIONS
@@ -363,5 +362,5 @@
             LOG.trace(txnType + " -> " + txn + " -> " + txnType.getProcedureClass() + " -> " + proc);
         
-        boolean ret = false;
+        @Var boolean ret = false;
         switch (txn) {
             case CloseAuctions:
@@ -421,5 +420,5 @@
     @SuppressWarnings("unused")
     public ItemId processItemRecord(Object row[]) {
-        int col = 0;
+        @Var int col = 0;
         ItemId i_id = new ItemId(SQLUtil.getLong(row[col++]));  // i_id
         long i_u_id = SQLUtil.getLong(row[col++]);              // i_u_id
@@ -503,5 +502,5 @@
         Timestamp benchmarkTimes[] = this.getTimestampParameterArray();
         UserId userId = profile.getRandomBuyerId();
-        int rand;
+        @Var int rand;
         
         // USER_FEEDBACK records
@@ -533,6 +532,6 @@
         conn.commit();
         
-        List<Object[]> vt = null;
-        int idx = 0;
+        @Var List<Object[]> vt = null;
+        @Var int idx = 0;
       
         // USER
@@ -556,5 +555,5 @@
             int cols[] = { AuctionMarkConstants.ITEM_COLUMNS.length + 1, 1, 2 };
             for (Object row[] : vt) {
-                boolean valid = true;
+                @Var boolean valid = true;
                 for (int i = 0; i < cols.length; i++) {
                     if (row[i] == null) {
@@ -595,5 +594,5 @@
     protected boolean executeNewBid(NewBid proc) throws SQLException {
         Timestamp benchmarkTimes[] = this.getTimestampParameterArray();
-        ItemInfo itemInfo = null;
+        @Var ItemInfo itemInfo = null;
         UserId sellerId;
         UserId buyerId;
@@ -753,5 +752,5 @@
         Timestamp benchmarkTimes[] = this.getTimestampParameterArray();
         UserId sellerId = profile.getRandomSellerId(this.getId());
-        ItemId itemId = profile.getNextItemId(sellerId);
+        @Var ItemId itemId = profile.getNextItemId(sellerId);
 
         String name = profile.rng.astring(6, 32);
@@ -785,5 +784,5 @@
         long duration = profile.randomDuration.nextInt();
 
-        Object results[] = null;
+        @Var Object results[] = null;
         try {
             long itemIdEncoded = itemId.encode();
@@ -813,7 +812,7 @@
         long encodedItemId = itemInfo.itemId.encode();
         UserId sellerId = itemInfo.getSellerId();
-        double buyer_credit = 0d;
+        @Var double buyer_credit = 0d;
 
-	Integer ip_id_cnt = ip_id_cntrs.get(new Long(encodedItemId));
+	@Var Integer ip_id_cnt = ip_id_cntrs.get(new Long(encodedItemId));
 	if (ip_id_cnt == null) {
 	    ip_id_cnt = new Integer(0);
@@ -856,5 +855,5 @@
         String description = profile.rng.astring(50, 255);
         
-        boolean delete_attribute = false;
+        @Var boolean delete_attribute = false;
         long add_attribute[] = {
             -1,
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkBenchmark.java
@@ -18,13 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark;
 
-import java.io.File;
-import java.io.IOException;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.WorkloadConfiguration;
 import com.oltpbenchmark.api.BenchmarkModule;
@@ -37,4 +29,12 @@
 import com.oltpbenchmark.catalog.Table;
 import com.oltpbenchmark.util.RandomGenerator;
+import java.io.File;
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
 
 public class AuctionMarkBenchmark extends BenchmarkModule {
@@ -92,5 +92,5 @@
 	 */
 	public static final File getTableDataFile(File data_dir, Table catalog_tbl) {
-	    File f = new File(String.format("%s%stable.%s.csv", data_dir.getAbsolutePath(),
+	    @Var File f = new File(String.format("%s%stable.%s.csv", data_dir.getAbsolutePath(),
 	                                                        File.separator,
 	                                                        catalog_tbl.getName().toLowerCase()));
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkProfile.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkProfile.java
@@ -18,22 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark;
 
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import org.apache.commons.collections15.map.ListOrderedMap;
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.benchmarks.auctionmark.procedures.LoadConfig;
 import com.oltpbenchmark.benchmarks.auctionmark.procedures.ResetDatabase;
@@ -57,4 +40,20 @@
 import com.oltpbenchmark.util.SQLUtil;
 import com.oltpbenchmark.util.StringUtil;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import org.apache.commons.collections15.map.ListOrderedMap;
+import org.apache.log4j.Logger;
 
 
@@ -278,5 +277,5 @@
         String sql = SQLUtil.getInsertSQL(catalog_tbl, this.benchmark.getWorkloadConfiguration().getDBType());
         PreparedStatement stmt = conn.prepareStatement(sql);
-        int param_idx = 1;
+        @Var int param_idx = 1;
         stmt.setObject(param_idx++, this.scale_factor); // CFP_SCALE_FACTOR
         stmt.setObject(param_idx++, this.loaderStartTime); // CFP_LOADER_START
@@ -367,5 +366,5 @@
                     LOG.debug("Loading AuctionMarkProfile for the first time");
                 ResultSet results[] = worker.getProcedure(LoadConfig.class).run(conn);
-                int result_idx = 0;
+                @Var int result_idx = 0;
                 
                 // CONFIG_PROFILE
@@ -421,5 +420,5 @@
             String.format("Failed to get data from %s\n%s",
                           AuctionMarkConstants.TABLENAME_CONFIG_PROFILE, vt);
-        int col = 1;
+        @Var int col = 1;
         profile.scale_factor = vt.getDouble(col++);
         profile.loaderStartTime = vt.getTimestamp(col++);
@@ -433,5 +432,5 @@
     private static final void loadItemCategoryCounts(AuctionMarkProfile profile, ResultSet vt) throws SQLException {
         while (vt.next()) {
-            int col = 1;
+            @Var int col = 1;
             long i_c_id = vt.getLong(col++);
             int count = vt.getInt(col++);
@@ -444,7 +443,7 @@
     
     private static final void loadItems(AuctionMarkProfile profile, ResultSet vt) throws SQLException {
-        int ctr = 0;
+        @Var int ctr = 0;
         while (vt.next()) {
-            int col = 1;
+            @Var int col = 1;
             ItemId i_id = new ItemId(vt.getLong(col++));
             double i_current_price = vt.getDouble(col++);
@@ -466,5 +465,5 @@
     private static final void loadPendingItemComments(AuctionMarkProfile profile, ResultSet vt) throws SQLException {
         while (vt.next()) {
-            int col = 1;
+            @Var int col = 1;
             long ic_id = vt.getLong(col++);
             long ic_i_id = vt.getLong(col++);
@@ -480,5 +479,5 @@
     private static final void loadGlobalAttributeGroups(AuctionMarkProfile profile, ResultSet vt) throws SQLException {
         while (vt.next()) {
-            int col = 1;
+            @Var int col = 1;
             long gag_id = vt.getLong(col++);
             profile.gag_ids.add(new GlobalAttributeGroupId(gag_id));
@@ -582,10 +581,10 @@
         if (this.userIdGenerator == null) this.initializeUserIdGenerator(clientId);
         
-        UserId user_id = null;
-        int tries = 1000;
-        final long num_users = this.userIdGenerator.getTotalUsers()-1;
+        @Var UserId user_id = null;
+        @Var int tries = 1000;
+        long num_users = this.userIdGenerator.getTotalUsers()-1;
         while (user_id == null && tries-- > 0) {
             // We first need to figure out how many items our seller needs to have
-            long itemCount = -1;
+            @Var long itemCount = -1;
             // assert(min_item_count < this.users_per_item_count.getMaxValue());
             while (itemCount < min_item_count) {
@@ -693,5 +692,5 @@
     
     public ItemId getNextItemId(UserId seller_id) {
-        Integer cnt = this.seller_item_cnt.get(seller_id);
+        @Var Integer cnt = this.seller_item_cnt.get(seller_id);
         if (cnt == null || cnt == 0) {
             cnt = seller_id.getItemCount();
@@ -703,5 +702,5 @@
     
     private boolean addItem(LinkedList<ItemInfo> items, ItemInfo itemInfo) {
-        boolean added = false;
+        @Var boolean added = false;
         
         int idx = items.indexOf(itemInfo);
@@ -776,5 +775,5 @@
         
         long remaining = itemInfo.endDate.getTime() - baseTime.getTime();
-        ItemStatus new_status = (itemInfo.status != null ? itemInfo.status : ItemStatus.OPEN); 
+        @Var ItemStatus new_status = (itemInfo.status != null ? itemInfo.status : ItemStatus.OPEN); 
         // Already ended
         if (remaining <= AuctionMarkConstants.ITEM_ALREADY_ENDED) {
@@ -838,11 +837,11 @@
         Timestamp currentTime = this.updateAndGetCurrentTime();
         int num_items = itemSet.size();
-        int idx = -1;
-        ItemInfo itemInfo = null;
+        @Var int idx = -1;
+        @Var ItemInfo itemInfo = null;
         
         if (LOG.isTraceEnabled()) 
             LOG.trace(String.format("Getting random ItemInfo [numItems=%d, currentTime=%s, needCurrentPrice=%s]",
                                     num_items, currentTime, needCurrentPrice));
-        long tries = 1000;
+        @Var long tries = 1000;
         tmp_seenItems.clear();
         while (num_items > 0 && tries-- > 0 && tmp_seenItems.size() < num_items) {
@@ -950,5 +949,5 @@
     public ItemInfo getRandomItem() {
         assert(this.getAllItemsCount() > 0);
-        int idx = -1;
+        @Var int idx = -1;
         while (idx == -1 || allItemSets[idx].isEmpty()) {
             idx = rng.nextInt(allItemSets.length);
@@ -995,5 +994,5 @@
         Histogram<ItemStatus> itemCounts = new Histogram<ItemStatus>(true);
         for (ItemStatus status : ItemStatus.values()) {
-            int cnt = 0;
+            @Var int cnt = 0;
             switch (status) {
                 case OPEN:
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/CloseAuctions.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/CloseAuctions.java
@@ -18,20 +18,19 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
+import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
 import java.sql.Connection;
-import java.sql.Timestamp;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
-import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
-
 /**
  * PostAuction
@@ -91,6 +90,6 @@
     public List<Object[]> run(Connection conn, Timestamp benchmarkTimes[],
                               Timestamp startTime, Timestamp endTime) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
-        final boolean debug = LOG.isDebugEnabled();
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        boolean debug = LOG.isDebugEnabled();
 
 //        int orig_isolation = conn.getTransactionIsolation();
@@ -101,17 +100,17 @@
                                     startTime, endTime, currentTime));
 
-        int closed_ctr = 0;
-        int waiting_ctr = 0;
-        int round = AuctionMarkConstants.CLOSE_AUCTIONS_ROUNDS;
-        int updated = -1;
-        int col = -1;
-        int param = -1;
+        @Var int closed_ctr = 0;
+        @Var int waiting_ctr = 0;
+        @Var int round = AuctionMarkConstants.CLOSE_AUCTIONS_ROUNDS;
+        @Var int updated = -1;
+        @Var int col = -1;
+        @Var int param = -1;
         
         PreparedStatement dueItemsStmt = this.getPreparedStatement(conn, getDueItems);
-        ResultSet dueItemsTable = null;
+        @Var ResultSet dueItemsTable = null;
         PreparedStatement maxBidStmt = this.getPreparedStatement(conn, getMaxBid);
-        ResultSet maxBidResults = null;
+        @Var ResultSet maxBidResults = null;
         
-        final List<Object[]> output_rows = new ArrayList<Object[]>();
+        List<Object[]> output_rows = new ArrayList<Object[]>();
         while (round-- > 0) {
             param = 1;
@@ -120,5 +119,5 @@
             dueItemsStmt.setInt(param++, ItemStatus.OPEN.ordinal());
             dueItemsTable = dueItemsStmt.executeQuery();
-            boolean adv = dueItemsTable.next();
+            @Var boolean adv = dueItemsTable.next();
             if (adv == false) break;
 
@@ -132,7 +131,7 @@
                 long numBids = dueItemsTable.getLong(col++);
                 Timestamp endDate = dueItemsTable.getTimestamp(col++);
-                ItemStatus itemStatus = ItemStatus.get(dueItemsTable.getLong(col++));
-                Long bidId = null;
-                Long buyerId = null;
+                @Var ItemStatus itemStatus = ItemStatus.get(dueItemsTable.getLong(col++));
+                @Var Long bidId = null;
+                @Var Long buyerId = null;
                 
                 if (debug)
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/GetItem.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/GetItem.java
@@ -18,4 +18,8 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -24,8 +28,4 @@
 import java.sql.Timestamp;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-
 /**
  * Get Item Information
@@ -72,5 +72,5 @@
         PreparedStatement user_stmt = this.getPreparedStatement(conn, getUser, seller_id);
         ResultSet user_results = user_stmt.executeQuery();
-        Object user_row[] = null;
+        @Var Object user_row[] = null;
         try {
             if (user_results.next() == false) {
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/GetUserInfo.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/GetUserInfo.java
@@ -18,19 +18,18 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
 import java.sql.Connection;
-import java.sql.Timestamp;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Timestamp;
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
-
 /**
  * GetUserInfo
@@ -119,12 +118,12 @@
                                 boolean get_buyer_items,
                                 boolean get_watched_items) throws SQLException {
-        final boolean debug = LOG.isDebugEnabled();
+        boolean debug = LOG.isDebugEnabled();
         
         ResultSet results[] = new ResultSet[6];
-        int result_idx = 0;
+        @Var int result_idx = 0;
         
         // The first VoltTable in the output will always be the user's information
         if (debug) LOG.debug("Grabbing USER record: " + user_id);
-        PreparedStatement stmt = this.getPreparedStatement(conn, getUser, user_id);
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, getUser, user_id);
         results[result_idx++] = stmt.executeQuery();
 
@@ -176,5 +175,5 @@
         List<Object[]> final_results[] = new List[results.length];
         for (result_idx = 0; result_idx < results.length; result_idx++) {
-            List<Object[]> inner = null; 
+            @Var List<Object[]> inner = null; 
             if (results[result_idx] != null) {
                 inner = new ArrayList<Object[]>();
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewComment.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewComment.java
@@ -18,15 +18,15 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
 import java.sql.Connection;
-import java.sql.Timestamp;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Timestamp;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
-
 /**
  * NewComment
@@ -76,8 +76,8 @@
     public Object[] run(Connection conn, Timestamp benchmarkTimes[],
                         long item_id, long seller_id, long buyer_id, String question) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
     	
         // Set comment_id
-        long ic_id = 0;
+        @Var long ic_id = 0;
         PreparedStatement stmt = this.getPreparedStatement(conn, getItemComments, item_id, seller_id);
         ResultSet results = stmt.executeQuery();
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewFeedback.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewFeedback.java
@@ -18,15 +18,15 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
 import java.sql.Connection;
-import java.sql.Timestamp;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Timestamp;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
-
 /**
  * NewFeedback
@@ -78,9 +78,9 @@
     public void run(Connection conn, Timestamp benchmarkTimes[],
                     long user_id, long i_id, long seller_id, long from_id, long rating, String comment) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
 
         // Check to make sure they're not trying to add feedback
         // twice for the same ITEM
-        PreparedStatement stmt = this.getPreparedStatement(conn, checkUserFeedback, user_id, i_id, seller_id, from_id);
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, checkUserFeedback, user_id, i_id, seller_id, from_id);
         ResultSet rs = stmt.executeQuery();
         if (rs.next()) {
@@ -97,5 +97,5 @@
                                                                currentTime,
                                                                comment);
-        int updated = stmt.executeUpdate();
+        @Var int updated = stmt.executeUpdate();
         assert(updated == 1) :
             "Failed to add feedback for Item #" + i_id;
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewPurchase.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/NewPurchase.java
@@ -18,10 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
-import java.sql.Connection;
-import java.sql.Timestamp;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure;
 import com.oltpbenchmark.api.SQLStmt;
@@ -29,4 +24,9 @@
 import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Timestamp;
 
 /**
@@ -142,9 +142,9 @@
     public Object[] run(Connection conn, Timestamp benchmarkTimes[],
                         long item_id, long seller_id, long ip_id, double buyer_credit) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
         
-        PreparedStatement stmt = null;
-        ResultSet results = null;
-        int updated;
+        @Var PreparedStatement stmt = null;
+        @Var ResultSet results = null;
+        @Var int updated;
         boolean adv;
         
@@ -181,5 +181,5 @@
             throw new UserAbortException(msg);
         }
-        int col = 1;
+        @Var int col = 1;
         long i_num_bids = results.getLong(col++);
         double i_current_price = results.getDouble(col++);
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/UpdateItem.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/UpdateItem.java
@@ -18,4 +18,9 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -24,9 +29,4 @@
 import java.sql.Timestamp;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.util.AuctionMarkUtil;
-
 /**
  * UpdateItem
@@ -81,8 +81,8 @@
                        long item_id, long seller_id, String description,
                        boolean delete_attribute, long add_attribute[]) throws SQLException {
-        final Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
+        Timestamp currentTime = AuctionMarkUtil.getProcTimestamp(benchmarkTimes);
         
-        PreparedStatement stmt = this.getPreparedStatement(conn, updateItem, description, currentTime, item_id, seller_id);
-        int updated = stmt.executeUpdate();
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, updateItem, description, currentTime, item_id, seller_id);
+        @Var int updated = stmt.executeUpdate();
         if (updated == 0) {
             throw new UserAbortException("Unable to update closed auction");
@@ -101,5 +101,5 @@
             long gag_id = add_attribute[0];
             long gav_id = add_attribute[1];
-            long ia_id = -1;
+            @Var long ia_id = -1;
             
             stmt = this.getPreparedStatement(conn, getMaxItemAttributeId, item_id, seller_id);
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/UserIdGenerator.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/UserIdGenerator.java
@@ -18,14 +18,13 @@
 package com.oltpbenchmark.benchmarks.auctionmark.util;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.util.Histogram;
+import com.oltpbenchmark.util.StringUtil;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Map;
-
 import org.apache.commons.collections15.map.ListOrderedMap;
 import org.apache.commons.lang.NotImplementedException;
 
-import com.oltpbenchmark.util.Histogram;
-import com.oltpbenchmark.util.StringUtil;
-
 public class UserIdGenerator implements Iterator<UserId> {
 
@@ -60,5 +59,5 @@
         this.clientId = clientId;
         
-        Long temp = users_per_item_count.getMaxValue();
+        @Var Long temp = users_per_item_count.getMaxValue();
         if (temp == null) temp = users_per_item_count.getMaxValue();
         assert(temp != null) :
@@ -104,5 +103,5 @@
     public UserId seekToPosition(int position) {
         assert(position <= this.getTotalUsers()) : String.format("%d < %d", position, this.getTotalUsers());
-        UserId user_id = null;
+        @Var UserId user_id = null;
         
         this.currentPosition = 0;
@@ -134,6 +133,6 @@
         if (this.clientId == null) return (true);
         
-        int tmp_count = 0;
-        int tmp_position = 0;
+        @Var int tmp_count = 0;
+        @Var int tmp_position = 0;
         while (tmp_count <= this.maxItemCount) {
             assert(tmp_count < this.usersPerItemCounts.length) :
@@ -152,5 +151,5 @@
     private UserId findNextUserId() {
         // Find the next id for this size level
-        Long found = null;
+        @Var Long found = null;
         while (this.currentItemCount <= this.maxItemCount) {
             while (this.currentOffset > 0) {
--- src/com/oltpbenchmark/util/ThreadUtil.java
+++ src/com/oltpbenchmark/util/ThreadUtil.java
@@ -28,4 +28,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.io.BufferedInputStream;
 import java.io.IOException;
@@ -39,5 +40,4 @@
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.ThreadFactory;
-
 import org.apache.log4j.Logger;
 
@@ -87,5 +87,5 @@
     }
     
-    public static ThreadFactory getThreadFactory(final String name, final UncaughtExceptionHandler handler) {
+    public static ThreadFactory getThreadFactory(String name, UncaughtExceptionHandler handler) {
         return new ThreadFactory() {
             @Override
@@ -107,5 +107,5 @@
     public static Pair<Integer, Process> exec(String command[]) {
         ProcessBuilder pb = new ProcessBuilder(command);
-        Process p = null;
+        @Var Process p = null;
         try {
             p = pb.start();
@@ -117,5 +117,5 @@
         assert (p_class.getName().endsWith("UNIXProcess")) : "Unexpected Process class: " + p_class;
 
-        Integer pid = null;
+        @Var Integer pid = null;
         try {
             Field pid_field = p_class.getDeclaredField("pid");
@@ -147,5 +147,5 @@
      * @param print_output
      */
-    public static <T> void fork(String command[], final EventObservable<T> stop_observable, final String prefix, final boolean print_output) {
+    public static <T> void fork(String command[], EventObservable<T> stop_observable, String prefix, boolean print_output) {
         if (LOG.isDebugEnabled())
             LOG.debug("Forking off process: " + Arrays.toString(command));
@@ -154,5 +154,5 @@
         ProcessBuilder pb = new ProcessBuilder(command);
         pb.redirectErrorStream(true);
-        Process temp = null;
+        @Var Process temp = null;
         try {
             temp = pb.start();
@@ -162,9 +162,9 @@
         }
         assert (temp != null);
-        final Process p = temp;
+        Process p = temp;
 
         // Register a observer if we have a stop observable
         if (stop_observable != null) {
-            final String prog_name = FileUtil.basename(command[0]);
+            String prog_name = FileUtil.basename(command[0]);
             stop_observable.addObserver(new EventObserver<T>() {
                 boolean first = true;
@@ -183,6 +183,6 @@
         if (print_output) {
             BufferedInputStream in = new BufferedInputStream(p.getInputStream());
-            StringBuilder buffer = new StringBuilder();
-            int c;
+            @Var StringBuilder buffer = new StringBuilder();
+            @Var int c;
             try {
                 while ((c = in.read()) != -1) {
@@ -218,5 +218,5 @@
             return (OVERRIDE_NUM_THREADS);
         }
-        int max_threads = DEFAULT_NUM_THREADS;
+        @Var int max_threads = DEFAULT_NUM_THREADS;
         String prop = System.getProperty("hstore.max_threads");
         if (prop != null && prop.startsWith("${") == false)
@@ -236,5 +236,5 @@
      * @param runnables
      */
-    public static <R extends Runnable> void runGlobalPool(final Collection<R> runnables) {
+    public static <R extends Runnable> void runGlobalPool(Collection<R> runnables) {
         // Initialize the thread pool the first time that we run
         synchronized (ThreadUtil.lock) {
@@ -262,5 +262,5 @@
      * @param threads
      */
-    public static <R extends Runnable> void runNewPool(final Collection<R> threads) {
+    public static <R extends Runnable> void runNewPool(Collection<R> threads) {
         ExecutorService pool = Executors.newCachedThreadPool(factory);
         ThreadUtil.run(threads, pool, true);
@@ -271,5 +271,5 @@
      * @param threads
      */
-    public static <R extends Runnable> void runNewPool(final Collection<R> threads, int max_concurrent) {
+    public static <R extends Runnable> void runNewPool(Collection<R> threads, int max_concurrent) {
         ExecutorService pool = Executors.newFixedThreadPool(max_concurrent, factory);
         ThreadUtil.run(threads, pool, true);
@@ -285,8 +285,8 @@
      * @throws Exception
      */
-    private static final <R extends Runnable> void run(final Collection<R> runnables, final ExecutorService pool, final boolean stop_pool) {
-        final long start = System.currentTimeMillis();
-        final int num_threads = runnables.size();
-        final CountDownLatch latch = new CountDownLatch(num_threads);
+    private static final <R extends Runnable> void run(Collection<R> runnables, ExecutorService pool, boolean stop_pool) {
+        long start = System.currentTimeMillis();
+        int num_threads = runnables.size();
+        CountDownLatch latch = new CountDownLatch(num_threads);
         LatchedExceptionHandler handler = new LatchedExceptionHandler(latch);
 
@@ -311,5 +311,5 @@
         }
         if (LOG.isDebugEnabled()) {
-            final long stop = System.currentTimeMillis();
+            long stop = System.currentTimeMillis();
             LOG.debug(String.format("Finished executing %d threads [time=%.02fs]",
                       num_threads, (stop - start) / 1000d));
--- src/com/oltpbenchmark/benchmarks/chbenchmark/CHBenCHmarkLoader.java
+++ src/com/oltpbenchmark/benchmarks/chbenchmark/CHBenCHmarkLoader.java
@@ -18,4 +18,10 @@
 
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.benchmarks.chbenchmark.pojo.Nation;
+import com.oltpbenchmark.benchmarks.chbenchmark.pojo.Region;
+import com.oltpbenchmark.benchmarks.chbenchmark.pojo.Supplier;
+import com.oltpbenchmark.util.RandomGenerator;
 import java.io.BufferedReader;
 import java.io.File;
@@ -29,13 +35,6 @@
 import java.util.List;
 import java.util.StringTokenizer;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.benchmarks.chbenchmark.pojo.Nation;
-import com.oltpbenchmark.benchmarks.chbenchmark.pojo.Region;
-import com.oltpbenchmark.benchmarks.chbenchmark.pojo.Supplier;
-import com.oltpbenchmark.util.RandomGenerator;
-
 public class CHBenCHmarkLoader extends Loader<CHBenCHmark> {
 	private static final Logger LOG = Logger.getLogger(CHBenCHmarkLoader.class);
@@ -118,7 +117,7 @@
 	static int loadRegions() throws SQLException {
 		
-		int k = 0;
+		@Var int k = 0;
 		int t = 0;
-		BufferedReader br = null;
+		@Var BufferedReader br = null;
 		
 		try {
@@ -136,5 +135,5 @@
 			File file = new File("src", "com/oltpbenchmark/benchmarks/chbenchmark/region_gen.tbl");
 			br = new BufferedReader(new FileReader(file));
-			String line = br.readLine();
+			@Var String line = br.readLine();
 			while (line != null) {
 				StringTokenizer st = new StringTokenizer(line, "|");
@@ -206,7 +205,7 @@
 	static int loadNations() throws SQLException {
 		
-		int k = 0;
+		@Var int k = 0;
 		int t = 0;
-		BufferedReader br = null;
+		@Var BufferedReader br = null;
 		
 		try {
@@ -220,5 +219,5 @@
 			File file = new File("src", "com/oltpbenchmark/benchmarks/chbenchmark/nation_gen.tbl");
 			br = new BufferedReader(new FileReader(file));
-			String line = br.readLine();
+			@Var String line = br.readLine();
 			while (line != null) {
 				StringTokenizer st = new StringTokenizer(line, "|");
@@ -290,5 +289,5 @@
 	static int loadSuppliers() throws SQLException {
 		
-		int k = 0;
+		@Var int k = 0;
 		int t = 0;
 		
@@ -362,5 +361,5 @@
 
 	protected long loadHelper() {
-		long totalRows = 0;
+		@Var long totalRows = 0;
 		try {
 			totalRows += loadRegions();
--- src/com/oltpbenchmark/benchmarks/tpcc/procedures/Delivery.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/procedures/Delivery.java
@@ -17,4 +17,10 @@
 package com.oltpbenchmark.benchmarks.tpcc.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,13 +29,6 @@
 import java.sql.Timestamp;
 import java.util.Random;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
-
 public class Delivery extends TPCCProcedure {
 
@@ -112,6 +111,6 @@
 		delivUpdateCustBalDelivCnt = this.getPreparedStatement(conn, delivUpdateCustBalDelivCntSQL);
 
-		int d_id, c_id;
-        float ol_total = 0;
+		@Var int d_id, c_id;
+        @Var float ol_total = 0;
         int[] orderIDs;
 
@@ -121,5 +120,5 @@
             delivGetOrderId.setInt(2, w_id);
             if (trace) LOG.trace("delivGetOrderId START");
-            ResultSet rs = delivGetOrderId.executeQuery();
+            @Var ResultSet rs = delivGetOrderId.executeQuery();
             if (trace) LOG.trace("delivGetOrderId END");
             if (!rs.next()) {
@@ -139,5 +138,5 @@
             delivDeleteNewOrder.setInt(3, w_id);
             if (trace) LOG.trace("delivDeleteNewOrder START");
-            int result = delivDeleteNewOrder.executeUpdate();
+            @Var int result = delivDeleteNewOrder.executeUpdate();
             if (trace) LOG.trace("delivDeleteNewOrder END");
             if (result != 1) {
@@ -216,5 +215,5 @@
             rs.close();
 
-            int idx = 1; // HACK: So that we can debug this query
+            @Var int idx = 1; // HACK: So that we can debug this query
             delivUpdateCustBalDelivCnt.setDouble(idx++, ol_total);
             delivUpdateCustBalDelivCnt.setInt(idx++, w_id);
--- src/com/oltpbenchmark/benchmarks/tpcc/TPCCBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/TPCCBenchmark.java
@@ -18,4 +18,11 @@
 package com.oltpbenchmark.benchmarks.tpcc;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.tpcc.procedures.NewOrder;
+import com.oltpbenchmark.types.DatabaseType;
 import java.io.IOException;
 import java.sql.Connection;
@@ -24,15 +31,6 @@
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.tpcc.procedures.NewOrder;
-import com.oltpbenchmark.types.DatabaseType;
-
 public class TPCCBenchmark extends BenchmarkModule {
     private static final Logger LOG = Logger.getLogger(TPCCBenchmark.class);
@@ -73,5 +71,5 @@
 		TPCCWorker[] terminals = new TPCCWorker[workConf.getTerminals()];
 
-		int numWarehouses = (int) workConf.getScaleFactor();//tpccConf.getNumWarehouses();
+		@Var int numWarehouses = (int) workConf.getScaleFactor();//tpccConf.getNumWarehouses();
 		if (numWarehouses <= 0) {
 			numWarehouses = 1;
@@ -90,12 +88,12 @@
 		// are distributed as
 		// 1, 1, 2, 1, 2, 1, 2
-		final double terminalsPerWarehouse = (double) numTerminals
+		double terminalsPerWarehouse = (double) numTerminals
 				/ numWarehouses;
-		int workerId = 0;
+		@Var int workerId = 0;
 		assert terminalsPerWarehouse >= 1;
 		for (int w = 0; w < numWarehouses; w++) {
 			// Compute the number of terminals in *this* warehouse
 			int lowerTerminalId = (int) (w * terminalsPerWarehouse);
-			int upperTerminalId = (int) ((w + 1) * terminalsPerWarehouse);
+			@Var int upperTerminalId = (int) ((w + 1) * terminalsPerWarehouse);
 			// protect against double rounding errors
 			int w_id = w + 1;
@@ -108,5 +106,5 @@
 			                            w_id, numWarehouseTerminals, lowerTerminalId, upperTerminalId));
 
-			final double districtsPerTerminal = TPCCConfig.configDistPerWhse
+			double districtsPerTerminal = TPCCConfig.configDistPerWhse
 					/ (double) numWarehouseTerminals;
 			assert districtsPerTerminal >= 1 :
@@ -114,6 +112,6 @@
 			                  districtsPerTerminal, numWarehouseTerminals);
 			for (int terminalId = 0; terminalId < numWarehouseTerminals; terminalId++) {
-				int lowerDistrictId = (int) (terminalId * districtsPerTerminal);
-				int upperDistrictId = (int) ((terminalId + 1) * districtsPerTerminal);
+				@Var int lowerDistrictId = (int) (terminalId * districtsPerTerminal);
+				@Var int upperDistrictId = (int) ((terminalId + 1) * districtsPerTerminal);
 				if (terminalId + 1 == numWarehouseTerminals) {
 					upperDistrictId = TPCCConfig.configDistPerWhse;
--- src/com/oltpbenchmark/benchmarks/epinions/EpinionsBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/epinions/EpinionsBenchmark.java
@@ -18,4 +18,12 @@
 package com.oltpbenchmark.benchmarks.epinions;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.epinions.procedures.GetAverageRatingByTrustedUser;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
 import java.io.IOException;
 import java.sql.Connection;
@@ -25,15 +33,6 @@
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.epinions.procedures.GetAverageRatingByTrustedUser;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-
 public class EpinionsBenchmark extends BenchmarkModule {
     
@@ -59,10 +58,10 @@
             // LIST OF USERS
 
-            Table t = this.catalog.getTable("USERACCT");
+            @Var Table t = this.catalog.getTable("USERACCT");
             assert (t != null) : "Invalid table name '" + t + "' " + this.catalog.getTables();
 
             String userCount = SQLUtil.selectColValues(this.workConf.getDBType(), t, "u_id");
             Statement stmt = metaConn.createStatement();
-            ResultSet res = stmt.executeQuery(userCount);
+            @Var ResultSet res = stmt.executeQuery(userCount);
             ArrayList<String> user_ids = new ArrayList<String>();
             while (res.next()) {
--- src/com/oltpbenchmark/benchmarks/seats/procedures/FindOpenSeats.java
+++ src/com/oltpbenchmark/benchmarks/seats/procedures/FindOpenSeats.java
@@ -41,14 +41,13 @@
 package com.oltpbenchmark.benchmarks.seats.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.*;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
-import com.oltpbenchmark.api.*;
 
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-
 public class FindOpenSeats extends Procedure {
     private static final Logger LOG = Logger.getLogger(FindOpenSeats.class);
@@ -74,8 +73,8 @@
     
     public Object[][] run(Connection conn, long f_id) throws SQLException {
-        final boolean debug = LOG.isDebugEnabled();
+        boolean debug = LOG.isDebugEnabled();
         
         // 150 seats
-        final long seatmap[] = new long[]
+        long seatmap[] = new long[]
           {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,     
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
@@ -128,5 +127,5 @@
         s_results.close();
 
-        int ctr = 0;
+        @Var int ctr = 0;
         Object[][] returnResults = new Object[SEATSConstants.FLIGHTS_NUM_SEATS][];
         for (int i = 0; i < seatmap.length; ++i) {
--- src/com/oltpbenchmark/benchmarks/smallbank/SmallBankBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/smallbank/SmallBankBenchmark.java
@@ -1,10 +1,5 @@
 package com.oltpbenchmark.benchmarks.smallbank;
 
-import java.io.IOException;
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.WorkloadConfiguration;
 import com.oltpbenchmark.api.BenchmarkModule;
@@ -15,4 +10,9 @@
 import com.oltpbenchmark.catalog.Table;
 import com.oltpbenchmark.util.SQLUtil;
+import java.io.IOException;
+import java.sql.Connection;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
 
 public class SmallBankBenchmark extends BenchmarkModule {
@@ -51,5 +51,5 @@
      */
     public static int getCustomerNameLength(Table acctsTbl) {
-        int acctNameLength = -1;
+        @Var int acctNameLength = -1;
         for (Column col : acctsTbl.getColumns()) {
             if (SQLUtil.isStringType(col.getType())) {
--- src/com/oltpbenchmark/benchmarks/smallbank/procedures/Amalgamate.java
+++ src/com/oltpbenchmark/benchmarks/smallbank/procedures/Amalgamate.java
@@ -26,4 +26,8 @@
 package com.oltpbenchmark.benchmarks.smallbank.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -31,8 +35,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
-
 /**
  * Amalgamate Procedure
@@ -119,5 +119,5 @@
         // Update Balance Information
         PreparedStatement updateStmt0 = this.getPreparedStatement(conn, ZeroCheckingBalance, custId0);
-        int status = updateStmt0.executeUpdate();
+        @Var int status = updateStmt0.executeUpdate();
         assert(status == 1);
         
--- src/com/oltpbenchmark/benchmarks/smallbank/procedures/SendPayment.java
+++ src/com/oltpbenchmark/benchmarks/smallbank/procedures/SendPayment.java
@@ -26,4 +26,8 @@
 package com.oltpbenchmark.benchmarks.smallbank.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -31,8 +35,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
-
 /**
  * SendPayment Procedure
@@ -92,6 +92,6 @@
         
         // Debt
-        PreparedStatement updateStmt = this.getPreparedStatement(conn, UpdateCheckingBalance, amount*-1d, sendAcct);
-        int status = updateStmt.executeUpdate();
+        @Var PreparedStatement updateStmt = this.getPreparedStatement(conn, UpdateCheckingBalance, amount*-1d, sendAcct);
+        @Var int status = updateStmt.executeUpdate();
         assert(status == 1) :
             String.format("Failed to update %s for customer #%d [amount=%.2f]",
--- src/com/oltpbenchmark/benchmarks/smallbank/procedures/TransactSavings.java
+++ src/com/oltpbenchmark/benchmarks/smallbank/procedures/TransactSavings.java
@@ -26,4 +26,8 @@
 package com.oltpbenchmark.benchmarks.smallbank.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -31,8 +35,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
-
 /**
  * TransactSavings Procedure
@@ -60,6 +60,6 @@
     public void run(Connection conn, String custName, double amount) throws SQLException {
         // First convert the custName to the acctId
-        PreparedStatement stmt = this.getPreparedStatement(conn, GetAccount, custName);
-        ResultSet result = stmt.executeQuery();
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, GetAccount, custName);
+        @Var ResultSet result = stmt.executeQuery();
         if (result.next() == false) {
             String msg = "Invalid account '" + custName + "'";
--- src/com/oltpbenchmark/benchmarks/smallbank/procedures/WriteCheck.java
+++ src/com/oltpbenchmark/benchmarks/smallbank/procedures/WriteCheck.java
@@ -26,4 +26,8 @@
 package com.oltpbenchmark.benchmarks.smallbank.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -31,8 +35,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.smallbank.SmallBankConstants;
-
 /**
  * WriteCheck Procedure
@@ -93,5 +93,5 @@
         double total = balRes0.getDouble(1) + balRes1.getDouble(1);
         
-        PreparedStatement updateStmt = null;
+        @Var PreparedStatement updateStmt = null;
         if (total < amount) {
             updateStmt = this.getPreparedStatement(conn, UpdateCheckingBalance, amount - 1, custId);
--- src/com/oltpbenchmark/benchmarks/linkbench/distributions/AccessDistributions.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/distributions/AccessDistributions.java
@@ -16,15 +16,14 @@
 package com.oltpbenchmark.benchmarks.linkbench.distributions;
 
-import java.util.Properties;
-import java.util.Random;
-
-import org.apache.log4j.Logger;
-
-import com.oltpbenchmark.benchmarks.linkbench.distributions.RealDistribution.DistributionType;
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConfigError;
 import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
+import com.oltpbenchmark.benchmarks.linkbench.distributions.RealDistribution.DistributionType;
 import com.oltpbenchmark.benchmarks.linkbench.utils.ConfigUtil;
 import com.oltpbenchmark.benchmarks.linkbench.utils.InvertibleShuffler;
 import com.oltpbenchmark.util.ClassUtil;
+import java.util.Properties;
+import java.util.Random;
+import org.apache.log4j.Logger;
 
 
@@ -76,5 +75,5 @@
     @Override
     public long nextID(Random rng, long previousid) {
-      long newid;
+      @Var long newid;
       double drange = (double)(maxid - minid);
 
--- src/com/oltpbenchmark/benchmarks/linkbench/distributions/PiecewiseLinearDistribution.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/distributions/PiecewiseLinearDistribution.java
@@ -16,4 +16,5 @@
 package com.oltpbenchmark.benchmarks.linkbench.distributions;
 
+import com.google.errorprone.annotations.Var;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -165,5 +166,5 @@
     double p = max_probability * rng.nextDouble();
 
-    int idx = binarySearch(cs, p);
+    @Var int idx = binarySearch(cs, p);
     if (idx == 0) idx = 1;
 
@@ -194,5 +195,5 @@
     if (cdf.size() == 0) return 0;
     // Assume CDF is piecewise linear
-    double sum = 0;
+    @Var double sum = 0;
     sum = cdf.get(0).probability * cdf.get(0).value;
     for (int i = 1; i < cdf.size(); i++) {
@@ -206,5 +207,5 @@
 
   public static int binarySearch(ArrayList<Point> points, double p) {
-    int left = 0, right = points.size() - 1;
+    @Var int left = 0, right = points.size() - 1;
     while (left < right) {
       int mid = (left + right)/2;
--- src/com/oltpbenchmark/benchmarks/linkbench/utils/InvertibleShuffler.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/utils/InvertibleShuffler.java
@@ -32,4 +32,5 @@
 package com.oltpbenchmark.benchmarks.linkbench.utils;
 
+import com.google.errorprone.annotations.Var;
 import java.util.Random;
 
@@ -48,5 +49,5 @@
     this(new Random(seed), shuffleGroups, n);
   }
-  public InvertibleShuffler(Random rng, int shuffleGroups, long n) {
+  public InvertibleShuffler(Random rng, @Var int shuffleGroups, long n) {
     if (shuffleGroups > n) {
       // Can't have more shuffle groups than items
@@ -86,5 +87,5 @@
 
     // Calculate the (positive) rotation
-    long rotate = params[group];
+    @Var long rotate = params[group];
     if (inverse) {
       // Reverse the rotation
@@ -98,5 +99,5 @@
 
     long j = (i + shuffleGroups * rotate);
-    long result;
+    @Var long result;
     if (j < n) {
       result = j;
--- src/com/oltpbenchmark/benchmarks/tatp/procedures/UpdateSubscriberData.java
+++ src/com/oltpbenchmark/benchmarks/tatp/procedures/UpdateSubscriberData.java
@@ -18,12 +18,12 @@
 package com.oltpbenchmark.benchmarks.tatp.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
-
 public class UpdateSubscriberData extends Procedure {
 
@@ -37,8 +37,8 @@
 
     public long run(Connection conn, long s_id, byte bit_1, short data_a, byte sf_type) throws SQLException {
-    	PreparedStatement stmt = this.getPreparedStatement(conn, updateSubscriber);
+    	@Var PreparedStatement stmt = this.getPreparedStatement(conn, updateSubscriber);
     	stmt.setByte(1, bit_1);
     	stmt.setLong(2, s_id);
-    	int updated = stmt.executeUpdate();
+    	@Var int updated = stmt.executeUpdate();
     	assert(updated == 1);
     	
--- src/com/oltpbenchmark/benchmarks/seats/util/SEATSHistogramUtil.java
+++ src/com/oltpbenchmark/benchmarks/seats/util/SEATSHistogramUtil.java
@@ -18,4 +18,7 @@
 package com.oltpbenchmark.benchmarks.seats.util;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
+import com.oltpbenchmark.util.Histogram;
 import java.io.File;
 import java.util.Collection;
@@ -25,10 +28,6 @@
 import java.util.TreeMap;
 import java.util.regex.Pattern;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-import com.oltpbenchmark.util.Histogram;
-
 public abstract class SEATSHistogramUtil {
     private static final Logger LOG = Logger.getLogger(SEATSHistogramUtil.class);
@@ -41,5 +40,5 @@
 
     private static File getHistogramFile(File data_dir, String name) {
-        File file = new File(data_dir.getAbsolutePath() + File.separator + "histogram." + name.toLowerCase());
+        @Var File file = new File(data_dir.getAbsolutePath() + File.separator + "histogram." + name.toLowerCase());
         if (file.exists() == false) file = new File(file.getAbsolutePath() + ".gz");
         return (file);
@@ -77,5 +76,5 @@
         for (String value : values) {
             String split[] = pattern.split(value);
-            Histogram<String> src_h = m.get(split[0]);
+            @Var Histogram<String> src_h = m.get(split[0]);
             if (src_h == null) {
                 src_h = new Histogram<String>();
@@ -99,5 +98,5 @@
     public static synchronized Histogram<String> loadHistogram(String name, File data_path, boolean has_header) throws Exception {
         File file = getHistogramFile(data_path, name);
-        Histogram<String> histogram = cached_Histograms.get(file);
+        @Var Histogram<String> histogram = cached_Histograms.get(file);
         if (histogram == null) {
             histogram = new Histogram<String>();
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord8.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord8.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord8 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -40,5 +40,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/ThreadBench.java
+++ src/com/oltpbenchmark/ThreadBench.java
@@ -18,4 +18,13 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.LatencyRecord.Sample;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.TransactionType;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.types.State;
+import com.oltpbenchmark.util.Histogram;
+import com.oltpbenchmark.util.QueueLimitException;
+import com.oltpbenchmark.util.StringUtil;
 import java.io.File;
 import java.io.IOException;
@@ -29,17 +38,7 @@
 import java.util.NoSuchElementException;
 import java.util.Set;
-
 import org.apache.commons.collections15.map.ListOrderedMap;
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.LatencyRecord.Sample;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.TransactionType;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.types.State;
-import com.oltpbenchmark.util.Histogram;
-import com.oltpbenchmark.util.QueueLimitException;
-import com.oltpbenchmark.util.StringUtil;
-
 public class ThreadBench implements Thread.UncaughtExceptionHandler {
     private static final Logger LOG = Logger.getLogger(ThreadBench.class);
@@ -197,5 +196,5 @@
     private int finalizeWorkers(ArrayList<Thread> workerThreads) throws InterruptedException {
         assert testState.getState() == State.DONE || testState.getState() == State.EXIT;
-        int requests = 0;
+        @Var int requests = 0;
 
         new WatchDogThread().start();
@@ -273,5 +272,5 @@
                     return;
                 // Compute the last throughput
-                long measuredRequests = 0;
+                @Var long measuredRequests = 0;
                 synchronized (testState) {
                     for (Worker<?> w : workers) {
@@ -313,12 +312,12 @@
         // long measureStart = start;
 
-        long start = System.nanoTime();
+        @Var long start = System.nanoTime();
         long warmupStart = System.nanoTime();
-        long warmup = warmupStart;
-        long measureEnd = -1;
+        @Var long warmup = warmupStart;
+        @Var long measureEnd = -1;
         // used to determine the longest sleep interval
-        int lowestRate = Integer.MAX_VALUE;
+        @Var int lowestRate = Integer.MAX_VALUE;
 
-        Phase phase = null;
+        @Var Phase phase = null;
 
         for (WorkloadState workState : this.workStates) {
@@ -331,14 +330,14 @@
         }
 
-        long intervalNs = getInterval(lowestRate, phase.arrival);
+        @Var long intervalNs = getInterval(lowestRate, phase.arrival);
 
-        long nextInterval = start + intervalNs;
-        int nextToAdd = 1;
-        int rateFactor;
+        @Var long nextInterval = start + intervalNs;
+        @Var int nextToAdd = 1;
+        @Var int rateFactor;
 
-        boolean resetQueues = true;
+        @Var boolean resetQueues = true;
 
-        long delta = phase.time * 1000000000L;
-        boolean lastEntry = false;
+        @Var long delta = phase.time * 1000000000L;
+        @Var boolean lastEntry = false;
 
         // Initialize the Monitor
@@ -363,9 +362,9 @@
 
             // Wait until the interval expires, which may be "don't wait"
-            long now = System.nanoTime();
+            @Var long now = System.nanoTime();
             if (phase != null) {
                 warmup = warmupStart + phase.warmupTime * 1000000000L;
             }
-            long diff = nextInterval - now;
+            @Var long diff = nextInterval - now;
             while (diff > 0) { // this can wake early: sleep multiple times to
                                // avoid that
@@ -382,7 +381,7 @@
             assert diff <= 0;
 
-            boolean phaseComplete = false;
+            @Var boolean phaseComplete = false;
             if (phase != null) {
-                TraceReader tr = workConfs.get(0).getTraceReader();
+                @Var TraceReader tr = workConfs.get(0).getTraceReader();
                 if (tr != null) {
                     // If a trace script is present, the phase complete iff the
@@ -532,5 +531,5 @@
 
                 for (Entry<TransactionType, Histogram<String>> e : w.getTransactionAbortMessageHistogram().entrySet()) {
-                    Histogram<String> h = results.txnAbortMessages.get(e.getKey());
+                    @Var Histogram<String> h = results.txnAbortMessages.get(e.getKey());
                     if (h == null) {
                         h = new Histogram<String>(true);
--- src/com/oltpbenchmark/Results.java
+++ src/com/oltpbenchmark/Results.java
@@ -18,4 +18,10 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.LatencyRecord.Sample;
+import com.oltpbenchmark.ThreadBench.TimeBucketIterable;
+import com.oltpbenchmark.api.TransactionType;
+import com.oltpbenchmark.util.Histogram;
+import com.oltpbenchmark.util.StringUtil;
 import java.io.PrintStream;
 import java.util.ArrayList;
@@ -25,10 +31,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.LatencyRecord.Sample;
-import com.oltpbenchmark.ThreadBench.TimeBucketIterable;
-import com.oltpbenchmark.api.TransactionType;
-import com.oltpbenchmark.util.Histogram;
-import com.oltpbenchmark.util.StringUtil;
-
 public final class Results {
     public final long nanoSeconds;
@@ -43,5 +43,5 @@
     public final List<LatencyRecord.Sample> latencySamples;
 
-    public Results(long nanoSeconds, int measuredRequests, DistributionStatistics latencyDistribution, final List<LatencyRecord.Sample> latencySamples) {
+    public Results(long nanoSeconds, int measuredRequests, DistributionStatistics latencyDistribution, List<LatencyRecord.Sample> latencySamples) {
         this.nanoSeconds = nanoSeconds;
         this.measuredRequests = measuredRequests;
@@ -92,7 +92,7 @@
     public void writeCSV(int windowSizeSeconds, PrintStream out, TransactionType txType) {
         out.println("time(sec), throughput(req/sec), avg_lat(ms), min_lat(ms), 25th_lat(ms), median_lat(ms), 75th_lat(ms), 90th_lat(ms), 95th_lat(ms), 99th_lat(ms), max_lat(ms), tp (req/s) scaled");
-        int i = 0;
+        @Var int i = 0;
         for (DistributionStatistics s : new TimeBucketIterable(latencySamples, windowSizeSeconds, txType)) {
-            final double MILLISECONDS_FACTOR = 1e3;
+            double MILLISECONDS_FACTOR = 1e3;
             out.printf("%d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n", i * windowSizeSeconds, (double) s.getCount() / windowSizeSeconds, s.getAverage() / MILLISECONDS_FACTOR,
                     s.getMinimum() / MILLISECONDS_FACTOR, s.get25thPercentile() / MILLISECONDS_FACTOR, s.getMedian() / MILLISECONDS_FACTOR, s.get75thPercentile() / MILLISECONDS_FACTOR,
@@ -123,5 +123,5 @@
     	};
     	out.println(StringUtil.join(",", header));
-        int i = 0;
+        @Var int i = 0;
         for (DistributionStatistics s : new TimeBucketIterable(latencySamples, windowSizeSeconds, txType)) {
             out.printf("%d,%d,%.3f,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
--- src/com/oltpbenchmark/DistributionStatistics.java
+++ src/com/oltpbenchmark/DistributionStatistics.java
@@ -18,8 +18,8 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
 import java.util.Arrays;
 import java.util.LinkedHashMap;
 import java.util.Map;
-
 import org.apache.log4j.Logger;
 
@@ -75,5 +75,5 @@
 		Arrays.sort(values);
 
-		double sum = 0;
+		@Var double sum = 0;
 		for (int i = 0; i < values.length; ++i) {
 			sum += values[i];
@@ -81,10 +81,10 @@
 		double average = sum / values.length;
 
-		double sumDiffsSquared = 0;
+		@Var double sumDiffsSquared = 0;
 		for (int i = 0; i < values.length; ++i) {
 			double v = values[i] - average;
 			sumDiffsSquared += v * v;
 		}
-		double standardDeviation = 0;
+		@Var double standardDeviation = 0;
 		if (values.length > 1) {
 			standardDeviation = Math
@@ -97,5 +97,5 @@
 		long[] percentiles = new long[PERCENTILES.length];
 		for (int i = 0; i < percentiles.length; ++i) {
-			int index = (int) (PERCENTILES[i] * values.length);
+			@Var int index = (int) (PERCENTILES[i] * values.length);
 			if (index == values.length)
 				index = values.length - 1;
--- src/com/oltpbenchmark/benchmarks/chbenchmark/queries/Q15.java
+++ src/com/oltpbenchmark/benchmarks/chbenchmark/queries/Q15.java
@@ -17,9 +17,10 @@
 package com.oltpbenchmark.benchmarks.chbenchmark.queries;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.ResultSet;
-import java.sql.Statement;
 import java.sql.SQLException;
+import java.sql.Statement;
 
 public class Q15 extends GenericQuery {
@@ -64,5 +65,5 @@
         // query, then drop it once we're done.
         Statement stmt = conn.createStatement();
-        ResultSet ret = null;
+        @Var ResultSet ret = null;
         try {
             stmt.executeUpdate(createview_stmt.getSQL());
--- src/com/oltpbenchmark/benchmarks/seats/procedures/LoadConfig.java
+++ src/com/oltpbenchmark/benchmarks/seats/procedures/LoadConfig.java
@@ -17,13 +17,12 @@
 package com.oltpbenchmark.benchmarks.seats.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Procedure;
-
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-
 public class LoadConfig extends Procedure {
 
@@ -61,5 +60,5 @@
     public ResultSet[] run(Connection conn) throws SQLException {
         ResultSet results[] = new ResultSet[6];
-        int result_idx = 0;
+        @Var int result_idx = 0;
         
         results[result_idx++] = this.getPreparedStatement(conn, getConfigProfile).executeQuery();
--- src/com/oltpbenchmark/api/collectors/PostgresCollector.java
+++ src/com/oltpbenchmark/api/collectors/PostgresCollector.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.api.collectors;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.catalog.Catalog;
+import com.oltpbenchmark.util.JSONUtil;
 import java.sql.Connection;
 import java.sql.DriverManager;
@@ -25,10 +28,6 @@
 import java.util.List;
 import java.util.Map;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.catalog.Catalog;
-import com.oltpbenchmark.util.JSONUtil;
-
 public class PostgresCollector extends DBCollector {
     private static final Logger LOG = Logger.getLogger(PostgresCollector.class);
@@ -54,5 +53,5 @@
 
             // Collect DBMS version
-            ResultSet out = s.executeQuery(VERSION_SQL);
+            @Var ResultSet out = s.executeQuery(VERSION_SQL);
             if (out.next()) {
             	this.version.append(out.getString(1));
--- src/com/oltpbenchmark/benchmarks/tpch/procedures/Q16.java
+++ src/com/oltpbenchmark/benchmarks/tpch/procedures/Q16.java
@@ -17,9 +17,9 @@
 package com.oltpbenchmark.benchmarks.tpch.procedures;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.SQLStmt;
 import com.oltpbenchmark.benchmarks.tpch.util.TPCHConstants;
 import com.oltpbenchmark.benchmarks.tpch.util.TPCHUtil;
 import com.oltpbenchmark.util.RandomGenerator;
-
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -83,5 +83,5 @@
 
         for (int i = 0; i < 8; i++) {
-            int num = rand.number(1, 50);
+            @Var int num = rand.number(1, 50);
 
             while (seen.contains(num)) {
--- src/com/oltpbenchmark/benchmarks/hyadapt/HYADAPTBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/HYADAPTBenchmark.java
@@ -17,4 +17,12 @@
 package com.oltpbenchmark.benchmarks.hyadapt;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.hyadapt.procedures.ReadRecord1;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
 import java.io.IOException;
 import java.sql.Connection;
@@ -24,15 +32,6 @@
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.hyadapt.procedures.ReadRecord1;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-
 public class HYADAPTBenchmark extends BenchmarkModule {
     private static final Logger LOG = Logger.getLogger(HYADAPTBenchmark.class);
@@ -56,5 +55,5 @@
             Statement stmt = metaConn.createStatement();
             ResultSet res = stmt.executeQuery(userCount);
-            int init_record_count = 0;
+            @Var int init_record_count = 0;
             while (res.next()) {
                 init_record_count = res.getInt(1);
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/AuctionMarkUtil.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/AuctionMarkUtil.java
@@ -18,19 +18,18 @@
 package com.oltpbenchmark.benchmarks.auctionmark.util;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkProfile;
+import com.oltpbenchmark.util.FileUtil;
 import java.io.File;
 import java.io.IOException;
 import java.sql.Timestamp;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkProfile;
-import com.oltpbenchmark.util.FileUtil;
-
 public abstract class AuctionMarkUtil {
     private static final Logger LOG = Logger.getLogger(AuctionMarkUtil.class);
     
     public static File getDataDirectory() {
-        File dataDir = null;
+        @Var File dataDir = null;
         
         // If we weren't given a path, then we need to look for the tests directory and
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/LoaderItemInfo.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/LoaderItemInfo.java
@@ -18,11 +18,5 @@
 package com.oltpbenchmark.benchmarks.auctionmark.util;
 
-import java.lang.reflect.Field;
-import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.commons.collections15.map.ListOrderedMap;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemId;
 import com.oltpbenchmark.benchmarks.auctionmark.util.ItemInfo;
@@ -31,4 +25,9 @@
 import com.oltpbenchmark.util.Histogram;
 import com.oltpbenchmark.util.StringUtil;
+import java.lang.reflect.Field;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.commons.collections15.map.ListOrderedMap;
 
 public class LoaderItemInfo extends ItemInfo {
@@ -84,5 +83,5 @@
         for (Field f : hints_class.getDeclaredFields()) {
             String key = f.getName().toUpperCase();
-            Object val = null;
+            @Var Object val = null;
             try {
                 val = f.get(this);
@@ -121,5 +120,5 @@
             for (Field f : hints_class.getFields()) {
                 String key = f.getName().toUpperCase();
-                Object val = null;
+                @Var Object val = null;
                 try {
                     val = f.get(this);
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord4.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord4.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord4 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -36,5 +36,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/api/CreateDialects.java
+++ src/com/oltpbenchmark/api/CreateDialects.java
@@ -17,9 +17,5 @@
 package com.oltpbenchmark.api;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.catalog.Catalog;
 import com.oltpbenchmark.catalog.Column;
@@ -28,4 +24,7 @@
 import com.oltpbenchmark.util.SQLUtil;
 import com.oltpbenchmark.util.StringUtil;
+import java.util.ArrayList;
+import java.util.List;
+import org.apache.log4j.Logger;
 
 /**
@@ -75,5 +74,5 @@
         // INNER
         List<String> inner_rows = new ArrayList<String>();
-        StringBuilder inner;
+        @Var StringBuilder inner;
         
         // INNER -------------------------------------------------
@@ -121,5 +120,5 @@
         // INNER -------------------------------------------------
         
-        String prefix = SPACER;
+        @Var String prefix = SPACER;
         for (String s : inner_rows) {
             sb.append(prefix).append(s.trim());
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord9.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord9.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord9 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -41,5 +41,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/api/collectors/MySQLCollector.java
+++ src/com/oltpbenchmark/api/collectors/MySQLCollector.java
@@ -17,4 +17,6 @@
 package com.oltpbenchmark.api.collectors;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.catalog.Catalog;
 import java.sql.Connection;
 import java.sql.DriverManager;
@@ -22,9 +24,6 @@
 import java.sql.SQLException;
 import java.sql.Statement;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.catalog.Catalog;
-
 public class MySQLCollector extends DBCollector {
     private static final Logger LOG = Logger.getLogger(MySQLCollector.class);
@@ -43,5 +42,5 @@
 
             // Collect DBMS version
-            ResultSet out = s.executeQuery(VERSION_SQL);
+            @Var ResultSet out = s.executeQuery(VERSION_SQL);
             if (out.next()) {
             	this.version.append(out.getString(1));
--- src/com/oltpbenchmark/util/ScriptRunner.java
+++ src/com/oltpbenchmark/util/ScriptRunner.java
@@ -21,12 +21,12 @@
 package com.oltpbenchmark.util;
 
-import java.net.URL;
-import java.io.InputStreamReader;
+import com.google.errorprone.annotations.Var;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.io.LineNumberReader;
 import java.io.PrintWriter;
 import java.io.Reader;
+import java.net.URL;
 import java.sql.*;
-
 import org.apache.log4j.Logger;
 
@@ -128,8 +128,8 @@
 	private void runScript(Connection conn, Reader reader) throws IOException,
 			SQLException {
-		StringBuffer command = null;
+		@Var StringBuffer command = null;
 		try {
 			LineNumberReader lineReader = new LineNumberReader(reader);
-			String line = null;
+			@Var String line = null;
 			while ((line = lineReader.readLine()) != null) {
 			    if (LOG.isDebugEnabled()) LOG.debug(line);
@@ -157,6 +157,6 @@
 					// println(command);
 
-					boolean hasResults = false;
-					final String sql = command.toString().trim();
+					@Var boolean hasResults = false;
+					String sql = command.toString().trim();
 					if (stopOnError) {
                                 try {
--- src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/CPU1.java
+++ src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/CPU1.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.resourcestresser.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,14 +27,9 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
-
 public class CPU1 extends Procedure {
 
     public final SQLStmt cpuSelect;
     { 
-        String complexClause = "'passwd'";
+        @Var String complexClause = "'passwd'";
         for (int i = 1; i <= ResourceStresserWorker.CPU1_nestedLevel; ++i) {
             complexClause = "md5(concat(" + complexClause +",?))";
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord4.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord4.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord4 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -38,5 +38,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/linkbench/procedures/GetLink.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/procedures/GetLink.java
@@ -17,15 +17,14 @@
 package com.oltpbenchmark.benchmarks.linkbench.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.linkbench.pojo.Link;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.benchmarks.linkbench.pojo.Link;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class GetLink extends Procedure{
 
@@ -46,6 +45,6 @@
             LOG.debug("getLink : " + id1 + " " + link_type + " " + id2s);
         }
-        boolean first = true;
-        String ids = "";
+        @Var boolean first = true;
+        @Var String ids = "";
         for (long id2: id2s) {
             if (first) {
@@ -69,5 +68,5 @@
 
         Link results[] = new Link[count];
-        int i = 0;
+        @Var int i = 0;
         while (rs.next()) {
           Link l = createLinkFromRow(rs);
--- src/com/oltpbenchmark/benchmarks/tpch/procedures/Q7.java
+++ src/com/oltpbenchmark/benchmarks/tpch/procedures/Q7.java
@@ -17,9 +17,9 @@
 package com.oltpbenchmark.benchmarks.tpch.procedures;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.SQLStmt;
 import com.oltpbenchmark.benchmarks.tpch.util.TPCHConstants;
 import com.oltpbenchmark.benchmarks.tpch.util.TPCHUtil;
 import com.oltpbenchmark.util.RandomGenerator;
-
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -77,5 +77,5 @@
         // NATION2 is randomly selected within the list of values defined for N_NAME in Clause 4.2.3
         // and must be different from the value selected for NATION1 in item 1 above
-        String nation2 = nation1;
+        @Var String nation2 = nation1;
         while (nation2.equals(nation1)) {
             nation2 = TPCHUtil.choice(TPCHConstants.N_NAME, rand);
--- src/com/oltpbenchmark/benchmarks/linkbench/procedures/GetLinkList.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/procedures/GetLinkList.java
@@ -17,16 +17,15 @@
 package com.oltpbenchmark.benchmarks.linkbench.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
+import com.oltpbenchmark.benchmarks.linkbench.pojo.Link;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
-import com.oltpbenchmark.benchmarks.linkbench.pojo.Link;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class GetLinkList extends Procedure{
 
@@ -83,5 +82,5 @@
         // Fetch the link data
         Link links[] = new Link[count];
-        int i = 0;
+        @Var int i = 0;
         while (rs.next()) {
           Link l = createLinkFromRow(rs);
--- src/com/oltpbenchmark/benchmarks/tpch/TPCHLoader.java
+++ src/com/oltpbenchmark/benchmarks/tpch/TPCHLoader.java
@@ -27,4 +27,7 @@
 package com.oltpbenchmark.benchmarks.tpch;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Loader.LoaderThread;
 import java.io.BufferedReader;
 import java.io.File;
@@ -40,10 +43,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Loader.LoaderThread;
-
 public class TPCHLoader extends Loader<TPCHBenchmark> {
     private static final Logger LOG = Logger.getLogger(TPCHLoader.class);
@@ -353,7 +352,7 @@
         @Override
         public void run() {
-            BufferedReader br = null;
-            int recordsRead = 0;
-            long lastTimeMS = new java.util.Date().getTime();
+            @Var BufferedReader br = null;
+            @Var int recordsRead = 0;
+            @Var long lastTimeMS = new java.util.Date().getTime();
 
             try {
@@ -379,5 +378,5 @@
                                                  + format);
                     br = new BufferedReader(new FileReader(file));
-                    String line;
+                    @Var String line;
                     // The following pattern parses the lines by commas, except for
                     // ones surrounded by double-quotes. Further, strings that are
@@ -385,5 +384,5 @@
                     Pattern pattern = getFormatPattern(format);
                     int group = getFormatGroup(format);
-                    Matcher matcher;
+                    @Var Matcher matcher;
                     while ((line = br.readLine()) != null) {
                         matcher = pattern.matcher(line);
@@ -391,5 +390,5 @@
                             for (int i = 0; i < types.length; ++i) {
                                 matcher.find();
-                                String field = matcher.group(group);
+                                @Var String field = matcher.group(group);
 
                                 // Remove quotes that may surround a field.
@@ -427,5 +426,5 @@
                                         Matcher eurMatcher = eurFmt.matcher(field);
 
-                                        java.sql.Date fieldAsDate = null;
+                                        @Var java.sql.Date fieldAsDate = null;
                                         if (isoMatcher.find()) {
                                             fieldAsDate = new java.sql.Date(
@@ -497,5 +496,5 @@
                     LOG.debug("End " + tableName + " Load @ " + now);
 
-                } catch (SQLException se) {
+                } catch (@Var SQLException se) {
                     LOG.debug(se.getMessage());
                     se = se.getNextException();
--- src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchBenchmark.java
@@ -17,4 +17,12 @@
 package com.oltpbenchmark.benchmarks.linkbench;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
+import com.oltpbenchmark.benchmarks.linkbench.procedures.AddNode;
+import com.oltpbenchmark.benchmarks.linkbench.utils.ConfigUtil;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -28,16 +36,7 @@
 import java.util.Properties;
 import java.util.Random;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.linkbench.procedures.AddNode;
-import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
-import com.oltpbenchmark.benchmarks.linkbench.utils.ConfigUtil;
 
-
 public class LinkBenchBenchmark extends BenchmarkModule {
 
@@ -92,5 +91,5 @@
         }
 
-        SecureRandom masterRandom;
+        @Var SecureRandom masterRandom;
         try {
             masterRandom = SecureRandom.getInstance("SHA1PRNG");
--- src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/procedures/NewOrder.java
@@ -17,4 +17,10 @@
 package com.oltpbenchmark.benchmarks.tpcc.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,13 +28,6 @@
 import java.sql.SQLException;
 import java.util.Random;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
-
 public class NewOrder extends TPCCProcedure {
 
@@ -135,5 +134,5 @@
 		int[] supplierWarehouseIDs = new int[numItems];
 		int[] orderQuantities = new int[numItems];
-		int allLocal = 1;
+		@Var int allLocal = 1;
 		for (int i = 0; i < numItems; i++) {
 			itemIDs[i] = TPCCUtil.getItemID(gen);
@@ -170,9 +169,9 @@
 			int[] supplierWarehouseIDs, int[] orderQuantities, Connection conn, TPCCWorker w)
 			throws SQLException {
-		float c_discount, w_tax, d_tax = 0, i_price;
-		int d_next_o_id, o_id = -1, s_quantity;
-		String c_last = null, c_credit = null, i_name, i_data, s_data;
-		String s_dist_01, s_dist_02, s_dist_03, s_dist_04, s_dist_05;
-		String s_dist_06, s_dist_07, s_dist_08, s_dist_09, s_dist_10, ol_dist_info = null;
+		@Var float c_discount, w_tax, d_tax = 0, i_price;
+		@Var int d_next_o_id, o_id = -1, s_quantity;
+		@Var String c_last = null, c_credit = null, i_name, i_data, s_data;
+		@Var String s_dist_01, s_dist_02, s_dist_03, s_dist_04, s_dist_05;
+		@Var String s_dist_06, s_dist_07, s_dist_08, s_dist_09, s_dist_10, ol_dist_info = null;
 		float[] itemPrices = new float[o_ol_cnt];
 		float[] orderLineAmounts = new float[o_ol_cnt];
@@ -180,7 +179,7 @@
 		int[] stockQuantities = new int[o_ol_cnt];
 		char[] brandGeneric = new char[o_ol_cnt];
-		int ol_supply_w_id, ol_i_id, ol_quantity;
-		int s_remote_cnt_increment;
-		float ol_amount, total_amount = 0;
+		@Var int ol_supply_w_id, ol_i_id, ol_quantity;
+		@Var int s_remote_cnt_increment;
+		@Var float ol_amount, total_amount = 0;
 		
 		try {
@@ -188,5 +187,5 @@
 			stmtGetCust.setInt(2, d_id);
 			stmtGetCust.setInt(3, c_id);
-			ResultSet rs = stmtGetCust.executeQuery();
+			@Var ResultSet rs = stmtGetCust.executeQuery();
 			if (!rs.next())
 				throw new RuntimeException("C_D_ID=" + d_id
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord6.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord6.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord6 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -38,5 +38,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/tpcc/procedures/Payment.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/procedures/Payment.java
@@ -17,4 +17,11 @@
 package com.oltpbenchmark.benchmarks.tpcc.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
+import com.oltpbenchmark.benchmarks.tpcc.pojo.Customer;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,14 +30,6 @@
 import java.util.ArrayList;
 import java.util.Random;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
-import com.oltpbenchmark.benchmarks.tpcc.pojo.Customer;
-
 public class Payment extends TPCCProcedure {
 
@@ -140,9 +139,9 @@
 
         int districtID = TPCCUtil.randomNumber(terminalDistrictLowerID, terminalDistrictUpperID, gen);
-        int customerID = TPCCUtil.getCustomerID(gen);
+        @Var int customerID = TPCCUtil.getCustomerID(gen);
 
         int x = TPCCUtil.randomNumber(1, 100, gen);
         int customerDistrictID;
-        int customerWarehouseID;
+        @Var int customerWarehouseID;
         if (x <= 85) {
             customerDistrictID = districtID;
@@ -157,5 +156,5 @@
         long y = TPCCUtil.randomNumber(1, 100, gen);
         boolean customerByName;
-        String customerLastName = null;
+        @Var String customerLastName = null;
         customerID = -1;
         if (y <= 60) {
@@ -171,6 +170,6 @@
         float paymentAmount = (float) (TPCCUtil.randomNumber(100, 500000, gen) / 100.0);
 
-        String w_street_1, w_street_2, w_city, w_state, w_zip, w_name;
-        String d_street_1, d_street_2, d_city, d_state, d_zip, d_name;
+        @Var String w_street_1, w_street_2, w_city, w_state, w_zip, w_name;
+        @Var String d_street_1, d_street_2, d_city, d_state, d_zip, d_name;
 
         payUpdateWhse.setDouble(1, paymentAmount);
@@ -178,10 +177,10 @@
         // MySQL reports deadlocks due to lock upgrades:
         // t1: read w_id = x; t2: update w_id = x; t1 update w_id = x
-        int result = payUpdateWhse.executeUpdate();
+        @Var int result = payUpdateWhse.executeUpdate();
         if (result == 0)
             throw new RuntimeException("W_ID=" + w_id + " not found!");
 
         payGetWhse.setInt(1, w_id);
-        ResultSet rs = payGetWhse.executeQuery();
+        @Var ResultSet rs = payGetWhse.executeQuery();
         if (!rs.next())
             throw new RuntimeException("W_ID=" + w_id + " not found!");
@@ -228,5 +227,5 @@
         c.c_ytd_payment += paymentAmount;
         c.c_payment_cnt += 1;
-        String c_data = null;
+        @Var String c_data = null;
         if (c.c_credit.equals("BC")) { // bad credit
             payGetCustCdata.setInt(1, customerWarehouseID);
@@ -416,5 +415,5 @@
         // that
         // counts starting from 1.
-        int index = customers.size() / 2;
+        @Var int index = customers.size() / 2;
         if (customers.size() % 2 == 0) {
             index -= 1;
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord2.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord2.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord2 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -36,5 +36,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/epinions/EpinionsLoader.java
+++ src/com/oltpbenchmark/benchmarks/epinions/EpinionsLoader.java
@@ -17,4 +17,11 @@
 package com.oltpbenchmark.benchmarks.epinions;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.distributions.ScrambledZipfianGenerator;
+import com.oltpbenchmark.distributions.ZipfianGenerator;
+import com.oltpbenchmark.util.SQLUtil;
+import com.oltpbenchmark.util.TextGenerator;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -24,14 +31,6 @@
 import java.util.Random;
 import java.util.concurrent.CountDownLatch;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.distributions.ScrambledZipfianGenerator;
-import com.oltpbenchmark.distributions.ZipfianGenerator;
-import com.oltpbenchmark.util.SQLUtil;
-import com.oltpbenchmark.util.TextGenerator;
-
 public class EpinionsLoader extends Loader<EpinionsBenchmark> {
 
@@ -60,17 +59,17 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        final int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
-        final int numToLoad = this.num_items + this.num_users;
-        final int loadPerThread = Math.max(numToLoad / numLoaders, 1);
-        final int numUserThreads = (int) Math.ceil((double) this.num_users / loadPerThread);
-        final int numItemThreads = (int) Math.ceil((double) this.num_items / loadPerThread);
+        int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
+        int numToLoad = this.num_items + this.num_users;
+        int loadPerThread = Math.max(numToLoad / numLoaders, 1);
+        int numUserThreads = (int) Math.ceil((double) this.num_users / loadPerThread);
+        int numItemThreads = (int) Math.ceil((double) this.num_items / loadPerThread);
 
-        final CountDownLatch userLatch = new CountDownLatch(numUserThreads);
-        final CountDownLatch itemLatch = new CountDownLatch(numItemThreads);
+        CountDownLatch userLatch = new CountDownLatch(numUserThreads);
+        CountDownLatch itemLatch = new CountDownLatch(numItemThreads);
 
         // USERACCT
         for (int i = 0; i < numUserThreads; i++) {
-            final int lo = i * loadPerThread;
-            final int hi = Math.min(this.num_users, (i + 1) * loadPerThread);
+            int lo = i * loadPerThread;
+            int hi = Math.min(this.num_users, (i + 1) * loadPerThread);
 
             threads.add(new LoaderThread() {
@@ -85,6 +84,6 @@
         // ITEM
         for (int i = 0; i < numItemThreads; i++) {
-            final int lo = i * loadPerThread;
-            final int hi = Math.min(this.num_items, (i + 1) * loadPerThread);
+            int lo = i * loadPerThread;
+            int hi = Math.min(this.num_items, (i + 1) * loadPerThread);
 
             threads.add(new LoaderThread() {
@@ -142,6 +141,6 @@
 
         //
-        int total = 0;
-        int batch = 0;
+        @Var int total = 0;
+        @Var int batch = 0;
         for (int i = lo; i < hi; i++) {
             String name = TextGenerator.randomStr(rng(), EpinionsConstants.NAME_LENGTH);
@@ -180,6 +179,6 @@
         PreparedStatement itemInsert = conn.prepareStatement(sql);
 
-        int total = 0;
-        int batch = 0;
+        @Var int total = 0;
+        @Var int batch = 0;
         for (int i = lo; i < hi; i++) {
             String title = TextGenerator.randomStr(rng(), EpinionsConstants.TITLE_LENGTH);
@@ -225,9 +224,9 @@
         ZipfianGenerator numReviews = new ZipfianGenerator(num_reviews, 1.8);
         ZipfianGenerator reviewer = new ZipfianGenerator(num_users);
-        int total = 0;
-        int batch = 0;
+        @Var int total = 0;
+        @Var int batch = 0;
         for (int i = 0; i < num_items; i++) {
             List<Integer> reviewers = new ArrayList<Integer>();
-            int review_count = numReviews.nextInt();
+            @Var int review_count = numReviews.nextInt();
             if (review_count == 0)
                 review_count = 1; // make sure at least each item has a review
@@ -283,6 +282,6 @@
         
         //
-        int total = 0;
-        int batch = 0;
+        @Var int total = 0;
+        @Var int batch = 0;
         ZipfianGenerator numTrust = new ZipfianGenerator(num_trust, 1.95);
         ScrambledZipfianGenerator reviewed = new ScrambledZipfianGenerator(num_users);
--- src/com/oltpbenchmark/util/TextGenerator.java
+++ src/com/oltpbenchmark/util/TextGenerator.java
@@ -17,4 +17,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.util.Arrays;
 import java.util.Random;
@@ -79,5 +80,5 @@
         
         int num_rounds = chars.length / FAST_MASKS.length;
-        int i = 0;
+        @Var int i = 0;
         for (int ctr = 0; ctr < num_rounds; ctr++) {
             int rand = rng.nextInt(10000); // CHAR_SYMBOLS.length);
@@ -146,5 +147,5 @@
     public static char[] permuteText(Random rng, char chars[]) {
         // We will try to be fast about this and permute the text by blocks
-        int idx = 0;
+        @Var int idx = 0;
         int blockSize = chars.length / 32;
         
@@ -152,5 +153,5 @@
         // Hopefully this is faster than having to generate a bunch of random
         // integers
-        int rand = rng.nextInt();
+        @Var int rand = rng.nextInt();
         // If the number is zero, then flip one bit so that we make sure that 
         // we change at least one block
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord9.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord9.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord9 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -43,5 +43,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/epinions/procedures/GetItemReviewsByTrustedUser.java
+++ src/com/oltpbenchmark/benchmarks/epinions/procedures/GetItemReviewsByTrustedUser.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.epinions.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class GetItemReviewsByTrustedUser extends Procedure {
 
@@ -37,7 +37,7 @@
     
     public void run(Connection conn, long iid, long uid) throws SQLException {
-        PreparedStatement stmt = this.getPreparedStatement(conn, getReview);
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, getReview);
         stmt.setLong(1, iid);
-        ResultSet r= stmt.executeQuery();
+        @Var ResultSet r= stmt.executeQuery();
         while (r.next()) {
             continue;
--- src/com/oltpbenchmark/benchmarks/tatp/procedures/InsertCallForwarding.java
+++ src/com/oltpbenchmark/benchmarks/tatp/procedures/InsertCallForwarding.java
@@ -18,4 +18,8 @@
 package com.oltpbenchmark.benchmarks.tatp.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
-
 public class InsertCallForwarding extends Procedure {
 
@@ -42,9 +42,9 @@
      
     public long run(Connection conn, String sub_nbr, byte sf_type, byte start_time, byte end_time, String numberx) throws SQLException {
-        PreparedStatement stmt = this.getPreparedStatement(conn, getSubscriber);
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, getSubscriber);
         stmt.setString(1, sub_nbr);
         ResultSet results = stmt.executeQuery();
         assert(results != null);
-        long s_id=-1;
+        @Var long s_id=-1;
         if(results.next())
         {
@@ -66,5 +66,5 @@
         stmt.setByte(4, end_time);
         stmt.setString(5, numberx);
-        int rows_updated = -1;
+        @Var int rows_updated = -1;
         
         try {
--- src/com/oltpbenchmark/util/JSONUtil.java
+++ src/com/oltpbenchmark/util/JSONUtil.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.util.json.JSONArray;
+import com.oltpbenchmark.util.json.JSONException;
+import com.oltpbenchmark.util.json.JSONObject;
+import com.oltpbenchmark.util.json.JSONStringer;
 import java.io.File;
 import java.io.IOException;
@@ -32,12 +37,6 @@
 import java.util.Set;
 import java.util.Stack;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.util.json.JSONArray;
-import com.oltpbenchmark.util.json.JSONException;
-import com.oltpbenchmark.util.json.JSONObject;
-import com.oltpbenchmark.util.json.JSONStringer;
-
 /**
  * @author pavlo
@@ -55,5 +54,5 @@
      */
     public static Field[] getSerializableFields(Class<?> clazz, String...fieldsToExclude) {
-        Field ret[] = SERIALIZABLE_FIELDS.get(clazz);
+        @Var Field ret[] = SERIALIZABLE_FIELDS.get(clazz);
         if (ret == null) {
             Collection<String> exclude = CollectionUtil.addAll(new HashSet<String>(), fieldsToExclude);
@@ -286,5 +285,5 @@
             for (Entry<?, ?> e : ((Map<?, ?>)field_value).entrySet()) {
                 // We can handle null keys
-                String key_value = null;
+                @Var String key_value = null;
                 if (e.getKey() != null) {
                     // deserialize it on the other side
@@ -320,5 +319,5 @@
      */
     @SuppressWarnings("unchecked")
-    protected static void readMapField(final JSONObject json_object, final Map map, final Stack<Class> inner_classes) throws Exception {
+    protected static void readMapField(JSONObject json_object, Map map, Stack<Class> inner_classes) throws Exception {
         Class<?> key_class = inner_classes.pop();
         Class<?> val_class = inner_classes.pop();
@@ -327,5 +326,5 @@
         assert(json_object != null);
         for (String json_key : CollectionUtil.iterable(json_object.keys())) {
-            final Stack<Class> next_inner_classes = new Stack<Class>();
+            Stack<Class> next_inner_classes = new Stack<Class>();
             next_inner_classes.addAll(inner_classes);
             assert(next_inner_classes.equals(inner_classes));
@@ -335,5 +334,5 @@
             
             // VALUE
-            Object object = null;
+            @Var Object object = null;
             if (json_object.isNull(json_key)) {
                 // Nothing...
@@ -370,5 +369,5 @@
      */
     @SuppressWarnings("unchecked")
-    protected static void readCollectionField(final JSONArray json_array, final Collection collection, final Stack<Class> inner_classes) throws Exception {
+    protected static void readCollectionField(JSONArray json_array, Collection collection, Stack<Class> inner_classes) throws Exception {
         // We need to figure out what the inner type of the collection is
         // If it's a Collection or a Map, then we need to instantiate it before 
@@ -378,8 +377,8 @@
         
         for (int i = 0, cnt = json_array.length(); i < cnt; i++) {
-            final Stack<Class> next_inner_classes = new Stack<Class>();
+            Stack<Class> next_inner_classes = new Stack<Class>();
             next_inner_classes.addAll(inner_classes);
             assert(next_inner_classes.equals(inner_classes));
-            Object value = null;
+            @Var Object value = null;
             
             // Null
@@ -418,7 +417,7 @@
      */
     @SuppressWarnings("unchecked")
-    public static void readFieldValue(final JSONObject json_object, final String json_key, Field field_handle, Object object) throws Exception {
+    public static void readFieldValue(JSONObject json_object, String json_key, Field field_handle, Object object) throws Exception {
         assert(json_object.has(json_key)) : "No entry exists for '" + json_key + "'";
-        Class<?> field_class = field_handle.getType();
+        @Var Class<?> field_class = field_handle.getType();
         Object field_object = field_handle.get(object);
         // String field_name = field_handle.getName();
@@ -548,5 +547,5 @@
      */
     private static Class<?> getClassForField(JSONObject json_object, String json_key) throws JSONException {
-        Class<?> field_class = null;
+        @Var Class<?> field_class = null;
         // Check whether we also stored the class
         if (json_object.has(json_key + JSON_CLASS_SUFFIX)) {
@@ -570,5 +569,5 @@
      */
     private static Object makePrimitiveValue(Class<?> field_class, Object field_value) {
-        Object value = null;
+        @Var Object value = null;
         
         // Class
@@ -597,5 +596,5 @@
      */
     public static Object getPrimitiveValue(String json_value, Class<?> field_class) throws Exception {
-        Object value = null;
+        @Var Object value = null;
 
         // Class
@@ -641,5 +640,5 @@
     
     public static Class<?> getPrimitiveType(String json_value) {
-        Object value = null;
+        @Var Object value = null;
         
         // Class
--- src/com/oltpbenchmark/benchmarks/linkbench/distributions/GeometricDistribution.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/distributions/GeometricDistribution.java
@@ -16,12 +16,11 @@
 package com.oltpbenchmark.benchmarks.linkbench.distributions;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
+import com.oltpbenchmark.benchmarks.linkbench.utils.ConfigUtil;
 import java.util.Properties;
 import java.util.Random;
-
 import org.apache.commons.math3.util.FastMath;
 
-import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
-import com.oltpbenchmark.benchmarks.linkbench.utils.ConfigUtil;
-
 /**
  * Geometric distribution
@@ -47,5 +46,5 @@
     double parsedP = ConfigUtil.getDouble(props, keyPrefix + PROB_PARAM_KEY);
 
-    double scaleVal = 1.0;;
+    @Var double scaleVal = 1.0;;
     if (props.containsKey(LinkBenchConstants.PROB_MEAN)) {
       scaleVal = (max - min) * ConfigUtil.getDouble(props,
--- src/com/oltpbenchmark/benchmarks/tpcc/procedures/StockLevel.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/procedures/StockLevel.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.tpcc.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,12 +27,6 @@
 import java.sql.SQLException;
 import java.util.Random;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
-
 public class StockLevel extends TPCCProcedure {
 
@@ -68,12 +67,12 @@
 	     int d_id = TPCCUtil.randomNumber(terminalDistrictLowerID,terminalDistrictUpperID, gen);
 
-	     int o_id = 0;
+	     @Var int o_id = 0;
 	     // XXX int i_id = 0;
-	     int stock_count = 0;
+	     @Var int stock_count = 0;
 
 	     stockGetDistOrderId.setInt(1, w_id);
          stockGetDistOrderId.setInt(2, d_id);
          if (trace) LOG.trace(String.format("stockGetDistOrderId BEGIN [W_ID=%d, D_ID=%d]", w_id, d_id));
-         ResultSet rs = stockGetDistOrderId.executeQuery();
+         @Var ResultSet rs = stockGetDistOrderId.executeQuery();
          if (trace) LOG.trace("stockGetDistOrderId END");
 
--- src/com/oltpbenchmark/benchmarks/linkbench/distributions/ID2Chooser.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/distributions/ID2Chooser.java
@@ -16,13 +16,12 @@
 package com.oltpbenchmark.benchmarks.linkbench.distributions;
 
-import java.util.Properties;
-import java.util.Random;
-
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
 import com.oltpbenchmark.benchmarks.linkbench.distributions.LinkDistributions.LinkDistribution;
 import com.oltpbenchmark.benchmarks.linkbench.distributions.RealDistribution.DistributionType;
-import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
-import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
 import com.oltpbenchmark.benchmarks.linkbench.utils.ConfigUtil;
 import com.oltpbenchmark.benchmarks.linkbench.utils.InvertibleShuffler;
+import java.util.Properties;
+import java.util.Random;
 
 
@@ -128,5 +127,5 @@
       // Range is smaller than required # of ids, fill in all from range
       for (int i = 0; i < nid2s; i++) {
-        long id2 = id1 + i;
+        @Var long id2 = id1 + i;
         if (id2gen_config == 1) {
           id2 = fixId2(id2, nrequesters, requesterID, randomid2max);
@@ -136,6 +135,6 @@
     } else {
       for (int i = 0; i < nid2s; i++) {
-        long id2;
-        int iters = 0; // avoid long or infinite loop
+        @Var long id2;
+        @Var int iters = 0; // avoid long or infinite loop
         do {
           // Find a unique id2
@@ -168,5 +167,5 @@
 
   private long calcID2Range(double pExisting, long nlinks) {
-    long range = (long) Math.ceil((1/pExisting) * nlinks);
+    @Var long range = (long) Math.ceil((1/pExisting) * nlinks);
     range = Math.max(1, range);// Ensure non-empty range
     return range;
@@ -231,5 +230,5 @@
                              long requesterID, long randomid2max) {
 
-    long newid2 = id2 - (id2 % nrequesters) + requesterID;
+    @Var long newid2 = id2 - (id2 % nrequesters) + requesterID;
     if ((newid2 > randomid2max) && (randomid2max > 0)) newid2 -= nrequesters;
     return newid2;
--- src/com/oltpbenchmark/benchmarks/wikipedia/procedures/RemoveWatchList.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/procedures/RemoveWatchList.java
@@ -18,12 +18,12 @@
 package com.oltpbenchmark.benchmarks.wikipedia.procedures;
 
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure;
 import com.oltpbenchmark.api.SQLStmt;
 import com.oltpbenchmark.benchmarks.wikipedia.WikipediaConstants;
 import com.oltpbenchmark.util.TimeUtil;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
 
 public class RemoveWatchList extends Procedure {
@@ -42,5 +42,5 @@
 
         if (userId > 0) {
-            PreparedStatement ps = this.getPreparedStatement(conn, removeWatchList);
+            @Var PreparedStatement ps = this.getPreparedStatement(conn, removeWatchList);
             ps.setInt(1, userId);
             ps.setInt(2, nameSpace);
--- src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkLoader.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/AuctionMarkLoader.java
@@ -17,4 +17,24 @@
 package com.oltpbenchmark.benchmarks.auctionmark;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.benchmarks.auctionmark.util.Category;
+import com.oltpbenchmark.benchmarks.auctionmark.util.CategoryParser;
+import com.oltpbenchmark.benchmarks.auctionmark.util.GlobalAttributeGroupId;
+import com.oltpbenchmark.benchmarks.auctionmark.util.GlobalAttributeValueId;
+import com.oltpbenchmark.benchmarks.auctionmark.util.ItemId;
+import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
+import com.oltpbenchmark.benchmarks.auctionmark.util.LoaderItemInfo;
+import com.oltpbenchmark.benchmarks.auctionmark.util.UserId;
+import com.oltpbenchmark.benchmarks.auctionmark.util.UserIdGenerator;
+import com.oltpbenchmark.catalog.Column;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.CollectionUtil;
+import com.oltpbenchmark.util.CompositeId;
+import com.oltpbenchmark.util.Histogram;
+import com.oltpbenchmark.util.Pair;
+import com.oltpbenchmark.util.RandomDistribution.Flat;
+import com.oltpbenchmark.util.RandomDistribution.Zipf;
+import com.oltpbenchmark.util.SQLUtil;
 import java.io.File;
 import java.lang.reflect.Field;
@@ -37,29 +57,8 @@
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
-
 import org.apache.commons.collections15.CollectionUtils;
 import org.apache.commons.collections15.map.ListOrderedMap;
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.benchmarks.auctionmark.util.Category;
-import com.oltpbenchmark.benchmarks.auctionmark.util.CategoryParser;
-import com.oltpbenchmark.benchmarks.auctionmark.util.GlobalAttributeGroupId;
-import com.oltpbenchmark.benchmarks.auctionmark.util.GlobalAttributeValueId;
-import com.oltpbenchmark.benchmarks.auctionmark.util.ItemId;
-import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
-import com.oltpbenchmark.benchmarks.auctionmark.util.LoaderItemInfo;
-import com.oltpbenchmark.benchmarks.auctionmark.util.UserId;
-import com.oltpbenchmark.benchmarks.auctionmark.util.UserIdGenerator;
-import com.oltpbenchmark.catalog.Column;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.CollectionUtil;
-import com.oltpbenchmark.util.CompositeId;
-import com.oltpbenchmark.util.Histogram;
-import com.oltpbenchmark.util.Pair;
-import com.oltpbenchmark.util.RandomDistribution.Flat;
-import com.oltpbenchmark.util.RandomDistribution.Zipf;
-import com.oltpbenchmark.util.SQLUtil;
-
 /**
  * @author pavlo
@@ -180,5 +179,5 @@
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
 
-        final CountDownLatch loadLatch = new CountDownLatch(this.generators.size());
+        CountDownLatch loadLatch = new CountDownLatch(this.generators.size());
 
         for (AbstractTableGenerator generator : this.generators.values()) {
@@ -222,14 +221,14 @@
     protected void generateTableData(Connection conn, String tableName) throws SQLException {
         LOG.info("*** START " + tableName);
-        final AbstractTableGenerator generator = this.generators.get(tableName);
+        AbstractTableGenerator generator = this.generators.get(tableName);
         assert (generator != null);
 
         // Generate Data
-        final Table catalog_tbl = benchmark.getCatalog().getTable(tableName);
+        Table catalog_tbl = benchmark.getCatalog().getTable(tableName);
         assert(catalog_tbl != null) : tableName;
-        final List<Object[]> volt_table = generator.getVoltTable();
-        final String sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
-        final PreparedStatement stmt = conn.prepareStatement(sql);
-        final int types[] = catalog_tbl.getColumnTypes();
+        List<Object[]> volt_table = generator.getVoltTable();
+        String sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
+        PreparedStatement stmt = conn.prepareStatement(sql);
+        int types[] = catalog_tbl.getColumnTypes();
         
         while (generator.hasMore()) {
@@ -259,5 +258,5 @@
                 conn.commit();
                 stmt.clearBatch();
-            } catch (SQLException ex) {
+            } catch (@Var SQLException ex) {
                 if (ex.getNextException() != null) ex = ex.getNextException();
                 LOG.warn(tableName + " - " + ex.getMessage());
@@ -337,5 +336,5 @@
             CollectionUtil.addAll(this.dependencyTables, dependencies);
             
-            String field_name = "BATCHSIZE_" + catalog_tbl.getName();
+            @Var String field_name = "BATCHSIZE_" + catalog_tbl.getName();
             try {
                 Field field_handle = AuctionMarkConstants.class.getField(field_name);
@@ -464,5 +463,5 @@
         
         protected int populateRandomColumns(Object row[]) {
-            int cols = 0;
+            @Var int cols = 0;
             
             // STRINGS
@@ -539,5 +538,5 @@
             
             // Main Columns
-            int cols = this.populateRow(row);
+            @Var int cols = this.populateRow(row);
             
             // RANDOM COLS
@@ -563,5 +562,5 @@
         public void generateBatch() {
             if (LOG.isTraceEnabled()) LOG.trace(String.format("%s: Generating new batch", this.getTableName()));
-            long batch_count = 0;
+            @Var long batch_count = 0;
             this.table.clear();
             while (this.hasMore() && this.table.size() < this.batchSize) {
@@ -697,5 +696,5 @@
         @Override
         protected int populateRow(Object[] row) {
-            int col = 0;
+            @Var int col = 0;
 
             // R_ID
@@ -741,5 +740,5 @@
         @Override
         protected int populateRow(Object[] row) {
-            int col = 0;
+            @Var int col = 0;
 
             Category category = this.categories.poll();
@@ -792,5 +791,5 @@
         @Override
         protected int populateRow(Object[] row) {
-            int col = 0;
+            @Var int col = 0;
 
             GlobalAttributeGroupId gag_id = this.group_ids.poll();
@@ -838,5 +837,5 @@
         @Override
         protected int populateRow(Object[] row) {
-            int col = 0;
+            @Var int col = 0;
             
             if (this.gav_counter == -1 || ++this.gav_counter == this.gag_current.getCount()) {
@@ -910,5 +909,5 @@
         @Override
         protected int populateRow(Object[] row) {
-            int col = 0;
+            @Var int col = 0;
 
             UserId u_id = this.idGenerator.next();
@@ -954,5 +953,5 @@
         @Override
         protected int populateRow(UserId user_id, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             
             // UA_ID
@@ -1004,5 +1003,5 @@
         @Override
         protected int populateRow(UserId seller_id, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             
             ItemId itemId = new ItemId(seller_id, remaining);
@@ -1013,5 +1012,5 @@
             
             long bidDurationDay = ((endDate.getTime() - startDate.getTime()) / AuctionMarkConstants.MILLISECONDS_IN_A_DAY);
-            Pair<Zipf, Zipf> p = this.item_bid_watch_zipfs.get(bidDurationDay);
+            @Var Pair<Zipf, Zipf> p = this.item_bid_watch_zipfs.get(bidDurationDay);
             if (p == null) {
                 Zipf randomNumBids = new Zipf(profile.rng,
@@ -1143,5 +1142,5 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
 
             // II_ID
@@ -1172,5 +1171,5 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             GlobalAttributeValueId gav_id = profile.getRandomGlobalAttributeValue();
             assert(gav_id != null);
@@ -1206,5 +1205,5 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
 
             // IC_ID
@@ -1257,8 +1256,8 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             assert(itemInfo.numBids > 0);
             
-            UserId bidderId = null;
+            @Var UserId bidderId = null;
             
             // Figure out the UserId for the person bidding on this item now
@@ -1359,5 +1358,5 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             LoaderItemInfo.Bid bid = itemInfo.getLastBid();
             assert(bid != null) : "No bids?\n" + itemInfo;
@@ -1397,5 +1396,5 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             LoaderItemInfo.Bid bid = itemInfo.getLastBid();
             assert(bid != null) : itemInfo;
@@ -1440,7 +1439,7 @@
         @Override
         protected int populateRow(LoaderItemInfo.Bid bid, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
 
-            boolean is_buyer = false;
+            @Var boolean is_buyer = false;
             if (remaining == 1 || (bid.buyer_feedback && bid.seller_feedback == false)) {
                 is_buyer = true;
@@ -1483,5 +1482,5 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             LoaderItemInfo.Bid bid = itemInfo.getLastBid();
             assert(bid != null) : itemInfo;
@@ -1525,11 +1524,11 @@
         @Override
         protected int populateRow(LoaderItemInfo itemInfo, Object[] row, short remaining) {
-            int col = 0;
+            @Var int col = 0;
             
             // Make it more likely that a user that has bid on an item is watching it
             Histogram<UserId> bidderHistogram = itemInfo.getBidderHistogram();
-            UserId buyerId = null;
+            @Var UserId buyerId = null;
             int num_watchers = this.watchers.size();
-            boolean use_random = (num_watchers == bidderHistogram.getValueCount());
+            @Var boolean use_random = (num_watchers == bidderHistogram.getValueCount());
             long num_users = tableSizes.get(AuctionMarkConstants.TABLENAME_USERACCT);
             
@@ -1537,5 +1536,5 @@
                 LOG.trace(String.format("Selecting USER_WATCH buyerId [useRandom=%s, watchers=%d]",
                                         use_random, this.watchers.size()));
-            int tries = 1000;
+            @Var int tries = 1000;
             while (buyerId == null && num_watchers < num_users && tries-- > 0) {
                 try {
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord5.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord5.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord5 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -39,5 +39,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/linkbench/procedures/CountLink.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/procedures/CountLink.java
@@ -17,14 +17,13 @@
 package com.oltpbenchmark.benchmarks.linkbench.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class CountLink extends Procedure{
     
@@ -38,5 +37,5 @@
     
     public long run(Connection conn, long id1, long link_type) throws SQLException {
-        long count = 0;
+        @Var long count = 0;
         
         if(stmt == null)
@@ -46,5 +45,5 @@
         stmt.setLong(2, link_type);   
         ResultSet rs = stmt.executeQuery();
-        boolean found = false;
+        @Var boolean found = false;
 
         while (rs.next()) {
--- src/com/oltpbenchmark/benchmarks/seats/SEATSProfile.java
+++ src/com/oltpbenchmark/benchmarks/seats/SEATSProfile.java
@@ -17,4 +17,17 @@
 package com.oltpbenchmark.benchmarks.seats;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.benchmarks.seats.procedures.LoadConfig;
+import com.oltpbenchmark.benchmarks.seats.util.CustomerId;
+import com.oltpbenchmark.benchmarks.seats.util.FlightId;
+import com.oltpbenchmark.catalog.Catalog;
+import com.oltpbenchmark.catalog.Column;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.Histogram;
+import com.oltpbenchmark.util.JSONUtil;
+import com.oltpbenchmark.util.RandomDistribution.FlatHistogram;
+import com.oltpbenchmark.util.RandomGenerator;
+import com.oltpbenchmark.util.SQLUtil;
+import com.oltpbenchmark.util.StringUtil;
 import java.io.File;
 import java.sql.Connection;
@@ -28,21 +41,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
-
 import org.apache.commons.collections15.map.ListOrderedMap;
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.benchmarks.seats.procedures.LoadConfig;
-import com.oltpbenchmark.benchmarks.seats.util.CustomerId;
-import com.oltpbenchmark.benchmarks.seats.util.FlightId;
-import com.oltpbenchmark.catalog.Catalog;
-import com.oltpbenchmark.catalog.Column;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.Histogram;
-import com.oltpbenchmark.util.JSONUtil;
-import com.oltpbenchmark.util.RandomDistribution.FlatHistogram;
-import com.oltpbenchmark.util.RandomGenerator;
-import com.oltpbenchmark.util.SQLUtil;
-import com.oltpbenchmark.util.StringUtil;
-
 public class SEATSProfile {
     private static final Logger LOG = Logger.getLogger(SEATSProfile.class);
@@ -211,13 +210,13 @@
      */
     protected final void saveProfile(Connection conn) throws SQLException {
-        PreparedStatement stmt = null;
-        String sql;
+        @Var PreparedStatement stmt = null;
+        @Var String sql;
 
         // CONFIG_PROFILE
-        Table catalog_tbl = this.catalog.getTable(SEATSConstants.TABLENAME_CONFIG_PROFILE);
+        @Var Table catalog_tbl = this.catalog.getTable(SEATSConstants.TABLENAME_CONFIG_PROFILE);
         assert (catalog_tbl != null);
         sql = SQLUtil.getInsertSQL(catalog_tbl, this.benchmark.getWorkloadConfiguration().getDBType());
         stmt = conn.prepareStatement(sql);
-        int param_idx = 1;
+        @Var int param_idx = 1;
         stmt.setObject(param_idx++, this.scale_factor); // CFP_SCALE_FACTOR
         stmt.setObject(param_idx++, this.airport_max_customer_id.toJSONString()); // CFP_AIPORT_MAX_CUSTOMER
@@ -230,5 +229,5 @@
         stmt.setObject(param_idx++, this.num_reservations); // CFP_NUM_RESERVATIONS
         stmt.setObject(param_idx++, JSONUtil.toJSONString(this.code_id_xref)); // CFP_CODE_ID_XREF
-        int result = stmt.executeUpdate();
+        @Var int result = stmt.executeUpdate();
         conn.commit();
         stmt.close();
@@ -315,5 +314,5 @@
             LoadConfig proc = worker.getProcedure(LoadConfig.class);
             ResultSet results[] = proc.run(worker.getConnection());
-            int result_idx = 0;
+            @Var int result_idx = 0;
 
             // CONFIG_PROFILE
@@ -351,5 +350,5 @@
         boolean adv = vt.next();
         assert (adv);
-        int col = 1;
+        @Var int col = 1;
         this.scale_factor = vt.getDouble(col++);
         JSONUtil.fromJSONString(this.airport_max_customer_id, vt.getString(col++));
@@ -368,5 +367,5 @@
     private final void loadConfigHistograms(ResultSet vt) throws SQLException {
         while (vt.next()) {
-            int col = 1;
+            @Var int col = 1;
             String name = vt.getString(col++);
             Histogram<String> h = JSONUtil.fromJSONString(new Histogram<String>(), vt.getString(col++));
@@ -393,5 +392,5 @@
         Map<String, Long> m = this.code_id_xref.get(idCol);
         while (vt.next()) {
-            int col = 1;
+            @Var int col = 1;
             long id = vt.getLong(col++);
             String code = vt.getString(col++);
@@ -404,7 +403,7 @@
 
     private final void loadCachedFlights(ResultSet vt) throws SQLException {
-        int limit = 1;
+        @Var int limit = 1;
         while (vt.next() && limit++ < SEATSConstants.CACHE_LIMIT_FLIGHT_IDS) {
-            int col = 1;
+            @Var int col = 1;
             long f_id = vt.getLong(col++);
             FlightId flight_id = new FlightId(f_id);
@@ -460,5 +459,5 @@
      */
     public boolean addFlightId(FlightId flight_id) {
-        boolean added = false;
+        @Var boolean added = false;
         synchronized (this.cached_flight_ids) {
             // If we have room, shove it right in
@@ -532,5 +531,5 @@
     public long getRandomOtherAirport(long airport_id) {
         String code = this.getAirportCode(airport_id);
-        FlatHistogram<String> f = this.airport_distributions.get(code);
+        @Var FlatHistogram<String> f = this.airport_distributions.get(code);
         if (f == null) {
             synchronized (this.airport_distributions) {
@@ -574,5 +573,5 @@
             LOG.trace(String.format("Selecting a random airport with customers [numAirports=%d]", num_airports));
         }
-        CustomerId c_id = null;
+        @Var CustomerId c_id = null;
         while (c_id == null) {
             Long airport_id = (long) this.rng.number(1, num_airports);
--- src/com/oltpbenchmark/benchmarks/seats/SEATSWorker.java
+++ src/com/oltpbenchmark/benchmarks/seats/SEATSWorker.java
@@ -41,11 +41,5 @@
 package com.oltpbenchmark.benchmarks.seats;
 
-import java.sql.Timestamp;
-import java.sql.SQLException;
-import java.util.*;
-
-import org.apache.commons.collections15.map.ListOrderedMap;
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure;
 import com.oltpbenchmark.api.Procedure.UserAbortException;
@@ -63,4 +57,9 @@
 import com.oltpbenchmark.util.RandomGenerator;
 import com.oltpbenchmark.util.StringUtil;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+import java.util.*;
+import org.apache.commons.collections15.map.ListOrderedMap;
+import org.apache.log4j.Logger;
 
 public class SEATSWorker extends Worker<SEATSBenchmark> {
@@ -147,5 +146,5 @@
     
     protected BitSet getSeatsBitSet(FlightId flight_id) {
-        BitSet seats = CACHE_BOOKED_SEATS.get(flight_id);
+        @Var BitSet seats = CACHE_BOOKED_SEATS.get(flight_id);
         if (seats == null) {
 //            synchronized (CACHE_BOOKED_SEATS) {
@@ -182,5 +181,5 @@
     
     protected Set<FlightId> getCustomerBookedFlights(CustomerId customer_id) {
-        Set<FlightId> f_ids = CACHE_CUSTOMER_BOOKED_FLIGHTS.get(customer_id);
+        @Var Set<FlightId> f_ids = CACHE_CUSTOMER_BOOKED_FLIGHTS.get(customer_id);
         if (f_ids == null) {
             f_ids = CACHE_CUSTOMER_BOOKED_FLIGHTS.get(customer_id);
@@ -237,5 +236,5 @@
         public int hashCode() {
             int prime = 7;
-            int result = 1;
+            @Var int result = 1;
             result = prime * result + seatnum;
             result = prime * result + flight_id.hashCode();
@@ -288,5 +287,5 @@
         
         // Make sure we have the information we need in the BenchmarkProfile
-        String error_msg = null;
+        @Var String error_msg = null;
         if (this.profile.getFlightIdCount() == 0) {
             error_msg = "The benchmark profile does not have any flight ids.";
@@ -322,5 +321,5 @@
         if (LOG.isDebugEnabled())
             LOG.debug("Attempting to execute " + proc);
-        boolean ret = false;
+        @Var boolean ret = false;
         try {
         switch (txn) {
@@ -375,5 +374,5 @@
      */
     protected void requeueReservation(Reservation r) {
-        CacheType ctype = null;
+        @Var CacheType ctype = null;
         
         // Queue this motha trucka up for a deletin'
@@ -402,5 +401,5 @@
     private boolean executeDeleteReservation(DeleteReservation proc) throws SQLException {
         // Pull off the first cached reservation and drop it on the cluster...
-        final Reservation r = CACHE_RESERVATIONS.get(CacheType.PENDING_DELETES).poll();
+        Reservation r = CACHE_RESERVATIONS.get(CacheType.PENDING_DELETES).poll();
         if (r == null) {
             return (false);
@@ -410,8 +409,8 @@
         // Parameters
         long f_id = r.flight_id.encode();
-        Long c_id = null;
-        String c_id_str = null;
-        String ff_c_id_str = null;
-        Long ff_al_id = null;
+        @Var Long c_id = null;
+        @Var String c_id_str = null;
+        @Var String ff_c_id_str = null;
+        @Var Long ff_al_id = null;
         
         // Delete with the Customer's id as a string 
@@ -431,5 +430,5 @@
         if (LOG.isTraceEnabled()) LOG.trace("Calling " + proc);
         
-        boolean successful = false;
+        @Var boolean successful = false;
         while(!successful){
         	try{
@@ -504,5 +503,5 @@
         
         // If distance is greater than zero, then we will also get flights from nearby airports
-        long distance = -1;
+        @Var long distance = -1;
         if (rng.nextInt(100) < SEATSConstants.PROB_FIND_FLIGHTS_NEARBY_AIRPORT) {
             distance = SEATSConstants.DISTANCES[rng.nextInt(SEATSConstants.DISTANCES.length)];
@@ -520,5 +519,5 @@
         if (results.size() > 1) {
             // Convert the data into a FlightIds that other transactions can use
-            int ctr = 0;
+            @Var int ctr = 0;
             for (Object row[] : results) {
                 FlightId flight_id = new FlightId((Long)row[0]);
@@ -542,5 +541,5 @@
      */
     private boolean executeFindOpenSeats(FindOpenSeats proc) throws SQLException {
-        final FlightId search_flight = this.profile.getRandomFlightId();
+        FlightId search_flight = this.profile.getRandomFlightId();
         assert(search_flight != null);
         Long airport_depart_id = search_flight.getDepartAirportId();
@@ -572,10 +571,10 @@
             if (LOG.isTraceEnabled())
                 LOG.trace("Looking for a random customer to fly on " + search_flight);
-            CustomerId customer_id = profile.getRandomCustomerId(airport_depart_id);
+            @Var CustomerId customer_id = profile.getRandomCustomerId(airport_depart_id);
           
             // We will go for a random one if:
             //  (1) The Customer is already booked on this Flight
             //  (2) We already made a new Reservation just now for this Customer
-            int tries = SEATSConstants.FLIGHTS_NUM_SEATS;
+            @Var int tries = SEATSConstants.FLIGHTS_NUM_SEATS;
             while (tries-- > 0 && (customer_id == null)) { //  || isCustomerBookedOnFlight(customer_id, flight_id))) {
                 customer_id = profile.getRandomCustomerId();
@@ -614,6 +613,6 @@
     
     private boolean executeNewReservation(NewReservation proc) throws SQLException {
-        Reservation reservation = null;
-        BitSet seats = null;
+        @Var Reservation reservation = null;
+        @Var BitSet seats = null;
         LinkedList<Reservation> cache = CACHE_RESERVATIONS.get(CacheType.PENDING_INSERTS);
         assert(cache != null) : "Unexpected " + CacheType.PENDING_INSERTS;
@@ -668,5 +667,5 @@
         if (LOG.isTraceEnabled()) LOG.trace("Calling " + proc);
         
-        boolean successful = false;
+        @Var boolean successful = false;
   //      int count = 0;
         while(successful==false){
@@ -715,6 +714,6 @@
         CustomerId customer_id = this.profile.getRandomCustomerId();
         
-        Long c_id = null;
-        String c_id_str = null;
+        @Var Long c_id = null;
+        @Var String c_id_str = null;
         long attr0 = this.rng.nextLong();
         long attr1 = this.rng.nextLong();
@@ -733,5 +732,5 @@
         
         
-        boolean successful = false;
+        @Var boolean successful = false;
         while(!successful){
         	try{
@@ -768,5 +767,5 @@
         
         // Pull off the first pending seat change and throw that ma at the server
-        Reservation r = null;
+        @Var Reservation r = null;
         try {
             r = cache.poll();
@@ -788,5 +787,5 @@
         if (LOG.isTraceEnabled()) LOG.trace("Calling " + proc);
       
-        boolean successful = false;
+        @Var boolean successful = false;
         while(!successful){
         	try{
--- src/com/oltpbenchmark/benchmarks/seats/procedures/DeleteReservation.java
+++ src/com/oltpbenchmark/benchmarks/seats/procedures/DeleteReservation.java
@@ -18,15 +18,14 @@
 package com.oltpbenchmark.benchmarks.seats.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-
 public class DeleteReservation extends Procedure {
     private static final Logger LOG = Logger.getLogger(DeleteReservation.class);
@@ -78,11 +77,11 @@
             "   AND FF_AL_ID = ?");
     
-    public void run(Connection conn, long f_id, Long c_id, String c_id_str, String ff_c_id_str, Long ff_al_id) throws SQLException {
-        final boolean debug = LOG.isDebugEnabled();
-        PreparedStatement stmt = null; 
+    public void run(Connection conn, long f_id, @Var Long c_id, String c_id_str, String ff_c_id_str, @Var Long ff_al_id) throws SQLException {
+        boolean debug = LOG.isDebugEnabled();
+        @Var PreparedStatement stmt = null; 
         
         // If we weren't given the customer id, then look it up
         if (c_id == null) {
-            boolean has_al_id = false;
+            @Var boolean has_al_id = false;
             
             // Use the customer's id as a string
@@ -125,5 +124,5 @@
         double r_price = results.getDouble(11);
         results.close();
-        int updated = 0;
+        @Var int updated = 0;
         
         // Now delete all of the flights that they have on this flight
--- src/com/oltpbenchmark/benchmarks/seats/procedures/NewReservation.java
+++ src/com/oltpbenchmark/benchmarks/seats/procedures/NewReservation.java
@@ -18,17 +18,16 @@
 package com.oltpbenchmark.benchmarks.seats.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
+import com.oltpbenchmark.benchmarks.seats.util.CustomerId;
+import com.oltpbenchmark.benchmarks.seats.util.ErrorType;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Procedure;
 
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-import com.oltpbenchmark.benchmarks.seats.util.CustomerId;
-import com.oltpbenchmark.benchmarks.seats.util.ErrorType;
-
 public class NewReservation extends Procedure {
     private static final Logger LOG = Logger.getLogger(NewReservation.class);
@@ -115,10 +114,10 @@
     
     public void run(Connection conn, long r_id, long c_id, long f_id, long seatnum, double price, long attrs[]) throws SQLException {
-        final boolean debug = LOG.isDebugEnabled();
-        boolean found;
+        boolean debug = LOG.isDebugEnabled();
+        @Var boolean found;
         
         // Flight Information
-        PreparedStatement stmt = this.getPreparedStatement(conn, GetFlight, f_id);
-        ResultSet results = stmt.executeQuery();
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, GetFlight, f_id);
+        @Var ResultSet results = stmt.executeQuery();
         found = results.next();
         if (found == false) {
@@ -171,5 +170,5 @@
             stmt.setLong(6 + i, attrs[i]);
         } // FOR
-        int updated = stmt.executeUpdate();
+        @Var int updated = stmt.executeUpdate();
         if (updated != 1) {
             String msg = String.format("Failed to add reservation for flight #%d - Inserted %d records for InsertReservation", f_id, updated);
--- src/com/oltpbenchmark/benchmarks/seats/procedures/UpdateCustomer.java
+++ src/com/oltpbenchmark/benchmarks/seats/procedures/UpdateCustomer.java
@@ -18,16 +18,14 @@
 package com.oltpbenchmark.benchmarks.seats.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
+import com.oltpbenchmark.benchmarks.seats.util.ErrorType;
 import java.sql.Connection;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Procedure;
-
-import com.oltpbenchmark.benchmarks.seats.SEATSConstants;
-import com.oltpbenchmark.benchmarks.seats.util.ErrorType;
-
 public class UpdateCustomer extends Procedure {
     private static final Logger LOG = Logger.getLogger(UpdateCustomer.class);
@@ -72,6 +70,6 @@
     );
     
-    public void run(Connection conn, Long c_id, String c_id_str, Long update_ff, long attr0, long attr1) throws SQLException {
-        final boolean debug = LOG.isDebugEnabled();
+    public void run(Connection conn, @Var Long c_id, String c_id_str, Long update_ff, long attr0, long attr1) throws SQLException {
+        boolean debug = LOG.isDebugEnabled();
         
         // Use C_ID_STR to get C_ID
--- src/com/oltpbenchmark/benchmarks/tpcds/TPCDSLoader.java
+++ src/com/oltpbenchmark/benchmarks/tpcds/TPCDSLoader.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.tpcds;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Loader.LoaderThread;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
 import java.io.BufferedReader;
 import java.io.File;
@@ -32,12 +37,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Loader.LoaderThread;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-
 public class TPCDSLoader extends Loader<TPCDSBenchmark> {
     private static final Logger LOG = Logger.getLogger(TPCDSLoader.class);
@@ -50,24 +49,24 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        final CountDownLatch custAddrLatch = new CountDownLatch(1);
-        final CountDownLatch custDemLatch = new CountDownLatch(1);
-        final CountDownLatch dateLatch = new CountDownLatch(1);
-        final CountDownLatch incomeLatch = new CountDownLatch(1);
-        final CountDownLatch itemLatch = new CountDownLatch(1);
-        final CountDownLatch reasonLatch = new CountDownLatch(1);
-        final CountDownLatch shipModeLatch = new CountDownLatch(1);
-        final CountDownLatch timeLatch = new CountDownLatch(1);
-        final CountDownLatch warehouseLatch = new CountDownLatch(1);
-        final CountDownLatch promoLatch = new CountDownLatch(1);
-        final CountDownLatch householdLatch = new CountDownLatch(1);
-        final CountDownLatch storeLatch = new CountDownLatch(1);
-        final CountDownLatch customerLatch = new CountDownLatch(1);
-        final CountDownLatch webPageLatch = new CountDownLatch(1);
-        final CountDownLatch webSiteLatch = new CountDownLatch(1);
-        final CountDownLatch callCenterLatch = new CountDownLatch(1);
-        final CountDownLatch catalogPageLatch = new CountDownLatch(1);
-        final CountDownLatch storeSalesLatch = new CountDownLatch(1);
-        final CountDownLatch catalogSalesLatch = new CountDownLatch(1);
-        final CountDownLatch webSalesLatch = new CountDownLatch(1);
+        CountDownLatch custAddrLatch = new CountDownLatch(1);
+        CountDownLatch custDemLatch = new CountDownLatch(1);
+        CountDownLatch dateLatch = new CountDownLatch(1);
+        CountDownLatch incomeLatch = new CountDownLatch(1);
+        CountDownLatch itemLatch = new CountDownLatch(1);
+        CountDownLatch reasonLatch = new CountDownLatch(1);
+        CountDownLatch shipModeLatch = new CountDownLatch(1);
+        CountDownLatch timeLatch = new CountDownLatch(1);
+        CountDownLatch warehouseLatch = new CountDownLatch(1);
+        CountDownLatch promoLatch = new CountDownLatch(1);
+        CountDownLatch householdLatch = new CountDownLatch(1);
+        CountDownLatch storeLatch = new CountDownLatch(1);
+        CountDownLatch customerLatch = new CountDownLatch(1);
+        CountDownLatch webPageLatch = new CountDownLatch(1);
+        CountDownLatch webSiteLatch = new CountDownLatch(1);
+        CountDownLatch callCenterLatch = new CountDownLatch(1);
+        CountDownLatch catalogPageLatch = new CountDownLatch(1);
+        CountDownLatch storeSalesLatch = new CountDownLatch(1);
+        CountDownLatch catalogSalesLatch = new CountDownLatch(1);
+        CountDownLatch webSalesLatch = new CountDownLatch(1);
 /*
         threads.add(new LoaderThread() {
@@ -478,8 +477,8 @@
 
     private void loadData(Connection conn, String table, PreparedStatement ps, TPCDSConstants.CastTypes[] types) {
-        BufferedReader br = null;
-        int batchSize = 0;
-        String line = "";
-        String field = "";
+        @Var BufferedReader br = null;
+        @Var int batchSize = 0;
+        @Var String line = "";
+        @Var String field = "";
         try {
             String format = getFileFormat();
@@ -490,5 +489,5 @@
             Pattern pattern = getFormatPattern(format);
             int group = getFormatGroup(format);
-            Matcher matcher;
+            @Var Matcher matcher;
             while ((line = br.readLine()) != null) {
                 matcher = pattern.matcher(line);
@@ -538,5 +537,5 @@
                                 Matcher eurMatcher = eurFmt.matcher(field);
 
-                                String isoFmtDate = "";
+                                @Var String isoFmtDate = "";
                                 java.sql.Date fieldAsDate;
                                 if (isoMatcher.find()) {
@@ -598,5 +597,5 @@
             }
 
-        } catch (SQLException se) {
+        } catch (@Var SQLException se) {
             LOG.error("Failed to load data for TPC-DS: " + field + ", LINE " + line, se);
             se = se.getNextException();
--- src/com/oltpbenchmark/benchmarks/voter/VoterUtil.java
+++ src/com/oltpbenchmark/benchmarks/voter/VoterUtil.java
@@ -17,4 +17,6 @@
 package com.oltpbenchmark.benchmarks.voter;
 
+import com.google.errorprone.annotations.Var;
+
 public class VoterUtil {
     /**
@@ -26,5 +28,5 @@
         int max_contestants = VoterConstants.CONTESTANT_NAMES_CSV.split(",").length;
 
-        int num_contestants = (int)Math.round(VoterConstants.NUM_CONTESTANTS * scaleFactor);
+        @Var int num_contestants = (int)Math.round(VoterConstants.NUM_CONTESTANTS * scaleFactor);
         if (num_contestants < min_contestants) num_contestants = min_contestants;
         if (num_contestants > max_contestants) num_contestants = max_contestants;
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord3.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord3.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord3 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -35,5 +35,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/util/SSHGetStats.java
+++ src/com/oltpbenchmark/util/SSHGetStats.java
@@ -18,4 +18,8 @@
 package com.oltpbenchmark.util;
 
+import ch.ethz.ssh2.Connection;
+import ch.ethz.ssh2.Session;
+import ch.ethz.ssh2.StreamGobbler;
+import com.google.errorprone.annotations.Var;
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -25,8 +29,4 @@
 import java.util.StringTokenizer;
 
-import ch.ethz.ssh2.Connection;
-import ch.ethz.ssh2.Session;
-import ch.ethz.ssh2.StreamGobbler;
-
 public class SSHGetStats {
 	String hostname;
@@ -269,6 +269,6 @@
 
 		Thread.sleep(1000);
-		double v = c.getPercentageDiskIOSinceLastCall();
-		double v2 = c.getPercentageCPUSinceLastCall();
+		@Var double v = c.getPercentageDiskIOSinceLastCall();
+		@Var double v2 = c.getPercentageCPUSinceLastCall();
 
 		System.out.println("Percentage of time spent in disk I/O:" + v
--- src/com/oltpbenchmark/benchmarks/linkbench/procedures/AddNode.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/procedures/AddNode.java
@@ -17,16 +17,15 @@
 package com.oltpbenchmark.benchmarks.linkbench.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.linkbench.pojo.Node;
+import com.oltpbenchmark.util.StringUtil;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.benchmarks.linkbench.pojo.Node;
-import com.oltpbenchmark.util.StringUtil;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class AddNode extends Procedure{
     
@@ -63,5 +62,5 @@
         long newIds[] = new long[1];
         // Find the generated id
-        int i = 0;
+        @Var int i = 0;
         while (rs.next() && i < 1) {
           newIds[i++] = rs.getLong(1);
--- src/com/oltpbenchmark/benchmarks/resourcestresser/ResourceStresserLoader.java
+++ src/com/oltpbenchmark/benchmarks/resourcestresser/ResourceStresserLoader.java
@@ -1,4 +1,9 @@
 package com.oltpbenchmark.benchmarks.resourcestresser;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
+import com.oltpbenchmark.util.TextGenerator;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -6,12 +11,6 @@
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-import com.oltpbenchmark.util.TextGenerator;
-
 public class ResourceStresserLoader extends Loader<ResourceStresserBenchmark> {
 	
@@ -64,6 +63,6 @@
 		String sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
         PreparedStatement stmt = conn.prepareStatement(sql);
-        int batch = 0;
-        int i;
+        @Var int batch = 0;
+        @Var int i;
         for (i = 0; i < this.numEmployees; ++i) {
         	stmt.setInt(1, i);
--- src/com/oltpbenchmark/benchmarks/ycsb/procedures/ReadModifyWriteRecord.java
+++ src/com/oltpbenchmark/benchmarks/ycsb/procedures/ReadModifyWriteRecord.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.ycsb.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.ycsb.YCSBConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,8 +26,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.ycsb.YCSBConstants;
-
 public class ReadModifyWriteRecord extends Procedure {
     public final SQLStmt selectStmt = new SQLStmt(
@@ -38,5 +38,5 @@
         
         // Fetch it!
-        PreparedStatement stmt = this.getPreparedStatement(conn, selectStmt);
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, selectStmt);
         stmt.setInt(1, keyname);          
         ResultSet r = stmt.executeQuery();
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord1.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord1.java
@@ -17,17 +17,16 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.mysql.jdbc.log.Log;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.mysql.jdbc.log.Log;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord1 extends Procedure{
     private static final Logger LOG = Logger.getLogger(MaxRecord1.class);
@@ -40,5 +39,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/epinions/EpinionsWorker.java
+++ src/com/oltpbenchmark/benchmarks/epinions/EpinionsWorker.java
@@ -18,9 +18,5 @@
 package com.oltpbenchmark.benchmarks.epinions;
 
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.Random;
-
-import org.apache.log4j.Logger;
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure.UserAbortException;
 import com.oltpbenchmark.api.TransactionType;
@@ -37,4 +33,8 @@
 import com.oltpbenchmark.types.TransactionStatus;
 import com.oltpbenchmark.util.TextGenerator;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.Random;
+import org.apache.log4j.Logger;
 
 public class EpinionsWorker extends Worker<EpinionsBenchmark> {
@@ -55,5 +55,5 @@
     protected TransactionStatus executeWork(TransactionType nextTrans) throws UserAbortException, SQLException {
         
-    	boolean successful = false;
+    	@Var boolean successful = false;
 		while (!successful) {
 			try {
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord7.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord7.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord7 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -39,5 +39,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/wikipedia/procedures/UpdatePage.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/procedures/UpdatePage.java
@@ -18,4 +18,9 @@
 package com.oltpbenchmark.benchmarks.wikipedia.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.wikipedia.WikipediaConstants;
+import com.oltpbenchmark.util.TimeUtil;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,11 +28,4 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
-
-//import ch.ethz.ssh2.log.Logger;
-
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.wikipedia.WikipediaConstants;
-import com.oltpbenchmark.util.TimeUtil;
 import org.apache.log4j.Logger;
 public class UpdatePage extends Procedure {
@@ -134,9 +132,9 @@
 	                                 int revisionId, String revComment, int revMinorEdit) throws SQLException {
 
-	    boolean adv;
-	    PreparedStatement ps = null;
-	    ResultSet rs = null;
-	    int param;
-	    final String timestamp = TimeUtil.getCurrentTimeString14();
+	    @Var boolean adv;
+	    @Var PreparedStatement ps = null;
+	    @Var ResultSet rs = null;
+	    @Var int param;
+	    String timestamp = TimeUtil.getCurrentTimeString14();
 	    
 	    // INSERT NEW TEXT
@@ -311,5 +309,5 @@
 	
 	public void execute(Connection conn, PreparedStatement p) throws SQLException{
-	      boolean successful = false;
+	      @Var boolean successful = false;
 			while (!successful) {
 				try {
@@ -326,5 +324,5 @@
 		}
 	public void executeBatch(Connection conn, PreparedStatement p) throws SQLException{
-	      boolean successful = false;
+	      @Var boolean successful = false;
 			while (!successful) {
 				try {
--- src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/IO1.java
+++ src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/IO1.java
@@ -17,15 +17,14 @@
 package com.oltpbenchmark.benchmarks.resourcestresser.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
-
 public class IO1 extends Procedure {
     private static final Logger LOG = Logger.getLogger(Procedure.class);
@@ -35,5 +34,5 @@
         String sql = "UPDATE " + ResourceStresserConstants.TABLENAME_IOTABLE + 
         		" SET %s WHERE empid >= ? AND empid < ?";
-        String setClause = "";
+        @Var String setClause = "";
         for (int col=1; col<=ResourceStresserWorker.IO1_howManyColsPerRow; ++col) {
             setClause = setClause + (col>1 ? "," : "") + " data" + col + "=?";      
--- src/com/oltpbenchmark/benchmarks/sibench/SILoader.java
+++ src/com/oltpbenchmark/benchmarks/sibench/SILoader.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.sibench;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,11 +27,6 @@
 import java.util.List;
 import java.util.Random;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-
 public class SILoader extends Loader<SIBenchmark> {
     private static final Logger LOG = Logger.getLogger(SILoader.class);
@@ -45,12 +44,12 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        final int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
-        final int itemsPerThread = Math.max(this.num_record / numLoaders, 1);
-        final int numRecordThreads = (int) Math.ceil((double) this.num_record / itemsPerThread);
+        int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
+        int itemsPerThread = Math.max(this.num_record / numLoaders, 1);
+        int numRecordThreads = (int) Math.ceil((double) this.num_record / itemsPerThread);
 
         // SITEST
         for (int i = 0; i < numRecordThreads; i++) {
-            final int lo = i * itemsPerThread + 1;
-            final int hi = Math.min(this.num_record, (i + 1) * itemsPerThread);
+            int lo = i * itemsPerThread + 1;
+            int hi = Math.min(this.num_record, (i + 1) * itemsPerThread);
 
             threads.add(new LoaderThread() {
@@ -72,5 +71,5 @@
         String sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
         PreparedStatement stmt = conn.prepareStatement(sql);
-        int batch = 0;
+        @Var int batch = 0;
         for (int i = lo; i <= hi; i++) {
             stmt.setInt(1, i);
--- src/com/oltpbenchmark/benchmarks/twitter/procedures/GetTweetsFromFollowing.java
+++ src/com/oltpbenchmark/benchmarks/twitter/procedures/GetTweetsFromFollowing.java
@@ -18,4 +18,8 @@
 package com.oltpbenchmark.benchmarks.twitter.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.twitter.TwitterConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.twitter.TwitterConstants;
-
 public class GetTweetsFromFollowing extends Procedure {
 
@@ -41,11 +41,11 @@
     
     public void run(Connection conn, int uid) throws SQLException {
-        PreparedStatement stmt = this.getPreparedStatement(conn, getFollowing);
+        @Var PreparedStatement stmt = this.getPreparedStatement(conn, getFollowing);
         stmt.setLong(1, uid);
-        ResultSet rs = stmt.executeQuery();
+        @Var ResultSet rs = stmt.executeQuery();
         
         stmt = this.getPreparedStatement(conn, getTweets);
-        int ctr = 0;
-        long last = -1;
+        @Var int ctr = 0;
+        @Var long last = -1;
         while (rs.next() && ctr++ < TwitterConstants.LIMIT_FOLLOWERS) {
             last = rs.getLong(1);
--- src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/CPU2.java
+++ src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/CPU2.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.resourcestresser.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,14 +27,9 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
-
 public class CPU2 extends Procedure {
 
     public final SQLStmt cpuSelect;
     { 
-        String complexClause = "passwd";
+        @Var String complexClause = "passwd";
         for (int i = 1; i <= ResourceStresserWorker.CPU2_nestedLevel; ++i) {
             complexClause = "md5(concat(" + complexClause +",?))";
--- src/com/oltpbenchmark/api/collectors/MyRocksCollector.java
+++ src/com/oltpbenchmark/api/collectors/MyRocksCollector.java
@@ -17,18 +17,19 @@
 package com.oltpbenchmark.api.collectors;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.catalog.Catalog;
+import com.oltpbenchmark.util.JSONUtil;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
-import java.util.ArrayList;
-import com.oltpbenchmark.util.JSONUtil;
-import java.sql.ResultSetMetaData;
 import org.apache.log4j.Logger;
-import com.oltpbenchmark.catalog.Catalog;
 
 public class MyRocksCollector extends DBCollector {
@@ -63,5 +64,5 @@
          
             // Collect DBMS version
-            ResultSet out = s.executeQuery(VERSION_SQL);
+            @Var ResultSet out = s.executeQuery(VERSION_SQL);
             if (out.next()) {
             	this.version.append(out.getString(1));
@@ -69,5 +70,5 @@
       
             // Get currenct oltpbench database
-            String dbname = "";
+            @Var String dbname = "";
             out = s.executeQuery("select database()");
             if(out.next()){
--- src/com/oltpbenchmark/benchmarks/linkbench/distributions/ApproxHarmonic.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/distributions/ApproxHarmonic.java
@@ -35,6 +35,6 @@
    * @return
    */
-  public static double generalizedHarmonic(final long n,
-                                                 final double m) {
+  public static double generalizedHarmonic(long n,
+                                                 double m) {
     if (n < 0) {
       throw new IllegalArgumentException("n must be non-negative");
--- src/com/oltpbenchmark/benchmarks/tatp/TATPLoader.java
+++ src/com/oltpbenchmark/benchmarks/tatp/TATPLoader.java
@@ -18,4 +18,9 @@
 package com.oltpbenchmark.benchmarks.tatp;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Loader.LoaderThread;
+import com.oltpbenchmark.catalog.*;
+import com.oltpbenchmark.util.SQLUtil;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -24,12 +29,6 @@
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Loader.LoaderThread;
-import com.oltpbenchmark.catalog.*;
-import com.oltpbenchmark.util.SQLUtil;
-
 public class TATPLoader extends Loader<TATPBenchmark> {
     private static final Logger LOG = Logger.getLogger(TATPLoader.class);
@@ -46,13 +45,13 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        final int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
-        final long itemsPerThread = Math.max(this.subscriberSize / numLoaders, 1);
-        final int numSubThreads = (int) Math.ceil((double) this.subscriberSize / itemsPerThread);
-        final CountDownLatch subLatch = new CountDownLatch(numSubThreads);
+        int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
+        long itemsPerThread = Math.max(this.subscriberSize / numLoaders, 1);
+        int numSubThreads = (int) Math.ceil((double) this.subscriberSize / itemsPerThread);
+        CountDownLatch subLatch = new CountDownLatch(numSubThreads);
 
         // SUBSCRIBER
         for (int i = 0; i < numSubThreads; i++) {
-            final long lo = i * itemsPerThread + 1;
-            final long hi = Math.min(this.subscriberSize, (i + 1) * itemsPerThread);
+            long lo = i * itemsPerThread + 1;
+            long hi = Math.min(this.subscriberSize, (i + 1) * itemsPerThread);
 
             threads.add(new LoaderThread() {
@@ -108,9 +107,9 @@
         PreparedStatement pstmt = conn.prepareStatement(sql);
 
-        long total = 0;
-        int batch = 0;
+        @Var long total = 0;
+        @Var int batch = 0;
 
         for (long s_id = lo; s_id <= hi; s_id++) {
-            int col = 0;
+            @Var int col = 0;
             
             pstmt.setLong(++col, s_id);
@@ -163,13 +162,13 @@
         PreparedStatement pstmt = conn.prepareStatement(sql);
     	
-        int s_id = 0;
+        @Var int s_id = 0;
         int[] arr = { 1, 2, 3, 4 };
 
         int[] ai_types = TATPUtil.subArr(arr, 1, 4);
-        long total = 0;
-        int batch = 0;
+        @Var long total = 0;
+        @Var int batch = 0;
         while (s_id++ < subscriberSize) {
             for (int ai_type : ai_types) {
-            	int col = 0;
+            	@Var int col = 0;
             	pstmt.setLong(++col, s_id);
                 pstmt.setByte(++col, (byte)ai_type);
@@ -209,12 +208,12 @@
         String spe_sql = SQLUtil.getInsertSQL(catalog_spe, this.getDatabaseType());
         PreparedStatement spe_pstmt = conn.prepareStatement(spe_sql);
-        int spe_batch = 0;
-        long spe_total = 0;
+        @Var int spe_batch = 0;
+        @Var long spe_total = 0;
         
         String cal_sql = SQLUtil.getInsertSQL(catalog_cal, this.getDatabaseType());
         PreparedStatement cal_pstmt = conn.prepareStatement(cal_sql);
-        long cal_total = 0;
+        @Var long cal_total = 0;
         
-        int s_id = 0;
+        @Var int s_id = 0;
         int[] spe_arr = { 1, 2, 3, 4 };
         int[] cal_arr = { 0, 8, 6 };
@@ -224,5 +223,5 @@
             int[] sf_types = TATPUtil.subArr(spe_arr, 1, 4);
             for (int sf_type : sf_types) {
-            	int spe_col = 0;
+            	@Var int spe_col = 0;
             	spe_pstmt.setLong(++spe_col, s_id);
             	spe_pstmt.setByte(++spe_col, (byte)sf_type);
@@ -238,5 +237,5 @@
                 int[] start_times = TATPUtil.subArr(cal_arr, 0, 3);
                 for (int start_time : start_times) {
-                	int cal_col = 0;
+                	@Var int cal_col = 0;
                 	cal_pstmt.setLong(++cal_col, s_id);
                 	cal_pstmt.setByte(++cal_col, (byte)sf_type);
@@ -253,5 +252,5 @@
 													TATPConstants.TABLENAME_SPECIAL_FACILITY, spe_total,
 													TATPConstants.TABLENAME_SUBSCRIBER, s_id, subscriberSize));
-                int results[] = spe_pstmt.executeBatch();
+                @Var int results[] = spe_pstmt.executeBatch();
                 assert(results != null);
                 
@@ -270,5 +269,5 @@
         if (spe_batch > 0) {
             if (LOG.isDebugEnabled()) LOG.debug(String.format("%s: %d", TATPConstants.TABLENAME_SPECIAL_FACILITY, spe_total));
-            int results[] = spe_pstmt.executeBatch();
+            @Var int results[] = spe_pstmt.executeBatch();
             assert(results != null);
             
--- src/com/oltpbenchmark/benchmarks/voter/PhoneCallGenerator.java
+++ src/com/oltpbenchmark/benchmarks/voter/PhoneCallGenerator.java
@@ -19,4 +19,5 @@
 package com.oltpbenchmark.benchmarks.voter;
 
+import com.google.errorprone.annotations.Var;
 import java.util.Random;
 
@@ -94,5 +95,5 @@
 		
         // Pick a contestant number
-        int contestantNumber = votingMap[areaCodeIndex];
+        @Var int contestantNumber = votingMap[areaCodeIndex];
         if (rand.nextBoolean()) {
             contestantNumber = rand.nextInt(contestantCount) + 1;
--- src/com/oltpbenchmark/util/StringUtil.java
+++ src/com/oltpbenchmark/util/StringUtil.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.math.BigInteger;
 import java.nio.ByteBuffer;
@@ -95,5 +96,5 @@
      * @return
      */
-    public static String header(String msg, String marker, int length) {
+    public static String header(String msg, String marker, @Var int length) {
         int msg_length = msg.length();
         length = Math.max(msg_length, length);
@@ -111,5 +112,5 @@
      */
     public static String md5sum(String input) {
-        MessageDigest digest = null;
+        @Var MessageDigest digest = null;
         try {
             digest = MessageDigest.getInstance("MD5");
@@ -131,6 +132,6 @@
         String lines[][] = new String[strs.length][];
         String prefixes[] = new String[strs.length];
-        int max_length = 0;
-        int max_lines = 0;
+        @Var int max_length = 0;
+        @Var int max_lines = 0;
         
         for (int i = 0; i < strs.length; i++) {
@@ -203,13 +204,13 @@
         
         // Figure out the largest key size so we can get spacing right
-        int max_key_size = 0;
-        int max_title_size = 0;
-        final Map<Object, String[]> map_keys[] = (Map<Object, String[]>[])new Map[maps.length];
-        final boolean map_titles[] = new boolean[maps.length];
+        @Var int max_key_size = 0;
+        @Var int max_title_size = 0;
+        Map<Object, String[]> map_keys[] = (Map<Object, String[]>[])new Map[maps.length];
+        boolean map_titles[] = new boolean[maps.length];
         for (int i = 0; i < maps.length; i++) {
             Map<?, ?> m = maps[i];
             if (m == null) continue;
             Map<Object, String[]> keys = new HashMap<Object, String[]>();
-            boolean first = true;
+            @Var boolean first = true;
             for (Object k : m.keySet()) {
                 String k_str[] = LINE_SPLIT.split(k != null ? k.toString() : "");
@@ -235,5 +236,5 @@
         
         boolean equalsDelimiter = delimiter.equals("=");
-        final String f = "%-" + (max_key_size + delimiter.length() + 1) + "s" +
+        String f = "%-" + (max_key_size + delimiter.length() + 1) + "s" +
                          (equalsDelimiter ? "= " : "") +
                          "%s\n";
@@ -241,5 +242,5 @@
         // Now make StringBuilder blocks for each map
         // We do it in this way so that we can get the max length of the values
-        int max_value_size = 0;
+        @Var int max_value_size = 0;
         StringBuilder blocks[] = new StringBuilder[maps.length];
         for (int map_i = 0; map_i < maps.length; map_i++) {
@@ -249,5 +250,5 @@
             Map<Object, String[]> keys = map_keys[map_i];
             
-            boolean first = true;
+            @Var boolean first = true;
             for (Entry<?, ?> e : m.entrySet()) {
                 String key[] = keys.get(e.getKey());
@@ -259,5 +260,5 @@
                 } else {
                     Object v_obj = e.getValue();
-                    String v = null;
+                    @Var String v = null;
                     if (recursive && v_obj instanceof Map<?, ?>) {
                         v = formatMaps(delimiter, upper, box, border_top, border_bottom, recursive, first_element_title, (Map<?,?>)v_obj).trim();
@@ -276,5 +277,5 @@
                     int total_lines = Math.max(key.length, value.length); 
                     for (int line_i = 0; line_i < total_lines; line_i++) {
-                        String k_line = (line_i < key.length ? key[line_i] : ""); 
+                        @Var String k_line = (line_i < key.length ? key[line_i] : ""); 
                         if (upper) k_line = k_line.toUpperCase();
                         
@@ -298,5 +299,5 @@
         int total_width = Math.max(max_title_size, (max_key_size + max_value_size + delimiter.length())) + 1;
         String dividing_line = (need_divider ? repeat("-", total_width) : "");
-        StringBuilder sb = null;
+        @Var StringBuilder sb = null;
         if (maps.length == 1) {
             sb = blocks[0];
@@ -371,5 +372,5 @@
      * @return
      */
-    public static String box(String str, String mark, Integer max_len) {
+    public static String box(String str, String mark, @Var Integer max_len) {
         String lines[] = LINE_SPLIT.split(str);
         if (lines.length == 0) return "";
@@ -381,6 +382,6 @@
         }
         
-        final String top_line = StringUtil.repeat(mark, max_len + 4); // padding
-        final String f = "%s %-" + max_len + "s %s\n";
+        String top_line = StringUtil.repeat(mark, max_len + 4); // padding
+        String f = "%s %-" + max_len + "s %s\n";
         
         StringBuilder sb = new StringBuilder();
@@ -430,5 +431,5 @@
     public static String abbrv(String str, int max, boolean dots) {
         int len = str.length();
-        String ret = null;
+        @Var String ret = null;
         if (len > max) {
             ret = (dots ? str.substring(0, max - 3) + "..." : str.substring(0, max));
@@ -456,5 +457,5 @@
     public static String title(String string, boolean keep_upper) {
         StringBuilder sb = new StringBuilder();
-        String add = "";
+        @Var String add = "";
         for (String part : TITLE_SPLIT.split(string)) {
             sb.append(add).append(part.substring(0, 1).toUpperCase());
@@ -500,5 +501,5 @@
     }
     
-    public static <T> String join(String delimiter, final Iterator<T> items) {
+    public static <T> String join(String delimiter, Iterator<T> items) {
         return (join("", delimiter, CollectionUtil.iterable(items)));
     }
@@ -529,10 +530,10 @@
      * @return
      */
-    public static String join(String prefix, String delimiter, Iterable<?> items) {
+    public static String join(@Var String prefix, String delimiter, Iterable<?> items) {
         if (items == null) return ("");
         if (prefix == null) prefix = "";
         
         StringBuilder sb = new StringBuilder();
-        int i = 0;
+        @Var int i = 0;
         for (Object x : items) {
             if (prefix.isEmpty() == false) sb.append(prefix);
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord10.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord10.java
@@ -17,10 +17,11 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
 
 public class MaxRecord10 extends Procedure{
@@ -41,5 +42,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/DBWorkload.java
+++ src/com/oltpbenchmark/DBWorkload.java
@@ -18,4 +18,17 @@
 package com.oltpbenchmark;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.TransactionType;
+import com.oltpbenchmark.api.TransactionTypes;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.types.DatabaseType;
+import com.oltpbenchmark.util.ClassUtil;
+import com.oltpbenchmark.util.FileUtil;
+import com.oltpbenchmark.util.QueueLimitException;
+import com.oltpbenchmark.util.ResultUploader;
+import com.oltpbenchmark.util.StringBoxUtil;
+import com.oltpbenchmark.util.StringUtil;
+import com.oltpbenchmark.util.TimeUtil;
 import java.io.File;
 import java.io.IOException;
@@ -27,5 +40,4 @@
 import java.util.Map;
 import java.util.NoSuchElementException;
-
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.CommandLineParser;
@@ -41,17 +53,4 @@
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.TransactionType;
-import com.oltpbenchmark.api.TransactionTypes;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.types.DatabaseType;
-import com.oltpbenchmark.util.ClassUtil;
-import com.oltpbenchmark.util.FileUtil;
-import com.oltpbenchmark.util.QueueLimitException;
-import com.oltpbenchmark.util.ResultUploader;
-import com.oltpbenchmark.util.StringBoxUtil;
-import com.oltpbenchmark.util.StringUtil;
-import com.oltpbenchmark.util.TimeUtil;
-
 public class DBWorkload {
     private static final Logger LOG = Logger.getLogger(DBWorkload.class);
@@ -81,5 +80,5 @@
         // create the command line parser
         CommandLineParser parser = new PosixParser();
-        XMLConfiguration pluginConfig=null;
+        @Var XMLConfiguration pluginConfig=null;
         try {
             pluginConfig = new XMLConfiguration("config/plugin.xml");
@@ -161,5 +160,5 @@
         
         // Seconds
-        int intervalMonitor = 0;
+        @Var int intervalMonitor = 0;
         if (argsLine.hasOption("im")) {
             intervalMonitor = Integer.parseInt(argsLine.getOptionValue("im"));
@@ -183,7 +182,7 @@
 
         // Load the configuration for each benchmark
-        int lastTxnId = 0;
+        @Var int lastTxnId = 0;
         for (String plugin : targetList) {
-            String pluginTest = "[@bench='" + plugin + "']";
+            @Var String pluginTest = "[@bench='" + plugin + "']";
 
             // ----------------------------------------------------------------
@@ -194,5 +193,5 @@
             wrkld.setBenchmarkName(plugin);
             wrkld.setXmlConfig(xmlConfig);
-            boolean scriptRun = false;
+            @Var boolean scriptRun = false;
             if (argsLine.hasOption("t")) {
                 scriptRun = true;
@@ -210,5 +209,5 @@
             wrkld.setDBPassword(xmlConfig.getString("password"));
             
-            int terminals = xmlConfig.getInt("terminals[not(@bench)]", 0);
+            @Var int terminals = xmlConfig.getInt("terminals[not(@bench)]", 0);
             terminals = xmlConfig.getInt("terminals" + pluginTest, terminals);
             wrkld.setTerminals(terminals);
@@ -225,5 +224,5 @@
             wrkld.setDataDir(xmlConfig.getString("datadir", "."));
 
-            double selectivity = -1;
+            @Var double selectivity = -1;
             try {
                 selectivity = xmlConfig.getDouble("selectivity");
@@ -263,5 +262,5 @@
             // LOAD TRANSACTION DESCRIPTIONS
             // ----------------------------------------------------------------
-            int numTxnTypes = xmlConfig.configurationsAt("transactiontypes" + pluginTest + "/transactiontype").size();
+            @Var int numTxnTypes = xmlConfig.configurationsAt("transactiontypes" + pluginTest + "/transactiontype").size();
             if (numTxnTypes == 0 && targetList.length == 1) {
                 //if it is a single workload run, <transactiontypes /> w/o attribute is used
@@ -279,5 +278,5 @@
 
                 // Get ID if specified; else increment from last one.
-                int txnId = i;
+                @Var int txnId = i;
                 if (xmlConfig.containsKey(key + "/id")) {
                     txnId = xmlConfig.getInt(key + "/id");
@@ -368,12 +367,12 @@
                     weight_strings = work.getList("weights[not(@bench)]"); 
                 }
-                int rate = 1;
-                boolean rateLimited = true;
-                boolean disabled = false;
-                boolean serial = false;
-                boolean timed = false;
+                @Var int rate = 1;
+                @Var boolean rateLimited = true;
+                @Var boolean disabled = false;
+                @Var boolean serial = false;
+                @Var boolean timed = false;
 
                 // can be "disabled", "unlimited" or a number
-                String rate_string;
+                @Var String rate_string;
                 rate_string = work.getString("rate[not(@bench)]", "");
                 rate_string = work.getString("rate" + pluginTest, rate_string);
@@ -397,5 +396,5 @@
                     }
                 }
-                Phase.Arrival arrival=Phase.Arrival.REGULAR;
+                @Var Phase.Arrival arrival=Phase.Arrival.REGULAR;
                 String arrive=work.getString("@arrival","regular");
                 if(arrive.toUpperCase().equals("POISSON"))
@@ -421,5 +420,5 @@
                 serial = serial && (wrkld.getTraceReader() == null);
 
-                int activeTerminals;
+                @Var int activeTerminals;
                 activeTerminals = work.getInt("active_terminals[not(@bench)]", terminals);
                 activeTerminals = work.getInt("active_terminals" + pluginTest, activeTerminals);
@@ -475,5 +474,5 @@
     
             // CHECKING INPUT PHASES
-            int j = 0;
+            @Var int j = 0;
             for (Phase p : wrkld.getAllPhases()) {
                 j++;
@@ -567,5 +566,5 @@
         if (isBooleanOptionSet(argsLine, "execute")) {
             // Bombs away!
-            Results r = null;
+            @Var Results r = null;
             try {
                 r = runWorkload(benchList, verbose, intervalMonitor);
@@ -635,9 +634,9 @@
         
         // If an output directory is used, store the information
-        String outputDirectory = "results";
+        @Var String outputDirectory = "results";
         if (argsLine.hasOption("d")) {
             outputDirectory = argsLine.getOptionValue("d");
         }
-        String filePrefix = "";
+        @Var String filePrefix = "";
         if (argsLine.hasOption("t")) {
             filePrefix = String.valueOf(TimeUtil.getCurrentTime().getTime()) + "_";
@@ -645,5 +644,5 @@
         
         // Special result uploader
-        ResultUploader ru = null;
+        @Var ResultUploader ru = null;
         if (xmlConfig.containsKey("uploadUrl")) {
             ru = new ResultUploader(r, xmlConfig, argsLine);
@@ -652,7 +651,7 @@
         
         // Output target 
-        PrintStream ps = null;
-        PrintStream rs = null;
-        String baseFileName = "oltpbench";
+        @Var PrintStream ps = null;
+        @Var PrintStream rs = null;
+        @Var String baseFileName = "oltpbench";
         if (argsLine.hasOption("o")) {
             if (argsLine.getOptionValue("o").equals("-")) {
@@ -666,6 +665,6 @@
 
         // Build the complex path
-        String baseFile = filePrefix;
-        String nextName;
+        @Var String baseFile = filePrefix;
+        @Var String nextName;
         
         if (baseFileName != null) {
@@ -687,5 +686,5 @@
                 // Summary Data
                 nextName = FileUtil.getNextFilename(FileUtil.joinPath(outputDirectory, baseFile + ".summary"));
-                PrintStream ss = new PrintStream(new File(nextName));
+                @Var PrintStream ss = new PrintStream(new File(nextName));
                 LOG.info("Output summary data into file: " + nextName);
                 ru.writeSummary(ss);
@@ -744,5 +743,5 @@
                 
                 for (TransactionType t : activeTXTypes) {
-                    PrintStream ts = ps;
+                    @Var PrintStream ts = ps;
                     if (ts != System.out) {
                         // Get the actual filename for the output
@@ -771,5 +770,5 @@
         @SuppressWarnings("unchecked")
         List<SubnodeConfiguration> weights = work.configurationsAt("weights");
-        boolean weights_started = false;
+        @Var boolean weights_started = false;
 
         for (SubnodeConfiguration weight : weights) {
--- src/com/oltpbenchmark/benchmarks/auctionmark/procedures/ResetDatabase.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/procedures/ResetDatabase.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.auctionmark.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
+import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,12 +27,6 @@
 import java.sql.SQLException;
 import java.sql.Timestamp;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.auctionmark.AuctionMarkConstants;
-import com.oltpbenchmark.benchmarks.auctionmark.util.ItemStatus;
-
 /**
  * Remove ITEM entries created after the loader started
@@ -58,6 +57,6 @@
 
     public void run(Connection conn) throws SQLException {
-        PreparedStatement stmt = null;
-        int updated;
+        @Var PreparedStatement stmt = null;
+        @Var int updated;
         
         // We have to get the loaderStopTimestamp from the CONFIG_PROFILE
--- src/com/oltpbenchmark/benchmarks/tpcc/TPCCLoader.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/TPCCLoader.java
@@ -35,4 +35,10 @@
  */
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
+import com.oltpbenchmark.benchmarks.tpcc.pojo.*;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
 import java.sql.BatchUpdateException;
 import java.sql.Connection;
@@ -44,13 +50,6 @@
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.benchmarks.tpcc.pojo.*;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConfig;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-
 /**
  * TPC-C Benchmark Loader
@@ -74,5 +73,5 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        final CountDownLatch itemLatch = new CountDownLatch(1);
+        CountDownLatch itemLatch = new CountDownLatch(1);
         
         // ITEM
@@ -91,5 +90,5 @@
         // to wait until the ITEM table is loaded first though.
         for (int w = 1; w <= numWarehouses; w++) {
-            final int w_id = w;
+            int w_id = w;
             LoaderThread t = new LoaderThread() {
                 @Override
@@ -152,9 +151,9 @@
 
     protected int loadItems(Connection conn, int itemKount) {
-        int k = 0;
-        int randPct = 0;
-        int len = 0;
-        int startORIGINAL = 0;
-        boolean fail = false;
+        @Var int k = 0;
+        @Var int randPct = 0;
+        @Var int len = 0;
+        @Var int startORIGINAL = 0;
+        @Var boolean fail = false;
         
         try {
@@ -162,5 +161,5 @@
 
             Item item = new Item();
-            int batchSize = 0;
+            @Var int batchSize = 0;
             for (int i = 1; i <= itemKount; i++) {
 
@@ -189,5 +188,5 @@
                 k++;
 
-                int idx = 1;
+                @Var int idx = 1;
                 itemPrepStmt.setLong(idx++, item.i_id);
                 itemPrepStmt.setString(idx++, item.i_name);
@@ -252,5 +251,5 @@
 			warehouse.w_zip = "123456789";
 
-			int idx = 1;
+			@Var int idx = 1;
 			whsePrepStmt.setLong(idx++, warehouse.w_id);
 			whsePrepStmt.setDouble(idx++, warehouse.w_ytd);
@@ -279,8 +278,8 @@
 	protected int loadStock(Connection conn, int w_id, int numItems) {
 
-		int k = 0;
-		int randPct = 0;
-		int len = 0;
-		int startORIGINAL = 0;
+		@Var int k = 0;
+		@Var int randPct = 0;
+		@Var int len = 0;
+		@Var int startORIGINAL = 0;
 		try {
 		    PreparedStatement stckPrepStmt = getInsertStatement(conn, TPCCConstants.TABLENAME_STOCK);
@@ -313,5 +312,5 @@
 
 				k++;
-				int idx = 1;
+				@Var int idx = 1;
 				stckPrepStmt.setLong(idx++, stock.s_w_id);
 				stckPrepStmt.setLong(idx++, stock.s_i_id);
@@ -357,5 +356,5 @@
 	protected int loadDistricts(Connection conn, int w_id, int distWhseKount) {
 
-		int k = 0;
+		@Var int k = 0;
 
 		try {
@@ -381,5 +380,5 @@
 
 				k++;
-				int idx = 1;
+				@Var int idx = 1;
 				distPrepStmt.setLong(idx++, district.d_w_id);
 				distPrepStmt.setLong(idx++, district.d_id);
@@ -411,5 +410,5 @@
 	protected int loadCustomers(Connection conn, int w_id, int districtsPerWarehouse, int customersPerDistrict) {
 
-		int k = 0;
+		@Var int k = 0;
 
 		Customer customer = new Customer();
@@ -472,5 +471,5 @@
 
 					k = k + 2;
-					int idx = 1;
+					@Var int idx = 1;
 					custPrepStmt.setLong(idx++, customer.c_w_id);
 					custPrepStmt.setLong(idx++, customer.c_d_id);
@@ -537,5 +536,5 @@
 	protected int loadOrders(Connection conn, int w_id, int districtsPerWarehouse, int customersPerDistrict) {
 
-		int k = 0;
+		@Var int k = 0;
 		int t = 0;
 		try {
@@ -565,5 +564,5 @@
 				}
 
-				int newOrderBatch = 0;
+				@Var int newOrderBatch = 0;
 				for (int c = 1; c <= customersPerDistrict; c++) {
 
@@ -584,5 +583,5 @@
 
 					k++;
-					int idx = 1;
+					@Var int idx = 1;
 					ordrPrepStmt.setInt(idx++, oorder.o_w_id);
 		            ordrPrepStmt.setInt(idx++, oorder.o_d_id);
--- src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchWorker.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/LinkBenchWorker.java
@@ -17,18 +17,11 @@
 package com.oltpbenchmark.benchmarks.linkbench;
 
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Properties;
-import java.util.Random;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.*;
+import com.oltpbenchmark.api.Procedure.UserAbortException;
 import com.oltpbenchmark.benchmarks.linkbench.distributions.*;
-import com.oltpbenchmark.benchmarks.linkbench.distributions.RealDistribution.DistributionType;
 import com.oltpbenchmark.benchmarks.linkbench.distributions.AccessDistributions.*;
+import com.oltpbenchmark.benchmarks.linkbench.distributions.RealDistribution.DistributionType;
 import com.oltpbenchmark.benchmarks.linkbench.generators.*;
-import com.oltpbenchmark.api.*;
-import com.oltpbenchmark.api.Procedure.UserAbortException;
 import com.oltpbenchmark.benchmarks.linkbench.pojo.*;
 import com.oltpbenchmark.benchmarks.linkbench.procedures.*;
@@ -36,4 +29,10 @@
 import com.oltpbenchmark.types.*;
 import com.oltpbenchmark.util.*;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Properties;
+import java.util.Random;
+import org.apache.log4j.Logger;
 
 public class LinkBenchWorker extends Worker<LinkBenchBenchmark> {
@@ -111,6 +110,6 @@
         @Override
         public int hashCode() {
-            final int prime = 31;
-            int result = 1;
+            int prime = 31;
+            @Var int result = 1;
             result = prime * result + (int) (id1 ^ (id1 >>> 32));
             result = prime * result + (int) (link_type ^ (link_type >>> 32));
@@ -252,5 +251,5 @@
         long id1 = chooseRequestID(DistributionType.LINK_READS, link.id1);
         long link_type = id2chooser.chooseRandomLinkType(rng);
-        int nid2s = 1;
+        @Var int nid2s = 1;
         if (multigetDist != null) {
             nid2s = (int)multigetDist.choose(rng);
@@ -449,5 +448,5 @@
                     LinkBenchConstants.NODE_DATASIZE_SIGMA);
 
-            String dataGenClass = ConfigUtil.getPropertyRequired(props,
+            @Var String dataGenClass = ConfigUtil.getPropertyRequired(props,
                     LinkBenchConstants.NODE_ADD_DATAGEN);
             nodeAddDataGen = ClassUtil.newInstance(dataGenClass,
@@ -547,5 +546,5 @@
                 throw new RuntimeException("Unknown value for type: " + type);
         }
-        long newid1 = dist.nextID(rng, previousId1);
+        @Var long newid1 = dist.nextID(rng, previousId1);
         // Distribution responsible for generating number in range
         assert((newid1 >= startid1) && (newid1 < maxid1));
@@ -677,5 +676,5 @@
      * @param repl replace with this if not null
      */
-    private void removeTailCacheEntry(int pos, Link repl) {
+    private void removeTailCacheEntry(int pos, @Var Link repl) {
         Link entry = listTailHistory.get(pos);
         if (pos == listTailHistory.size() - 1) {
--- src/com/oltpbenchmark/benchmarks/tatp/procedures/UpdateLocation.java
+++ src/com/oltpbenchmark/benchmarks/tatp/procedures/UpdateLocation.java
@@ -18,4 +18,8 @@
 package com.oltpbenchmark.benchmarks.tatp.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
-
 public class UpdateLocation extends Procedure {
 
@@ -38,5 +38,5 @@
     
     public long run(Connection conn, int location, String sub_nbr) throws SQLException {
-    	PreparedStatement stmt = this.getPreparedStatement(conn, getSubscriber);
+    	@Var PreparedStatement stmt = this.getPreparedStatement(conn, getSubscriber);
     	stmt.setString(1, sub_nbr);
     	ResultSet results = stmt.executeQuery();
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord2.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord2.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord2 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -34,5 +34,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/tpch/procedures/Q22.java
+++ src/com/oltpbenchmark/benchmarks/tpch/procedures/Q22.java
@@ -17,7 +17,7 @@
 package com.oltpbenchmark.benchmarks.tpch.procedures;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.SQLStmt;
 import com.oltpbenchmark.util.RandomGenerator;
-
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -82,5 +82,5 @@
         int[] codes = new int[7];
         for (int i = 0; i < 7; i++) {
-            int num = rand.number(10, 34);
+            @Var int num = rand.number(10, 34);
 
             while (seen.contains(num)) {
--- src/com/oltpbenchmark/benchmarks/sibench/procedures/MinRecord.java
+++ src/com/oltpbenchmark/benchmarks/sibench/procedures/MinRecord.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.sibench.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -25,7 +28,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class MinRecord extends Procedure{
     public final SQLStmt minStmt = new SQLStmt(
@@ -36,5 +36,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, minStmt);
         ResultSet r=stmt.executeQuery();
-        int minId = 0;
+        @Var int minId = 0;
         while(r.next())
         {
--- src/com/oltpbenchmark/benchmarks/hyadapt/HYADAPTLoader.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/HYADAPTLoader.java
@@ -17,17 +17,15 @@
 package com.oltpbenchmark.benchmarks.hyadapt;
 
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Loader;
 import com.oltpbenchmark.api.Loader.LoaderThread;
 import com.oltpbenchmark.catalog.Table;
 import com.oltpbenchmark.util.SQLUtil;
-
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
 import java.util.List;
 import java.util.Random;
+import org.apache.log4j.Logger;
 
 public class HYADAPTLoader extends Loader<HYADAPTBenchmark> {
@@ -75,6 +73,6 @@
         String sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
         PreparedStatement stmt = this.conn.prepareStatement(sql);
-        long total = 0;
-        int batch = 0;
+        @Var long total = 0;
+        @Var int batch = 0;
         for (int i = 0; i < this.num_record; i++) {
             stmt.setInt(1, i);
--- src/com/oltpbenchmark/util/json/Test.java
+++ src/com/oltpbenchmark/util/json/Test.java
@@ -17,8 +17,9 @@
 package com.oltpbenchmark.util.json;
 
+import com.google.errorprone.annotations.Var;
+import java.io.StringWriter;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Map;
-import java.io.StringWriter;
 
 /**
@@ -34,8 +35,8 @@
     public static void main(String args[]) {
         Iterator<?> it;
-        JSONArray a;
-        JSONObject j;
-        JSONStringer jj;
-        String s;
+        @Var JSONArray a;
+        @Var JSONObject j;
+        @Var JSONStringer jj;
+        @Var String s;
         
 /** 
@@ -166,5 +167,5 @@
 
             int ar[] = {1, 2, 3};
-            JSONArray ja = new JSONArray(ar);
+            @Var JSONArray ja = new JSONArray(ar);
             System.out.println(ja.toString());
             
--- src/com/oltpbenchmark/util/TableDataIterable.java
+++ src/com/oltpbenchmark/util/TableDataIterable.java
@@ -18,11 +18,10 @@
 package com.oltpbenchmark.util;
 
-import java.io.File;
-import java.util.Iterator;
-
 import au.com.bytecode.opencsv.CSVReader;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.catalog.Column;
 import com.oltpbenchmark.catalog.Table;
+import java.io.File;
+import java.util.Iterator;
 
 /**
@@ -99,5 +98,5 @@
             this.getNext();
             if (next == null) return (next);
-            String row[] = null;
+            @Var String row[] = null;
             synchronized (this) {
                 row = this.next;
@@ -106,5 +105,5 @@
             
             Object tuple[] = new Object[types.length];
-            int row_idx = 0;
+            @Var int row_idx = 0;
             for (int col_idx = 0; col_idx < types.length; col_idx++) {
                 // Auto-generate first column
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord6.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord6.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord6 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -40,5 +40,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/seats/util/DistanceUtil.java
+++ src/com/oltpbenchmark/benchmarks/seats/util/DistanceUtil.java
@@ -18,4 +18,5 @@
 package com.oltpbenchmark.benchmarks.seats.util;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.util.Pair;
 
@@ -36,5 +37,5 @@
     public static double distance(double lat0, double lon0, double lat1, double lon1) {
         double theta = lon0 - lon1;
-        double dist = Math.sin(deg2rad(lat0)) * Math.sin(deg2rad(lat1)) + Math.cos(deg2rad(lat0)) * Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(theta));
+        @Var double dist = Math.sin(deg2rad(lat0)) * Math.sin(deg2rad(lat1)) + Math.cos(deg2rad(lat0)) * Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(theta));
         dist = Math.acos(dist);
         dist = rad2deg(dist);
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord8.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord8.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord8 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -42,5 +42,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/ycsb/YCSBBenchmark.java
+++ src/com/oltpbenchmark/benchmarks/ycsb/YCSBBenchmark.java
@@ -17,4 +17,12 @@
 package com.oltpbenchmark.benchmarks.ycsb;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.WorkloadConfiguration;
+import com.oltpbenchmark.api.BenchmarkModule;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Worker;
+import com.oltpbenchmark.benchmarks.ycsb.procedures.InsertRecord;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
 import java.io.IOException;
 import java.sql.Connection;
@@ -25,12 +33,4 @@
 import java.util.List;
 
-import com.oltpbenchmark.WorkloadConfiguration;
-import com.oltpbenchmark.api.BenchmarkModule;
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Worker;
-import com.oltpbenchmark.benchmarks.ycsb.procedures.InsertRecord;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-
 public class YCSBBenchmark extends BenchmarkModule {
 
@@ -53,5 +53,5 @@
             Statement stmt = metaConn.createStatement();
             ResultSet res = stmt.executeQuery(userCount);
-            int init_record_count = 0;
+            @Var int init_record_count = 0;
             while (res.next()) {
                 init_record_count = res.getInt(1);
--- src/com/oltpbenchmark/util/ResultUploader.java
+++ src/com/oltpbenchmark/util/ResultUploader.java
@@ -17,8 +17,16 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.Results;
 import com.oltpbenchmark.api.TransactionType;
 import com.oltpbenchmark.api.collectors.DBParameterCollector;
 import com.oltpbenchmark.api.collectors.DBParameterCollectorGen;
+import java.io.*;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+import java.util.TimeZone;
+import java.util.TreeMap;
+import java.util.zip.GZIPOutputStream;
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.cli.ParseException;
@@ -36,12 +44,4 @@
 import org.apache.log4j.Logger;
 
-import java.io.*;
-import java.util.Date;
-import java.util.List;
-import java.util.Map;
-import java.util.TimeZone;
-import java.util.TreeMap;
-import java.util.zip.GZIPOutputStream;
-
 public class ResultUploader {
     private static final Logger LOG = Logger.getLogger(ResultUploader.class);
@@ -143,5 +143,5 @@
             File csvDataFile = File.createTempFile("csv", ".gz");
 
-            PrintStream confOut = new PrintStream(new FileOutputStream(expConfigFile));
+            @Var PrintStream confOut = new PrintStream(new FileOutputStream(expConfigFile));
             writeBenchmarkConf(confOut);
             confOut.close();
--- src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/Contention1.java
+++ src/com/oltpbenchmark/benchmarks/resourcestresser/procedures/Contention1.java
@@ -17,15 +17,14 @@
 package com.oltpbenchmark.benchmarks.resourcestresser.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
+import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserConstants;
-import com.oltpbenchmark.benchmarks.resourcestresser.ResourceStresserWorker;
-
 /**
  * Uses random keys and OR on primary key
@@ -56,5 +55,5 @@
         PreparedStatement stmtSleep = this.getPreparedStatement(conn, lockSleep);
         for (int sel = 0; sel < howManyUpdates; ++sel) {
-            int nextKey = -1;
+            @Var int nextKey = -1;
             for (int key = 1; key <= howManyKeys; ++key) {
                 nextKey = ResourceStresserWorker.gen.nextInt(numKeys);
--- src/com/oltpbenchmark/benchmarks/ycsb/YCSBLoader.java
+++ src/com/oltpbenchmark/benchmarks/ycsb/YCSBLoader.java
@@ -17,4 +17,9 @@
 package com.oltpbenchmark.benchmarks.ycsb;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.SQLUtil;
+import com.oltpbenchmark.util.TextGenerator;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,12 +27,6 @@
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-import com.oltpbenchmark.util.TextGenerator;
-
 public class YCSBLoader extends Loader<YCSBBenchmark> {
     private static final Logger LOG = Logger.getLogger(YCSBLoader.class);
@@ -45,8 +44,8 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        int count = 0;
+        @Var int count = 0;
         while (count < this.num_record) {
-            final int start = count;
-            final int stop = Math.min(start+YCSBConstants.THREAD_BATCH_SIZE, this.num_record);
+            int start = count;
+            int stop = Math.min(start+YCSBConstants.THREAD_BATCH_SIZE, this.num_record);
             threads.add(new LoaderThread() {
                 @Override
@@ -68,6 +67,6 @@
         String sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
         PreparedStatement stmt = conn.prepareStatement(sql);
-        long total = 0;
-        int batch = 0;
+        @Var long total = 0;
+        @Var int batch = 0;
         for (int i = start; i < stop; i++) {
             stmt.setInt(1, i);
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord10.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord10.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class SumRecord10 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -44,5 +44,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/seats/SEATSLoader.java
+++ src/com/oltpbenchmark/benchmarks/seats/SEATSLoader.java
@@ -17,4 +17,26 @@
 package com.oltpbenchmark.benchmarks.seats;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.benchmarks.seats.util.CustomerId;
+import com.oltpbenchmark.benchmarks.seats.util.CustomerIdIterable;
+import com.oltpbenchmark.benchmarks.seats.util.DistanceUtil;
+import com.oltpbenchmark.benchmarks.seats.util.FlightId;
+import com.oltpbenchmark.benchmarks.seats.util.ReturnFlight;
+import com.oltpbenchmark.benchmarks.seats.util.SEATSHistogramUtil;
+import com.oltpbenchmark.catalog.Column;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.CollectionUtil;
+import com.oltpbenchmark.util.Histogram;
+import com.oltpbenchmark.util.Pair;
+import com.oltpbenchmark.util.RandomDistribution;
+import com.oltpbenchmark.util.RandomDistribution.Flat;
+import com.oltpbenchmark.util.RandomDistribution.FlatHistogram;
+import com.oltpbenchmark.util.RandomDistribution.Gaussian;
+import com.oltpbenchmark.util.RandomDistribution.Zipf;
+import com.oltpbenchmark.util.RandomGenerator;
+import com.oltpbenchmark.util.SQLUtil;
+import com.oltpbenchmark.util.StringUtil;
+import com.oltpbenchmark.util.TableDataIterable;
 import java.io.File;
 import java.sql.Connection;
@@ -39,31 +61,8 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.regex.Matcher;
-
 import org.apache.commons.collections15.map.ListOrderedMap;
 import org.apache.commons.collections15.set.ListOrderedSet;
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.benchmarks.seats.util.CustomerId;
-import com.oltpbenchmark.benchmarks.seats.util.CustomerIdIterable;
-import com.oltpbenchmark.benchmarks.seats.util.DistanceUtil;
-import com.oltpbenchmark.benchmarks.seats.util.FlightId;
-import com.oltpbenchmark.benchmarks.seats.util.ReturnFlight;
-import com.oltpbenchmark.benchmarks.seats.util.SEATSHistogramUtil;
-import com.oltpbenchmark.catalog.Column;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.CollectionUtil;
-import com.oltpbenchmark.util.Histogram;
-import com.oltpbenchmark.util.Pair;
-import com.oltpbenchmark.util.RandomDistribution;
-import com.oltpbenchmark.util.RandomDistribution.Flat;
-import com.oltpbenchmark.util.RandomDistribution.FlatHistogram;
-import com.oltpbenchmark.util.RandomDistribution.Gaussian;
-import com.oltpbenchmark.util.RandomDistribution.Zipf;
-import com.oltpbenchmark.util.RandomGenerator;
-import com.oltpbenchmark.util.SQLUtil;
-import com.oltpbenchmark.util.StringUtil;
-import com.oltpbenchmark.util.TableDataIterable;
-
 public class SEATSLoader extends Loader<SEATSBenchmark> {
     private static final Logger LOG = Logger.getLogger(SEATSLoader.class);
@@ -161,5 +160,5 @@
         // 6. Then we save the profile
 
-        final CountDownLatch histLatch = new CountDownLatch(1);
+        CountDownLatch histLatch = new CountDownLatch(1);
 
         // 1. [histLatch] HISTOGRAMS
@@ -172,6 +171,6 @@
         });
 
-        final CountDownLatch fixedLatch = new CountDownLatch(3);
-        final CountDownLatch countryLatch = new CountDownLatch(1);
+        CountDownLatch fixedLatch = new CountDownLatch(3);
+        CountDownLatch countryLatch = new CountDownLatch(1);
 
         // 2. [countryLatch] COUNTRY
@@ -224,5 +223,5 @@
         });
 
-        final CountDownLatch scalingPrepLatch = new CountDownLatch(1);
+        CountDownLatch scalingPrepLatch = new CountDownLatch(1);
 
         // 3. [scalingPrepLatch] guards all of the fixed tables and should
@@ -244,7 +243,7 @@
         });
 
-        final CountDownLatch custLatch = new CountDownLatch(1);
-        final CountDownLatch distanceLatch = new CountDownLatch(1);
-        final CountDownLatch flightLatch = new CountDownLatch(1);
+        CountDownLatch custLatch = new CountDownLatch(1);
+        CountDownLatch distanceLatch = new CountDownLatch(1);
+        CountDownLatch flightLatch = new CountDownLatch(1);
 
         // 4. [custLatch] CUSTOMER depends on AIRPORT
@@ -296,5 +295,5 @@
         });
 
-        final CountDownLatch loadLatch = new CountDownLatch(2);
+        CountDownLatch loadLatch = new CountDownLatch(2);
 
         // 5. RESERVATIONS depends on FLIGHT, CUSTOMER
@@ -369,5 +368,5 @@
                 LOG.debug("Loading in histogram data file for '" + histogramName + "'");
             }
-            Histogram<String> hist = null;
+            @Var Histogram<String> hist = null;
 
             try {
@@ -452,10 +451,10 @@
     public void loadTable(Connection conn, Table catalog_tbl, Iterable<Object[]> iterable, int batch_size) {
         // Special Case: Airport Locations
-        final boolean is_airport = catalog_tbl.getName().equals(SEATSConstants.TABLENAME_AIRPORT);
+        boolean is_airport = catalog_tbl.getName().equals(SEATSConstants.TABLENAME_AIRPORT);
 
         if (LOG.isDebugEnabled()) {
             LOG.debug(String.format("Generating new records for table %s [batchSize=%d]", catalog_tbl.getName(), batch_size));
         }
-        final List<Column> columns = catalog_tbl.getColumns();
+        List<Column> columns = catalog_tbl.getColumns();
 
         // Check whether we have any special mappings that we need to maintain
@@ -489,6 +488,6 @@
         } // FOR
 
-        int row_idx = 0;
-        int row_batch = 0;
+        @Var int row_idx = 0;
+        @Var int row_batch = 0;
 
         try {
@@ -690,5 +689,5 @@
     protected Iterable<Object[]> getScalingIterable(Table catalog_tbl) {
         String name = catalog_tbl.getName().toUpperCase();
-        ScalingDataIterable it = null;
+        @Var ScalingDataIterable it = null;
         double scaleFactor = this.workConf.getScaleFactor();
         long num_customers = Math.round(SEATSConstants.CUSTOMERS_COUNT * scaleFactor);
@@ -873,5 +872,5 @@
         @Override
         protected Object specialValue(long id, int columnIdx) {
-            Object value = null;
+            @Var Object value = null;
             switch (columnIdx) {
                 // CUSTOMER ID
@@ -880,5 +879,5 @@
                     // exactly with the airport
                     // data files, so we'll just spin until we get a good one
-                    Long airport_id = null;
+                    @Var Long airport_id = null;
                     while (airport_id == null) {
                         this.airport_code = this.rand.nextValue();
@@ -969,5 +968,5 @@
                     SEATSLoader.this.flights_per_airline.getValueCount());
             Zipf ff_zipf = new Zipf(SEATSLoader.this.rng, SEATSConstants.CUSTOMER_NUM_FREQUENTFLYERS_MIN, max_per_customer, SEATSConstants.CUSTOMER_NUM_FREQUENTFLYERS_SIGMA);
-            long new_total = 0;
+            @Var long new_total = 0;
             long total = SEATSLoader.this.profile.getCustomerIdCount();
             if (LOG.isDebugEnabled()) {
@@ -990,5 +989,5 @@
         @Override
         protected Object specialValue(long id, int columnIdx) {
-            Object value = null;
+            @Var Object value = null;
             switch (columnIdx) {
                 // CUSTOMER ID
@@ -1084,5 +1083,5 @@
                 }
 
-                int inner_ctr = (this.last_inner_ctr != null ? this.last_inner_ctr : this.outer_ctr + 1);
+                @Var int inner_ctr = (this.last_inner_ctr != null ? this.last_inner_ctr : this.outer_ctr + 1);
                 this.last_inner_ctr = null;
                 for (; inner_ctr < this.num_airports; inner_ctr++) {
@@ -1116,5 +1115,5 @@
         @Override
         protected Object specialValue(long id, int columnIdx) {
-            Object value = null;
+            @Var Object value = null;
             switch (columnIdx) {
                 // OUTER AIRPORT
@@ -1173,5 +1172,5 @@
             // Flights per Airline
             Collection<String> all_airlines = SEATSLoader.this.profile.getAirlineCodes();
-            Histogram<String> histogram = new Histogram<String>();
+            @Var Histogram<String> histogram = new Histogram<String>();
             histogram.putAll(all_airlines);
 
@@ -1201,5 +1200,5 @@
 
             this.total = 0;
-            boolean first = true;
+            @Var boolean first = true;
             for (long t = this.today.getTime() - (days_past * SEATSConstants.MILLISECONDS_PER_DAY); t < this.today.getTime(); t += SEATSConstants.MILLISECONDS_PER_DAY) {
                 Timestamp timestamp = new Timestamp(t);
@@ -1243,5 +1242,5 @@
             assert (result) : "Invalid time code '" + code + "'";
 
-            int hour = -1;
+            @Var int hour = -1;
             try {
                 hour = Integer.valueOf(m.group(1));
@@ -1251,5 +1250,5 @@
             assert (hour != -1);
 
-            int minute = -1;
+            @Var int minute = -1;
             try {
                 minute = Integer.valueOf(m.group(2));
@@ -1298,11 +1297,11 @@
         @Override
         protected Object specialValue(long id, int columnIdx) {
-            Object value = null;
+            @Var Object value = null;
             switch (columnIdx) {
                 // FLIGHT ID
                 case (0): {
                     // Figure out what date we are currently on
-                    Integer remaining = null;
-                    Timestamp date;
+                    @Var Integer remaining = null;
+                    @Var Timestamp date;
                     do {
                         // Move to the next day.
@@ -1509,9 +1508,9 @@
 
                 for (int seatnum = 0; seatnum < booked_seats; seatnum++) {
-                    CustomerId customer_id = null;
+                    @Var CustomerId customer_id = null;
                     Integer airport_customer_cnt = SEATSLoader.this.profile.getCustomerIdCount(depart_airport_id);
                     boolean local_customer = airport_customer_cnt != null && (flight_customer_ids.size() < airport_customer_cnt.intValue());
-                    int tries = 2000;
-                    ReturnFlight return_flight = null;
+                    @Var int tries = 2000;
+                    @Var ReturnFlight return_flight = null;
                     while (tries > 0) {
                         return_flight = null;
@@ -1632,5 +1631,5 @@
         protected Object specialValue(long id, int columnIdx) {
             assert (this.current != null);
-            Object value = null;
+            @Var Object value = null;
             switch (columnIdx) {
                 // CUSTOMER ID
--- src/com/oltpbenchmark/util/SQLUtil.java
+++ src/com/oltpbenchmark/util/SQLUtil.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.catalog.Column;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.types.DatabaseType;
 import java.math.BigDecimal;
 import java.sql.Date;
@@ -30,11 +34,6 @@
 import java.util.HashSet;
 import java.util.Set;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.catalog.Column;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.types.DatabaseType;
-
 public abstract class SQLUtil {
     private static final Logger LOG = Logger.getLogger(SQLUtil.class);
@@ -205,5 +204,5 @@
      */
     public static Object castValue(int sqlType, String value) {
-        Object ret = null;
+        @Var Object ret = null;
         switch (sqlType) {
             case Types.CHAR:
@@ -363,5 +362,5 @@
     	
     	StringBuilder values = new StringBuilder();
-    	boolean first;
+    	@Var boolean first;
     	
     	// Column Names
--- src/com/oltpbenchmark/util/FileUtil.java
+++ src/com/oltpbenchmark/util/FileUtil.java
@@ -18,12 +18,11 @@
 package com.oltpbenchmark.util;
 
+import com.google.errorprone.annotations.Var;
 import java.io.*;
-
-import org.apache.log4j.Logger;
-
 import java.util.Arrays;
 import java.util.List;
 import java.util.regex.Pattern;
 import java.util.zip.GZIPInputStream;
+import org.apache.log4j.Logger;
 
 /**
@@ -43,5 +42,5 @@
     public static String joinPath(String... args) {
         StringBuilder result = new StringBuilder();
-        boolean first = true;
+        @Var boolean first = true;
         for (String a : args) {
             if (a != null && a.length() > 0) {
@@ -74,6 +73,6 @@
             
             // Check how many files already exist
-            int counter = 1;
-            String nextName = parts[0] + "." + counter + "." + parts[1];
+            @Var int counter = 1;
+            @Var String nextName = parts[0] + "." + counter + "." + parts[1];
             while(exists(nextName)) {
                 ++counter;
@@ -94,5 +93,5 @@
     public static String realpath(String path) {
         File f = new File(path);
-        String ret = null;
+        @Var String ret = null;
         try {
             ret = f.getCanonicalPath();
@@ -151,5 +150,5 @@
     }
 
-    public static File getTempFile(String prefix, String suffix, boolean deleteOnExit) {
+    public static File getTempFile(@Var String prefix, @Var String suffix, boolean deleteOnExit) {
         File tempFile;
         if (suffix != null && suffix.startsWith(".") == false)
@@ -175,5 +174,5 @@
      */
     public static File getTempDirectory() {
-        final File temp = FileUtil.getTempFile(null);
+        File temp = FileUtil.getTempFile(null);
         if (!(temp.delete())) {
             throw new RuntimeException("Could not delete temp file: " + temp.getAbsolutePath());
@@ -283,5 +282,5 @@
         }
 
-        BufferedReader in = null;
+        @Var BufferedReader in = null;
         if (file.getPath().endsWith(".gz")) {
             FileInputStream fin = new FileInputStream(file);
@@ -307,6 +306,6 @@
 
         // Read in the bytes
-        int offset = 0;
-        int numRead = 0;
+        @Var int offset = 0;
+        @Var int numRead = 0;
         while ((offset < bytes.length) && ((numRead = in.read(bytes, offset, bytes.length - offset)) >= 0)) {
             offset += numRead;
@@ -345,5 +344,5 @@
     private static final File find(String name, File current, boolean isdir) throws IOException {
         LOG.debug("Find Current Location = " + current);
-        boolean has_svn = false;
+        @Var boolean has_svn = false;
         for (File file : current.listFiles()) {
             if (file.getCanonicalPath().endsWith(File.separator + name) && file.isDirectory() == isdir) {
@@ -370,5 +369,5 @@
      * @throws IOException
      */
-    public static List<File> getFilesInDirectory(final File dir, final String filePrefix) throws IOException {
+    public static List<File> getFilesInDirectory(File dir, String filePrefix) throws IOException {
         assert (dir.isDirectory()) : "Invalid search directory path: " + dir;
         FilenameFilter filter = new FilenameFilter() {
--- src/com/oltpbenchmark/benchmarks/tpcc/procedures/OrderStatus.java
+++ src/com/oltpbenchmark/benchmarks/tpcc/procedures/OrderStatus.java
@@ -17,4 +17,10 @@
 package com.oltpbenchmark.benchmarks.tpcc.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
+import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
+import com.oltpbenchmark.benchmarks.tpcc.pojo.Customer;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -24,13 +30,6 @@
 import java.util.ArrayList;
 import java.util.Random;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCConstants;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCUtil;
-import com.oltpbenchmark.benchmarks.tpcc.TPCCWorker;
-import com.oltpbenchmark.benchmarks.tpcc.pojo.Customer;
-
 public class OrderStatus extends TPCCProcedure {
 
@@ -87,8 +86,8 @@
 
         int d_id = TPCCUtil.randomNumber(terminalDistrictLowerID, terminalDistrictUpperID, gen);
-        boolean c_by_name = false;
+        @Var boolean c_by_name = false;
         int y = TPCCUtil.randomNumber(1, 100, gen);
-        String c_last = null;
-        int c_id = -1;
+        @Var String c_last = null;
+        @Var int c_id = -1;
         if (y <= 60) {
             c_by_name = true;
@@ -99,5 +98,5 @@
         }
 
-        int o_id = -1, o_carrier_id = -1;
+        @Var int o_id = -1, o_carrier_id = -1;
         Timestamp o_entry_d;
         ArrayList<String> orderLines = new ArrayList<String>();
@@ -121,5 +120,5 @@
         ordStatGetNewestOrd.setInt(3, c.c_id);
         if (trace) LOG.trace("ordStatGetNewestOrd START");
-        ResultSet rs = ordStatGetNewestOrd.executeQuery();
+        @Var ResultSet rs = ordStatGetNewestOrd.executeQuery();
         if (trace) LOG.trace("ordStatGetNewestOrd END");
 
@@ -278,5 +277,5 @@
         // TPC-C 2.5.2.2: Position n / 2 rounded up to the next integer, but
         // that counts starting from 1.
-        int index = customers.size() / 2;
+        @Var int index = customers.size() / 2;
         if (customers.size() % 2 == 0) {
             index -= 1;
--- src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaWorker.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/WikipediaWorker.java
@@ -17,10 +17,5 @@
 package com.oltpbenchmark.benchmarks.wikipedia;
 
-import java.net.UnknownHostException;
-import java.sql.SQLException;
-import java.util.Random;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Procedure;
 import com.oltpbenchmark.api.Procedure.UserAbortException;
@@ -38,4 +33,8 @@
 import com.oltpbenchmark.util.RandomDistribution.Zipf;
 import com.oltpbenchmark.util.TextGenerator;
+import java.net.UnknownHostException;
+import java.sql.SQLException;
+import java.util.Random;
+import org.apache.log4j.Logger;
 
 public class WikipediaWorker extends Worker<WikipediaBenchmark> {
@@ -63,5 +62,5 @@
         boolean needUser = (procClass.equals(AddWatchList.class) || procClass.equals(RemoveWatchList.class) || procClass.equals(GetPageAuthenticated.class));
 
-        int userId;
+        @Var int userId;
 
         do {
--- src/com/oltpbenchmark/benchmarks/auctionmark/util/CategoryParser.java
+++ src/com/oltpbenchmark/benchmarks/auctionmark/util/CategoryParser.java
@@ -18,14 +18,13 @@
 package com.oltpbenchmark.benchmarks.auctionmark.util;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.util.FileUtil;
 import java.io.BufferedReader;
 import java.io.File;
 import java.util.Map;
 import java.util.TreeMap;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.util.FileUtil;
 
-
 public class CategoryParser {
     private static final Logger LOG = Logger.getLogger(CategoryParser.class);
@@ -43,5 +42,5 @@
 		try {
 			BufferedReader br = FileUtil.getReader(file);
-			String strLine;
+			@Var String strLine;
 			while ((strLine = br.readLine()) != null) {		
 				extractCategory(strLine);
@@ -66,5 +65,5 @@
 			}
 		}
-		String categoryName = sb.toString();
+		@Var String categoryName = sb.toString();
 		if(categoryName.length() > 0){
 			categoryName = categoryName.substring(0, categoryName.length() - 1);
@@ -75,10 +74,10 @@
 	
 	public Category addNewCategory(String fullCategoryName, int itemCount, boolean isLeaf){
-		Category category = null;
-		Category parentCategory = null;
+		@Var Category category = null;
+		@Var Category parentCategory = null;
 		
-		String categoryName = fullCategoryName;
-		String parentCategoryName = "";
-		Integer parentCategoryID = null;
+		@Var String categoryName = fullCategoryName;
+		@Var String parentCategoryName = "";
+		@Var Integer parentCategoryID = null;
 		
 		if(categoryName.indexOf('/') != -1){
--- src/com/oltpbenchmark/benchmarks/twitter/util/TransactionSelector.java
+++ src/com/oltpbenchmark/benchmarks/twitter/util/TransactionSelector.java
@@ -18,4 +18,7 @@
 package com.oltpbenchmark.benchmarks.twitter.util;
 
+import ch.ethz.ssh2.util.Tokenizer;
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.TransactionTypes;
 import java.io.BufferedInputStream;
 import java.io.DataInputStream;
@@ -27,8 +30,4 @@
 import java.util.Random;
 
-import com.oltpbenchmark.api.TransactionTypes;
-
-import ch.ethz.ssh2.util.Tokenizer;
-
 public class TransactionSelector {
 
@@ -54,6 +53,6 @@
 		
 		File file = new File(filename);
-		FileInputStream fis = null;
-		BufferedInputStream bis = null;
+		@Var FileInputStream fis = null;
+		@Var BufferedInputStream bis = null;
 		fis = new FileInputStream(file);
 
@@ -64,6 +63,6 @@
 
 		File file2 = new File(filename2);
-		FileInputStream fis2 = null;
-		BufferedInputStream bis2 = null;
+		@Var FileInputStream fis2 = null;
+		@Var BufferedInputStream bis2 = null;
 		fis2 = new FileInputStream(file2);
 
--- src/com/oltpbenchmark/benchmarks/twitter/TwitterLoader.java
+++ src/com/oltpbenchmark/benchmarks/twitter/TwitterLoader.java
@@ -17,13 +17,5 @@
 package com.oltpbenchmark.benchmarks.twitter;
 
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.CountDownLatch;
-
-import org.apache.log4j.Logger;
-
+import com.google.errorprone.annotations.Var;
 import com.oltpbenchmark.api.Loader;
 import com.oltpbenchmark.benchmarks.twitter.util.NameHistogram;
@@ -35,4 +27,11 @@
 import com.oltpbenchmark.util.SQLUtil;
 import com.oltpbenchmark.util.TextGenerator;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.CountDownLatch;
+import org.apache.log4j.Logger;
 
 public class TwitterLoader extends Loader<TwitterBenchmark> {
@@ -60,20 +59,20 @@
     public List<LoaderThread> createLoaderThreads() throws SQLException {
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
-        final int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
+        int numLoaders = this.benchmark.getWorkloadConfiguration().getLoaderThreads();
         // first we load USERS
-        final int numItems = this.num_users;
-        final int itemsPerThread = Math.max(numItems / numLoaders, 1);
-        final int numUserThreads = (int) Math.ceil((double) this.num_users / itemsPerThread);
+        int numItems = this.num_users;
+        int itemsPerThread = Math.max(numItems / numLoaders, 1);
+        int numUserThreads = (int) Math.ceil((double) this.num_users / itemsPerThread);
         // then we load FOLLOWS and TWEETS
-        final int numFollowThreads = numUserThreads;
-        final long tweetsPerThread = Math.max(this.num_tweets / numLoaders, 1);
-        final int numTweetThreads = (int) Math.ceil((double) this.num_tweets / tweetsPerThread);
+        int numFollowThreads = numUserThreads;
+        long tweetsPerThread = Math.max(this.num_tweets / numLoaders, 1);
+        int numTweetThreads = (int) Math.ceil((double) this.num_tweets / tweetsPerThread);
 
-        final CountDownLatch userLatch = new CountDownLatch(numUserThreads);
+        CountDownLatch userLatch = new CountDownLatch(numUserThreads);
 
         // USERS
         for (int i = 0; i < numUserThreads; i++) {
-            final int lo = i * itemsPerThread + 1;
-            final int hi = Math.min(this.num_users, (i + 1) * itemsPerThread);
+            int lo = i * itemsPerThread + 1;
+            int hi = Math.min(this.num_users, (i + 1) * itemsPerThread);
 
             threads.add(new LoaderThread() {
@@ -88,6 +87,6 @@
         // FOLLOW_DATA depends on USERS
         for (int i = 0; i < numFollowThreads; i++) {
-            final int lo = i * itemsPerThread + 1;
-            final int hi = Math.min(this.num_users, (i + 1) * itemsPerThread);
+            int lo = i * itemsPerThread + 1;
+            int hi = Math.min(this.num_users, (i + 1) * itemsPerThread);
 
             threads.add(new LoaderThread() {
@@ -108,6 +107,6 @@
         // TWEETS depends on USERS
         for (int i = 0; i < numTweetThreads; i++) {
-            final long lo = i * tweetsPerThread + 1;
-            final long hi = Math.min(this.num_tweets, (i + 1) * tweetsPerThread);
+            long lo = i * tweetsPerThread + 1;
+            long hi = Math.min(this.num_tweets, (i + 1) * tweetsPerThread);
 
             threads.add(new LoaderThread() {
@@ -142,6 +141,6 @@
         FlatHistogram<Integer> name_len_rng = new FlatHistogram<Integer>(this.rng(), name_h);
 
-        int total = 0;
-        int batchSize = 0;
+        @Var int total = 0;
+        @Var int batchSize = 0;
 
         for (int i = lo; i <= hi; i++) {
@@ -194,6 +193,6 @@
         PreparedStatement tweetInsert = conn.prepareStatement(sql);
 
-        int total = 0;
-        int batchSize = 0;
+        @Var int total = 0;
+        @Var int batchSize = 0;
         ScrambledZipfianGenerator zy = new ScrambledZipfianGenerator(1, this.num_users);
 
@@ -241,17 +240,17 @@
      */
     protected void loadFollowData(Connection conn, int lo, int hi) throws SQLException {
-        String sql;
-        Table catalog_tbl = this.benchmark.getTableCatalog(TwitterConstants.TABLENAME_FOLLOWS);
+        @Var String sql;
+        @Var Table catalog_tbl = this.benchmark.getTableCatalog(TwitterConstants.TABLENAME_FOLLOWS);
         assert (catalog_tbl != null);
         sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
-        final PreparedStatement followsInsert = conn.prepareStatement(sql);
+        PreparedStatement followsInsert = conn.prepareStatement(sql);
 
         catalog_tbl = this.benchmark.getTableCatalog(TwitterConstants.TABLENAME_FOLLOWERS);
         assert (catalog_tbl != null);
         sql = SQLUtil.getInsertSQL(catalog_tbl, this.getDatabaseType());
-        final PreparedStatement followersInsert = conn.prepareStatement(sql);
+        PreparedStatement followersInsert = conn.prepareStatement(sql);
 
-        int total = 1;
-        int batchSize = 0;
+        @Var int total = 1;
+        @Var int batchSize = 0;
 
         ZipfianGenerator zipfFollowee = new ZipfianGenerator(1, this.num_users, 1.75);
@@ -260,5 +259,5 @@
         for (int follower = lo; follower <= hi; follower++) {
             followees.clear();
-            int time = zipfFollows.nextInt();
+            @Var int time = zipfFollows.nextInt();
             if (time == 0) {
                 time = 1; // At least this follower will follow 1 user
--- src/com/oltpbenchmark/benchmarks/tatp/procedures/DeleteCallForwarding.java
+++ src/com/oltpbenchmark/benchmarks/tatp/procedures/DeleteCallForwarding.java
@@ -18,4 +18,8 @@
 package com.oltpbenchmark.benchmarks.tatp.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.tatp.TATPConstants;
-
 public class DeleteCallForwarding extends Procedure {
 
@@ -39,9 +39,9 @@
 
     public long run(Connection conn, String sub_nbr, byte sf_type, byte start_time) throws SQLException {
-    	PreparedStatement stmt = this.getPreparedStatement(conn, getSubscriber);
+    	@Var PreparedStatement stmt = this.getPreparedStatement(conn, getSubscriber);
     	stmt.setString(1, sub_nbr);
     	ResultSet results = stmt.executeQuery();
     	assert(results != null);
-    	long s_id=-1;
+    	@Var long s_id=-1;
     	if(results.next())
     	{
--- src/com/oltpbenchmark/benchmarks/linkbench/procedures/DeleteLink.java
+++ src/com/oltpbenchmark/benchmarks/linkbench/procedures/DeleteLink.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.linkbench.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,11 +26,6 @@
 import java.sql.SQLException;
 import java.util.Date;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.linkbench.LinkBenchConstants;
-
 public class DeleteLink extends Procedure{
     
@@ -100,6 +99,6 @@
           ResultSet result = stmt1.executeQuery();
 
-          int visibility = -1;
-          boolean found = false;
+          @Var int visibility = -1;
+          @Var boolean found = false;
           while (result.next()) {
             visibility = result.getInt("visibility");
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord3.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/MaxRecord3.java
@@ -17,4 +17,8 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,8 +27,4 @@
 import java.util.Map;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.hyadapt.HYADAPTConstants;
-
 public class MaxRecord3 extends Procedure{
     public final SQLStmt maxStmt = new SQLStmt(
@@ -37,5 +37,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, maxStmt);
         stmt.setInt(1, keyname);          
-        int max = -1;
+        @Var int max = -1;
         ResultSet r = stmt.executeQuery();
         if(r.next()){
--- src/com/oltpbenchmark/benchmarks/wikipedia/procedures/GetPageAnonymous.java
+++ src/com/oltpbenchmark/benchmarks/wikipedia/procedures/GetPageAnonymous.java
@@ -18,4 +18,9 @@
 package com.oltpbenchmark.benchmarks.wikipedia.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
+import com.oltpbenchmark.benchmarks.wikipedia.WikipediaConstants;
+import com.oltpbenchmark.benchmarks.wikipedia.util.Article;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -23,9 +28,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-import com.oltpbenchmark.benchmarks.wikipedia.WikipediaConstants;
-import com.oltpbenchmark.benchmarks.wikipedia.util.Article;
-
 public class GetPageAnonymous extends Procedure {
 	
@@ -67,10 +67,10 @@
 	public Article run(Connection conn, boolean forSelect, String userIp,
 			                            int pageNamespace, String pageTitle) throws UserAbortException, SQLException {		
-	    int param = 1;
+	    @Var int param = 1;
 	    
-		PreparedStatement st = this.getPreparedStatement(conn, selectPage);
+		@Var PreparedStatement st = this.getPreparedStatement(conn, selectPage);
         st.setInt(param++, pageNamespace);
         st.setString(param++, pageTitle);
-        ResultSet rs = st.executeQuery();
+        @Var ResultSet rs = st.executeQuery();
         if (!rs.next()) {
             String msg = String.format("Invalid Page: Namespace:%d / Title:--%s--", pageNamespace, pageTitle);
@@ -127,5 +127,5 @@
             throw new UserAbortException(msg);
         }
-        Article a = null;
+        @Var Article a = null;
         if (!forSelect)
 			a = new Article(userIp, pageId, rs.getString("old_text"), textId, revisionId);
--- src/com/oltpbenchmark/benchmarks/smallbank/SmallBankLoader.java
+++ src/com/oltpbenchmark/benchmarks/smallbank/SmallBankLoader.java
@@ -1,4 +1,10 @@
 package com.oltpbenchmark.benchmarks.smallbank;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Loader;
+import com.oltpbenchmark.api.Loader.LoaderThread;
+import com.oltpbenchmark.catalog.Table;
+import com.oltpbenchmark.util.RandomDistribution.*;
+import com.oltpbenchmark.util.SQLUtil;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -6,13 +12,6 @@
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.log4j.Logger;
 
-import com.oltpbenchmark.api.Loader;
-import com.oltpbenchmark.api.Loader.LoaderThread;
-import com.oltpbenchmark.catalog.Table;
-import com.oltpbenchmark.util.SQLUtil;
-import com.oltpbenchmark.util.RandomDistribution.*;
-
 /**
  * SmallBankBenchmark Loader
@@ -55,5 +54,5 @@
         List<LoaderThread> threads = new ArrayList<LoaderThread>();
         int batchSize = 100000;
-        long start = 0;
+        @Var long start = 0;
         while (start < this.numAccounts) {
             long stop = Math.min(start + batchSize, this.numAccounts);
@@ -92,6 +91,6 @@
                 this.stmtChecking = conn.prepareStatement(SmallBankLoader.this.sqlChecking);
                 
-                final String acctNameFormat = "%0"+custNameLength+"d";
-                int batchSize = 0;
+                String acctNameFormat = "%0"+custNameLength+"d";
+                @Var int batchSize = 0;
                 for (long acctId = this.start; acctId < this.stop; acctId++) {
                     // ACCOUNT
--- src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord5.java
+++ src/com/oltpbenchmark/benchmarks/hyadapt/procedures/SumRecord5.java
@@ -17,4 +17,7 @@
 package com.oltpbenchmark.benchmarks.hyadapt.procedures;
 
+import com.google.errorprone.annotations.Var;
+import com.oltpbenchmark.api.Procedure;
+import com.oltpbenchmark.api.SQLStmt;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -22,7 +25,4 @@
 import java.sql.SQLException;
 
-import com.oltpbenchmark.api.Procedure;
-import com.oltpbenchmark.api.SQLStmt;
-
 public class SumRecord5 extends Procedure{
     public final SQLStmt sumStmt = new SQLStmt(
@@ -37,5 +37,5 @@
         PreparedStatement stmt = this.getPreparedStatement(conn, sumStmt);
         stmt.setInt(1, keyname);        
-        int sum = -1;
+        @Var int sum = -1;
         ResultSet r=stmt.executeQuery();
         if(r.next()){
